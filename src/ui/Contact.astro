---
interface Props {
  className?: string;
}
const isDevMode = import.meta.env.DEV;

const { className = "" } = Astro.props;
---

<section id="contact" class={`relative overflow-hidden ${className}`}>
  <div class="container h-full flex justify-between py-8">
    <div class="flex flex-col flex-grow md:w-1/2">
      <h2 class="text-heading">Contact.</h2>
      <div class="space-y-8">
        <form
          class="flex flex-col space-y-4 max-w-md"
          action="https://formsubmit.co/df1748045eb83625a870a914c769ee3c"
          method="POST"
        >
          <input
            type="hidden"
            name="_next"
            value={isDevMode ? "http://localhost:3000" : "https://billyle.dev"}
          />
          <input type="hidden" name="_subject" value="New Message!" />
          <input type="text" name="_honey" class="hidden" />
          <input
            type="text"
            name="name"
            class="h-10 px-3 rounded ring-2 ring-neutral-300"
            placeholder="Name"
            required
          />
          <input
            type="email"
            name="email"
            class="h-10 px-3 rounded ring-2 ring-neutral-300"
            placeholder="Email"
            required
          />
          <textarea
            name="message"
            class="px-3 py-2 rounded ring-2 ring-neutral-300"
            rows={5}
            placeholder="What would you like to say?"
            required></textarea>
          <div class="flex justify-end space-x-2">
            <button
              type="submit"
              class="px-3 py-1 rounded text-xl text-slate-50 bg-slate-900"
              >Submit
            </button>
          </div>
        </form>

        <p class="text-body">
          In a hurry? You can download <a
            target="_blank"
            href="/documents/billy_le_resume.pdf"
            download="billy_le_resume.pdf"
            class="link-hover inline-block font-bold"
            >my resume
          </a> and view it later.
        </p>
      </div>
    </div>
    <div id="globeViz" class="hidden w-1/2 md:block"></div>
  </div>
</section>
<script>
  const contactsContainer = document.querySelector(
    "#contact"
  ) as HTMLDivElement;

  const observer = new IntersectionObserver(async (entries) => {
    for (const entry of entries) {
      if (entry.isIntersecting) {
        await Promise.all([
          import("three"),
          import("three-globe"),
          import("src/data/countries.json"),
        ]).then(([THREE, { default: ThreeGlobe }, countries]) => {
          let animationId: number | null = null;

          const Globe = new ThreeGlobe()
            .atmosphereColor("LightSlateGray")
            .globeImageUrl("/images/map-texture.png")
            .polygonsData(
              countries.features.filter((d) => d.properties.ISO_A2 !== "AQ")
            )
            .polygonCapColor(() => "#d1fae5")
            .polygonSideColor(() => "rgba(148, 163, 184, 1)")
            .polygonStrokeColor(() => "#1E293B");

          Globe.polygonAltitude(() => 0.025);

          // Setup renderer
          const renderer = new THREE.WebGLRenderer({ alpha: true });
          const section = contactsContainer.querySelector(
            ".container"
          ) as HTMLDivElement;
          const globeDiv = document.getElementById(
            "globeViz"
          ) as HTMLDivElement;
          renderer.setSize(section.clientWidth, section.clientHeight);
          globeDiv.appendChild(renderer.domElement);

          // Setup scene
          const scene = new THREE.Scene();
          scene.add(Globe);
          scene.add(new THREE.AmbientLight(0xffffff));
          scene.add(new THREE.DirectionalLight(0xffffff, 5));
          scene.rotateX(-50);

          // Setup camera
          const camera = new THREE.PerspectiveCamera();
          camera.aspect = section.clientWidth / section.clientHeight;
          camera.updateProjectionMatrix();
          camera.position.z = 300;
          camera.position.x = 80;

          function animate() {
            // scene.rotateY(-0.01);
            renderer.render(scene, camera);
            // animationId = requestAnimationFrame(animate);
          }

          animate();

          window.addEventListener("scroll", () => {
            const threshold =
              contactsContainer.offsetTop - contactsContainer.clientHeight;

            if (scrollY < threshold && animationId != null) {
              window.cancelAnimationFrame(animationId);
              animationId = null;
            } else if (scrollY >= threshold && animationId == null) {
              animate();
            }
          });
        });

        observer.disconnect();
      }
    }
  });

  observer.observe(contactsContainer);
</script>
