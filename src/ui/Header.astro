---
import ThemeToggle from "./components/ThemeToggle.astro";
export const navLinks = [
  "Home",
  "Work",
  "About",
  "Skills",
  "Projects",
  "Contact",
];
const centralAngle = 90 / navLinks.length;
---

<header
  class="hidden group py-4 fixed w-full top-0 overflow-x-hidden transition-all duration-300 ease-in-out text-slate-800 border-b border-emerald-400 bg-emerald-50/50 hover:bg-green-50 sm:block z-[1]
  dark:bg-slate-900/80 dark:text-slate-50"
>
  <nav class="container">
    <ul
      id="nav-links"
      class="flex items-center justify-end gap-4 transform transition-all duration-700 ease-in-out group-hover:transform-none group-hover:opacity-100"
    >
      {
        navLinks.map((link) => (
          <li class="relative">
            <a class="nav-link" href={`/#${link.toLowerCase()}`}>
              <span class="px-2 py-1 xl:px-4 xl:py-2">{link}</span>
            </a>
          </li>
        ))
      }

      <li>
        <a
          class="bg-slate-900 text-slate-50 rounded px-2 py-1 xl:px-4 xl:py-2 dark:bg-slate-700"
          href="/documents/billy_le_resume.pdf"
          target="_blank"
        >
          Resume
        </a>
      </li>
      <li>
        <ThemeToggle />
      </li>
    </ul>
  </nav>
</header>

<div class="sm:hidden">
  <div class="p-4 fixed top-0 left-0 z-10">
    <ThemeToggle />
  </div>
  <div
    id="menu-mobile"
    class="isolate bg-green-200 text-slate-800 overflow-hidden fixed top-0 right-0 -translate-y-1/2 translate-x-1/2 z-[1] h-[10rem] w-[10rem]"
  >
    <nav class="absolute bottom-0 left-0 h-1/2 w-1/2">
      <ul id="nav-links-mobile" class="relative h-full w-full">
        {
          navLinks.map((link, index) => {
            const angle = centralAngle * index;
            const skew = 90 - centralAngle;
            return (
              <li
                class="link-mobile absolute top-0 right-0 h-full w-[80%]"
                style={`transform: rotate(-${angle}deg) skew(-${skew}deg); transform-origin: top right`}
              >
                <a
                  href={`/#${link.toLowerCase()}`}
                  class="absolute"
                  style={`transform: rotate(0deg) skew(${skew}deg) translateY(30px)`}
                >
                  <span class="px-2 py-1 xl:px-4 xl:py-2">{link}</span>
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
  <button
    id="menu-button"
    aria-label="Open Menu"
    class="fixed top-4 right-4 text-slate-800 z-[1] h-8 w-8"
  >
    <svg
      class="menu-open-icon"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
    </svg>
    <svg
      class="menu-close-icon"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M6 18 18 6M6 6l12 12"></path>
    </svg>
  </button>
</div>

<style>
  a {
    letter-spacing: -1px;
    font-family: "Inter Variable", sans-serif;
    font-size: clamp(1.15rem, 1vw, 2rem);
    font-weight: 400;
  }

  #menu-button {
    .menu-close-icon {
      display: none;
    }
  }
  #menu-mobile {
    clip-path: circle(50%);
    transition:
      height 0.2s ease,
      width 0.2s ease;

    .link-mobile {
      opacity: 0;
      transition: opacity 0.2s ease-in;
    }

    &.open {
      height: 40rem;
      width: 40rem;

      ~ #menu-button {
        .menu-open-icon {
          display: none;
        }

        .menu-close-icon {
          display: block;
        }
      }

      .link-mobile {
        opacity: 1;
      }
    }
  }

  @media screen and (min-width: 640px) {
    .nav-link {
      letter-spacing: -1px;
      font-family: "Inter Variable", sans-serif;
      font-size: clamp(1.15rem, 1vw, 2rem);
      font-weight: 400;
      transition: font-weight 0.5s ease;

      &:hover {
        @apply dark:text-slate-800;

        font-weight: 800;

        &::after {
          @apply bg-green-300;

          height: 100%;
        }
      }

      &::after {
        display: block;
        content: "";
        position: absolute;
        border-radius: 4px;
        height: 0;
        width: 100%;
        top: 50%;
        transform: translateY(-50%);
        transition: height 0.3s ease-in-out;
        z-index: -1;
      }
    }
  }
</style>
<script>
  function debounce(callback: (...args: any) => void, wait: number) {
    let timerId: NodeJS.Timeout;

    return (...args: any) => {
      clearTimeout(timerId);
      timerId = setTimeout(() => {
        callback(...args);
      }, wait);
    };
  }

  const headerClassList = ["opacity-0"];
  const navLinksClassList = ["translate-x-full", "opacity-0"];

  const header = document.querySelector("header") as HTMLElement;
  const navLinks = document.querySelector("#nav-links") as HTMLUListElement;
  const menuMobile = document.querySelector("#menu-mobile") as HTMLDivElement;
  const menuButton = document.querySelector(
    "#menu-button",
  ) as HTMLButtonElement;

  let lastScrollTop = 0;
  let isScollingDown = false;

  function handleHeaderOffsetTop() {
    if (window.scrollY > lastScrollTop) {
      isScollingDown = true;
      header.classList.add(...headerClassList);
      navLinks.classList.add(...navLinksClassList);
    } else if (window.scrollY < lastScrollTop) {
      isScollingDown = false;
      header.classList.remove(...headerClassList);
      navLinks.classList.remove(...navLinksClassList);
    }
    lastScrollTop = Math.floor(window.scrollY);
  }

  const debouncedHandleHeaderOffsetTop = debounce(handleHeaderOffsetTop, 100);

  function handleMediaMatch(event: MediaQueryListEvent) {
    if (event.matches) {
      menuMobile.classList.remove("open");
      window.addEventListener("scroll", debouncedHandleHeaderOffsetTop);
    } else {
      window.removeEventListener("scroll", debouncedHandleHeaderOffsetTop);
    }
  }
  const matchMedia = window.matchMedia("(min-width: 640px)");
  matchMedia.addEventListener("change", handleMediaMatch);

  if (matchMedia.matches) {
    menuMobile.classList.remove("open");
    window.addEventListener("scroll", debouncedHandleHeaderOffsetTop);
  } else {
    window.removeEventListener("scroll", debouncedHandleHeaderOffsetTop);
  }

  menuButton.addEventListener("click", () => {
    menuMobile.classList.toggle("open");
    const isOpen = menuMobile.classList.contains("open");
    menuButton.ariaLabel = `${isOpen ? "Close" : "Open"} Menu`;
  });

  header.addEventListener("mouseover", () => {
    if (isScollingDown) {
      header.classList.remove(...headerClassList);
    }
  });

  header.addEventListener("mouseleave", () => {
    if (isScollingDown) {
      header.classList.add(...headerClassList);
    }
  });
</script>
