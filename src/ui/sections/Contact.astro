---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<section id="contact" class={`relative overflow-hidden py-8 ${className}`}>
  <div class="container">
    <div class="flex grow flex-col md:w-1/2">
      <h2 class="text-heading">Contact.</h2>
      <div class="space-y-8">
        <form class="contact-form flex max-w-md flex-col space-y-4">
          <input
            type="text"
            name="name"
            class="buzzers"
            placeholder="Name"
            tabindex={-1}
            aria-hidden="true"
            autocomplete="off"
          />
          <input
            type="email"
            name="email"
            class="buzzers"
            placeholder="Email"
            tabindex={-1}
            aria-hidden="true"
            autocomplete="off"
          />
          <textarea
            name="message"
            class="buzzers"
            rows={5}
            placeholder="What would you like to say?"
            tabindex={-1}
            aria-hidden="true"
            autocomplete="off"></textarea>

          <input
            type="text"
            name="name_c"
            class="h-10 rounded px-3 ring-2 ring-neutral-300"
            placeholder="Name"
            required
          />
          <input
            type="email"
            name="email_c"
            class="h-10 rounded px-3 ring-2 ring-neutral-300"
            placeholder="Email"
            required
          />
          <textarea
            name="message_c"
            class="rounded px-3 py-2 ring-2 ring-neutral-300"
            rows={5}
            placeholder="What would you like to say?"
            required></textarea>
          <div class="flex justify-end space-x-2">
            <button
              type="submit"
              class="rounded bg-slate-900 px-3 py-1 text-xl text-slate-50 dark:bg-slate-700 dark:ring-2 dark:ring-slate-50"
              >Submit
            </button>
          </div>
        </form>
        <p class="text-gray-500 dark:text-gray-300">
          In a hurry? You can download <a
            data-astro-prefetch
            target="_blank"
            href="/documents/billy_le_resume.pdf"
            download="billy_le_resume.pdf"
            class="link-hover inline-block font-bold"
            >my resume
          </a> and view it later.
        </p>
      </div>
    </div>
  </div>
  <div
    id="globeViz"
    class="absolute top-0 right-0 -z-10 hidden h-full w-3/4 md:block lg:w-1/2"
  >
  </div>
</section>

<style>
  @reference "@assets/styles/global.css";

  .buzzers {
    @apply absolute top-0 left-0 -z-10 h-0 w-0 opacity-0;
  }
</style>

<script>
  import { sleep } from "@utils/sleep";
  import { debounce } from "@utils/debounce";
  const contactsContainer = document.querySelector(
    "#contact",
  ) as HTMLDivElement;

  const observer = new IntersectionObserver(async (entries) => {
    for (const entry of entries) {
      if (entry.isIntersecting) {
        await Promise.all([
          import("three"),
          import("three-globe"),
          import("src/assets/data/countries.json"),
        ]).then(([THREE, { default: ThreeGlobe }, countries]) => {
          const globeDiv = document.getElementById(
            "globeViz",
          ) as HTMLDivElement;

          const renderer = new THREE.WebGLRenderer({
            alpha: true,
            antialias: true,
          });
          const clock = new THREE.Clock();
          const scene = new THREE.Scene();
          const camera = new THREE.PerspectiveCamera();
          const directionalLight = new THREE.DirectionalLight("white", 4);
          const ambientLight = new THREE.AmbientLight("white");
          const radiansPerSecond = THREE.MathUtils.degToRad(15);

          renderer.setPixelRatio(window.devicePixelRatio);
          directionalLight.position.set(-10, 0, 10);
          camera.position.z = 300;

          const Globe = new ThreeGlobe({})
            .atmosphereColor("LightSlateGray")
            .globeImageUrl("/images/map-texture.png")
            .polygonsData(
              countries.features.filter((d) => d.properties.ISO_A2 !== "AQ"),
            )
            .polygonCapColor(() => "#d1fae5")
            .polygonSideColor(() => "rgba(148, 163, 184, 1)")
            .polygonStrokeColor(() => "#1E293B")
            .polygonAltitude(() => 0.025);

          function setSize(
            container: HTMLDivElement,
            camera: THREE.PerspectiveCamera,
            renderer: THREE.WebGLRenderer,
          ) {
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
          }

          setSize(globeDiv, camera, renderer);
          scene.add(Globe, directionalLight, ambientLight);
          globeDiv.append(renderer.domElement);

          function tick(delta: number) {
            Globe.rotation.y += delta * radiansPerSecond;
          }

          function nextTick() {
            const delta = clock.getDelta();
            tick(delta);
          }

          function start() {
            nextTick();
            renderer.render(scene, camera);
          }

          function resize() {
            setSize(globeDiv, camera, renderer);
          }

          function scroll() {
            const threshold =
              contactsContainer.offsetTop - contactsContainer.clientHeight;
            if (scrollY < threshold) {
              renderer.setAnimationLoop(null);
            } else if (scrollY >= threshold) {
              renderer.setAnimationLoop(start);
            }
          }

          const [debouncedResize, clearDebouncedResize] = debounce(resize, 100);
          const [debouncedScroll, clearDebouncedScroll] = debounce(scroll, 100);
          window.addEventListener("scroll", debouncedScroll);
          window.addEventListener("resize", debouncedResize);

          window.addEventListener("beforeunload", () => {
            clearDebouncedResize();
            clearDebouncedScroll();
            window.removeEventListener("scroll", debouncedScroll);
            window.removeEventListener("resize", debouncedResize);
          });
        });

        observer.disconnect();
      }
    }
  });

  observer.observe(contactsContainer);

  const contactForm =
    contactsContainer.querySelector<HTMLFormElement>(".contact-form");

  if (contactForm) {
    contactForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formEl = e.target as HTMLFormElement;
      const formData = new FormData(formEl);

      const requestBody = {
        name: formData.get("name_c"),
        email: formData.get("email_c"),
        message: formData.get("message_c"),
      };

      try {
        const { message } = await fetch(
          import.meta.env.PROD
            ? "https://api.billyle.dev/send-email"
            : "http://localhost:3000/send-email",
          {
            method: "POST",
            body: JSON.stringify(requestBody),
            headers: {
              "Content-Type": "application/json",
            },
          },
        ).then((res) => res.json());

        const nameInput = formEl.querySelector<HTMLInputElement>(
          'input[name="name_c"]',
        );
        const emailInput = formEl.querySelector<HTMLInputElement>(
          'input[name="email_c"]',
        );
        const messageInput = formEl.querySelector<HTMLTextAreaElement>(
          'textarea[name="message_c"]',
        );

        nameInput?.classList?.remove("ring-red-500");
        emailInput?.classList?.remove("ring-red-500");
        messageInput?.classList?.remove("ring-red-500");

        const errorName = nameInput?.nextElementSibling as HTMLDivElement;
        const errorEmail = emailInput?.nextElementSibling as HTMLDivElement;
        const messageError = messageInput?.nextElementSibling as HTMLDivElement;

        if (errorName?.dataset?.["error"]) {
          errorName.remove();
        }
        if (errorEmail?.dataset?.["error"]) {
          errorEmail.remove();
        }
        if (messageError?.dataset?.["error"]) {
          messageError.remove();
        }

        function createErrorMessage(message: string) {
          const p = document.createElement("p");
          p.className = "text-sm text-red-400";
          p.dataset["error"] = "true";
          p.textContent = message;
          return p;
        }

        function insertErrorMessage(el: HTMLElement) {
          const error = el?.nextSibling as HTMLDivElement;
          if (!error?.dataset?.["error"]) {
            const div = createErrorMessage(message);
            el?.insertAdjacentElement("afterend", div);
          }
        }

        async function createSuccessToaster() {
          const div = document.createElement("div");
          const p = document.createElement("p");
          div.className =
            "fixed bottom-8 right-8 p-4 bg-slate-200 dark:bg-slate-700 shadoow-lg rounded-md opacity-0 transition-opacity duration-300 border-t-4 border-emerald-400 border-solid";
          p.className = "text-xl text-slate-800 dark:text-slate-100";
          p.textContent = "Your message has been sent!";
          div.appendChild(p);
          document.body.appendChild(div);

          await sleep(100);
          div.classList.remove("opacity-0");
          await sleep(3000);
          div.classList.add("opacity-0");
          await sleep(200);
          div.remove();
        }

        switch (message) {
          case "Success": {
            formEl.reset();
            createSuccessToaster();
            break;
          }
          case "Name must be at least 3 characters": {
            if (nameInput) {
              insertErrorMessage(nameInput);
            }
            break;
          }
          case "Invalid email format": {
            if (emailInput) {
              insertErrorMessage(emailInput);
            }
            break;
          }
          case "Message should be at least 10 characters and max of 1024 characters": {
            if (messageInput) {
              insertErrorMessage(messageInput);
            }
            break;
          }
          default: {
            if (import.meta.env.DEV) {
              console.log("Unknown message: ", message);
            }
          }
        }
      } catch (err) {
        if (import.meta.env.DEV) {
          console.log(err);
        }
      }
    });
  }
</script>
