<script>
  /* import {
   * cssPropertiesLight,
   * cssPropertiesDark,
   * } from "@utils/remarkCustomCssProperties";
   */
  // keep as var to keep in global scope
  var remark_config = {
    host: import.meta.env.PUBLIC_REMARK_URL,
    site_id: import.meta.env.PUBLIC_SITE,
    components: ["embed"],
    theme: window.localStorage.getItem("theme") ?? "dark",
    locale: "en",
    show_email_subscription: true,
    show_rss_subscription: false,
    no_footer: true,
    __colors__: {},
  };

  window.remark_config = remark_config;

  function createRemark42Script(components: string[], doc: Document) {
    for (let i = 0; i < components.length; i++) {
      let scriptEl: HTMLScriptElement = doc.createElement("script");
      let ext = ".js";
      let headOrBodyEl = doc.head || doc.body;

      if ("noModule" in scriptEl && !scriptEl.noModule) {
        scriptEl.type = "module";
        ext = ".mjs";
      } else {
        scriptEl.async = true;
        scriptEl.defer = true;
      }

      scriptEl.src = `${window.remark_config.host}/web/${components[i]}${ext}`;
      headOrBodyEl.appendChild(scriptEl);
    }
  }
  if ("remark_config" in window) {
    createRemark42Script(
      window.remark_config.components || ["embed"],
      document,
    );
  }

  const observer = new MutationObserver((mutations, obs) => {
    for (const mutation of mutations) {
      for (const node of mutation.addedNodes) {
        if ("REMARK42" in window && node instanceof HTMLIFrameElement) {
          const commentsHeading = document.createElement("h2");
          commentsHeading.id = "comments";
          commentsHeading.textContent = "Comments";
          const remarkContainer = document.getElementById("remark42");
          if (remarkContainer) {
            remarkContainer.prepend(commentsHeading);
            const io = new IntersectionObserver((entries) => {
              for (const entry of entries) {
                const addRemove =
                  entry.intersectionRatio > 0 ? "add" : "remove";
                const links = document.querySelectorAll("a[href='#comments']");
                for (const link of links) {
                  link.classList[addRemove](
                    "text-blue-500",
                    "dark:text-blue-400",
                  );
                }
              }
            });
            io.observe(remarkContainer);
          }
          const tocLists = document.querySelectorAll(".toc-links");
          for (const list of tocLists) {
            const listItem = document.createElement("li");
            const anchor = document.createElement("a");
            anchor.href = "#comments";
            anchor.className = "no-underline";
            anchor.textContent = "Comments";
            listItem.appendChild(anchor);
            list.appendChild(listItem);
          }
          obs.disconnect();
        }
      }
    }
  });
  const remarkContainer = document.getElementById("remark42");
  if (remarkContainer) {
    observer.observe(remarkContainer, { childList: true, subtree: true });
  }

  document.addEventListener("beforeunload", () => {
    observer.disconnect();
  });
</script>

<section id="remark42"></section>
<noscript
  >Please enable JavaScript to view the comments powered by Remark42.</noscript
>
