---
import "@fontsource-variable/inter";
import "@fontsource/vidaloka";

export interface Props {
  title: string;
  description: string;
}
const { title, description } = Astro.props as Props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <script defer src="https://www.googletagmanager.com/gtag/js?id=G-7X79K0T33N"
    ></script>
    <script defer>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-7X79K0T33N");
    </script>
    <title>{title}</title>
  </head>
  <body class="relative min-h-screen dark:bg-slate-800">
    <slot />

    <style is:global>
      html {
        @font-face {
          font-family: "SpaceAndriodsItalic";
          src: url("/fonts/SpaceAndroidsItalic.ttf") format("truetype");
          font-weight: normal;
          font-style: normal;
          font-display: swap;
        }

        scroll-behavior: smooth;
        font-family: "Inter Variable", sans-serif;

        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      .text-heading {
        @apply text-slate-800 opacity-0 mb-4 dark:text-white;

        font-size: clamp(2rem, 5vw, 5rem);
        font-family: "Vidaloka", sans-serif;
      }

      .text-body {
        @apply text-gray-500 dark:text-gray-300;

        opacity: 0;
        font-size: clamp(1rem, 2vw, 1.5rem);
      }

      .link-hover {
        position: relative;
        width: max-content;

        &::after {
          display: block;
          content: "";
          position: absolute;
          bottom: -0.1em;
          height: 2px;
          width: 0;
          transition: width 0.2s ease-in;

          @apply bg-gradient-to-r from-green-300 to-green-400;
        }

        &:hover::after {
          width: 100%;
        }
      }

      .no-js {
        opacity: 1;
      }

      @keyframes text-fade-in {
        0% {
          opacity: 0;
          transform: translateY(100%);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
    <script>
      const noJs = document.querySelectorAll(".no-js");
      for (const el of noJs) {
        el.classList.remove("no-js");
      }

      const headingObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const target = entry.target as HTMLElement;
          if (entry.isIntersecting && !target.style.animation) {
            target.style.animation = "text-fade-in forwards .7s";
          }
        });
      });

      const paragraphsObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const target = entry.target as HTMLElement;
          if (entry.isIntersecting) {
            const paragraphs = target.querySelectorAll("p");
            for (let i = 0; i < paragraphs.length; i++) {
              const paragraph = paragraphs[i];
              if (paragraph) {
                paragraph.style.animation = `text-fade-in forwards .4s ${
                  i * 0.2 + 0.8
                }s`;
              }
            }
          }
        });
      });

      const headings = document.querySelectorAll(".text-heading");
      const paragraphSection = document.querySelectorAll(".p-fade");
      for (const heading of headings) {
        headingObserver.observe(heading);
      }

      for (const section of paragraphSection) {
        paragraphsObserver.observe(section);
      }
    </script>
  </body>
</html>
