---
import "@fontsource/inter/variable.css";
import "@fontsource/vidaloka/400.css";

export interface Props {
  title: string;
}
const { title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <script
      src="https://kit.fontawesome.com/536e9f73a2.js"
      crossorigin="anonymous"
    ></script>
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="relative min-h-screen">
    <div class="bg"></div>
    <slot />

    <style is:global>
      html {
        scroll-behavior: smooth;
        font-family: InterVariable;
      }

      .bg {
        position: absolute;
        z-index: -1;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background-image: conic-gradient(
            from 231deg at 1% 65%,
            hsla(0, 0%, 72.94%, 0.04343454032113192) 94%,
            hsla(60, 100%, 84.12%, 0.518908795029966) 95%
          ),
          conic-gradient(
            from 178deg at 75% 28%,
            hsla(186.67, 36%, 95.1%, 0.5876948183941447) 67%,
            hsla(0, 0%, 100%, 0.6174479126319269) 94%
          ),
          linear-gradient(
            5deg,
            hsla(354.89, 100%, 90.78%, 0.8154554751635659) 68%,
            hsla(55.29, 67.11%, 29.8%, 0.009536936881926028) 78%
          ),
          linear-gradient(
            266deg,
            hsla(182.54, 30.47%, 54.31%, 0.21474266544789078) 63%,
            hsla(182.31, 33.33%, 84.71%, 0.33280158645216595) 94%
          ),
          repeating-linear-gradient(270deg, #fcfee6 40%, #d1d1d1 74%);
        background-attachment: fixed;
        background-size: cover;
        background-repeat: no-repeat;
      }

      .text-heading {
        @apply text-slate-800 opacity-0 mb-4;

        font-size: clamp(2rem, 5vw, 5rem);
        font-family: Vidaloka;
      }

      .text-body {
        @apply text-slate-600;

        font-size: clamp(1rem, 1vw, 2rem);
      }

      .link-hover {
        position: relative;
        width: max-content;

        &::after {
          display: block;
          content: "";
          position: absolute;
          bottom: -0.1em;
          height: 2px;
          width: 0;
          transition: width 0.2s ease-in;

          @apply bg-gradient-to-r from-green-300 to-green-400;
        }

        &:hover::after {
          width: 100%;
        }
      }

      @keyframes text-fade-in {
        0% {
          opacity: 0;
          transform: translateY(100%);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
    <script>
      const headingObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const target = entry.target as HTMLElement;
          if (entry.isIntersecting && !target.style.animation) {
            target.style.animation = "text-fade-in forwards .7s";
          }
        });
      });

      const paragraphsObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const target = entry.target as HTMLElement;
          if (entry.isIntersecting) {
            const paragraphs = target.querySelectorAll("p");
            for (let i = 0; i < paragraphs.length; i++) {
              const paragraph = paragraphs[i];
              if (paragraph) {
                paragraph.style.animation = `text-fade-in forwards .4s ${
                  i * 0.2 + 0.8
                }s`;
              }
            }
          }
        });
      });

      const headings = document.querySelectorAll(".text-heading");
      const paragraphSection = document.querySelectorAll(".p-fade");
      for (const heading of headings) {
        headingObserver.observe(heading);
      }

      for (const section of paragraphSection) {
        paragraphsObserver.observe(section);
      }
    </script>
  </body>
</html>
