---
import "@fontsource-variable/inter";
import "@fontsource/vidaloka";
import "@assets/styles/global.css";

import type { Post } from "src/content/config";
import type { MarkdownHeading } from "astro";
import type { HeadingHierarchy } from "@ui/components/TOCHeading.astro";
interface Props extends Post {
  headings: MarkdownHeading[] | undefined;
}

import Header from "@ui/components/Header.astro";
import Footer from "@ui/components/Footer.astro";
import BackdropRadial from "@ui/components/BackdropRadial.astro";
import TOCHeading from "@ui/components/TOCHeading.astro";
import { Picture } from "astro:assets";

const defaultPicture =
  "https://images.unsplash.com/photo-1503197979108-c824168d51a8?q=80&w=1933&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D";

const { title, description, image, pubDate, author, headings } = Astro.props;

function encodeString(str: string) {
  return encodeURIComponent(str);
}
const encodedTitle = encodeString(title);
const encodedImage = encodeString(image.url);
const templateId = "e4b8c678-7bd5-445d-ba03-bfaad510c686";
const ogVersion = "3";
const site = "billyle.dev";
const dynamicOG = `https://ogcdn.net/${templateId}/v${ogVersion}/${site}/${encodedTitle}/${encodedImage}/og.png`;
const newUrl = new URL(Astro.url.pathname, Astro.site);
const canonicalURL = newUrl.href.replace(RegExp(/\/$/), "");

function createHeadingHierarchy(headings: MarkdownHeading[]) {
  const topLevelHeadings: HeadingHierarchy[] = [];

  headings.forEach((heading) => {
    if (heading.depth > 3) {
      throw Error(
        `Depths greater than 3 not allowed:\n${JSON.stringify(heading, null, 2)}`,
      );
    }
    const h = {
      ...heading,
      subheadings: [],
    };

    if (h.depth === 2) {
      topLevelHeadings.push(h);
    } else {
      let parent = topLevelHeadings[topLevelHeadings.length - 1];
      if (parent) {
        parent.subheadings.push(h);
      }
    }
  });

  return topLevelHeadings;
}

const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />

    <!-- Open Graph tags -->
    <meta property="og:site_name" content="Billy Le" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta name="author" content={author} />
    <meta name="image" property="og:image" content={dynamicOG} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:type" content="article" />
    <meta
      name="publish_date"
      property="og:publish_date"
      content={pubDate.toISOString()}
    />
    <meta property="og:locale" content="en_US" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={dynamicOG} />
    <meta property="twitter:domain" content="billyle.dev" />
    <meta property="twitter:url" content={Astro.url.href} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="canonical" href={canonicalURL} />
    <script defer src="https://www.googletagmanager.com/gtag/js?id=G-7X79K0T33N"
    ></script>
    <script defer>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-7X79K0T33N");
    </script>
    <title>{title}</title>
  </head>
  <body class="relative font-inter">
    <Header />
    <main class="relative min-h-screen">
      <BackdropRadial />
      <section
        class="relative mx-auto max-w-7xl h-32 sm:h-[320px] -z-10
        border-b-4 border-emerald-400 border-solid
        after:content-[''] after:absolute after:top-0 after:left-0 after:h-full after:w-full after:bg-gradient-to-t after:from-slate-900/20"
      >
        <Picture
          src={image.url || defaultPicture}
          alt={image.alt || "aerial view of waves crashing onto a beach"}
          sizes={"256px"}
          widths={[256]}
          height={192}
          width={192}
          class="object-cover w-full h-full"
        />
      </section>
      <section
        class={`${hasToC ? "max-w-7xl mx-auto lg:grid lg:grid-cols-4" : ""}`}
      >
        {
          hasToC && (
            <div class="relative mx-auto px-4 prose dark:prose-invert xl:pt-10 2xl:px-0">
              <nav class="xl:sticky xl:top-20">
                <h2 class="text-emerald-400">Table of Contents</h2>
                <ul class="toc-links marker:text-yellow-500">
                  {toc.map((heading) => (
                    <TOCHeading heading={heading} />
                  ))}
                </ul>
              </nav>
            </div>
          )
        }

        <article
          class={`py-10 sm:py-20 px-4 mx-auto prose prose-h1:font-vidaloka dark:prose-invert
        prose-code:before:hidden prose-code:after:hidden
        sm:prose-lg lg:prose-xl
        ${hasToC ? "lg:col-span-3" : ""}
        `}
        >
          <h1>{title}</h1>
          <slot />
        </article>
      </section>
    </main>
  </body>
  <Footer />
  <style is:global>
    code:not(pre code) {
      @apply rounded-md px-2 py-1.5 !font-normal !text-blue-400;

      background-color: #24292e;
    }
  </style>
  <script>
    const articleSections =
      document.querySelectorAll<HTMLDivElement>("article section");

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const heading =
          entry.target.querySelector<HTMLHeadingElement>("h2,h3,h4,h5");
        if (!heading) return;
        const id = heading.getAttribute("id");
        if (!id) return;
        const link = document.querySelector<HTMLAnchorElement>(
          `.toc-links a[href="#${id}"]`,
        );
        if (!link) return;

        const addRemove = entry.intersectionRatio > 0 ? "add" : "remove";
        link.classList[addRemove]("text-blue-500", "dark:text-blue-400");
      });
    });

    for (const section of articleSections) {
      observer.observe(section);
    }

    window.document.addEventListener("beforeunload", () => {
      observer.disconnect();
    });
  </script>
</html>
