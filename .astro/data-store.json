[["Map",1,2,7,8,194,195],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.3","config-digest","630459d62ca2d506","projects",["Map",9,10,54,55,93,94,129,130,160,161],"clearbank",{"id":9,"data":11,"filePath":45,"assetImports":46,"digest":53},{"name":12,"description":13,"link":14,"images":15,"sourceCode":34,"tags":38,"ranking":44},"ClearBank","ClearBank is a financial banking app that uses Plaid to connect to your bank accounts and shows your current balance, transaction history, and spending budget. It uses Dwolla to transfer funds from one account to another via a shareable link.","https://clearbank.billyle.dev",[16,19,22,25,28,31],{"src":17,"alt":18},"__ASTRO_IMAGE_./_images/clearbank-login.png","clearbank login page",{"src":20,"alt":21},"__ASTRO_IMAGE_./_images/clearbank-dashboard.png","clearbank dashboard",{"src":23,"alt":24},"__ASTRO_IMAGE_./_images/clearbank-accounts.png","clearbank accounts page",{"src":26,"alt":27},"__ASTRO_IMAGE_./_images/clearbank-transactions.png","clearbank transactions page",{"src":29,"alt":30},"__ASTRO_IMAGE_./_images/clearbank-transfers.png","clearbank transfers page",{"src":32,"alt":33},"__ASTRO_IMAGE_./_images/clearbank-plaid.png","clearbank plaid integration",[35],{"link":36,"host":37},"https://github.com/billy-le/clearbank","github",[39,40,41,42,43],"nextjs","react","plaid","dwolla","tailwind","low","src/content/projects/clearbank.json",[47,48,49,50,51,52],"./_images/clearbank-login.png","./_images/clearbank-dashboard.png","./_images/clearbank-accounts.png","./_images/clearbank-transactions.png","./_images/clearbank-transfers.png","./_images/clearbank-plaid.png","d6de6ad6fce1a813","eventlulu",{"id":54,"data":56,"filePath":85,"assetImports":86,"digest":92},{"name":57,"description":58,"link":59,"images":60,"sourceCode":76,"tags":79,"ranking":84},"Eventlulu","Eventlulu is an online event management platform for hotels. It features a dashboard with important metrics, creating proposals from leads, and an admin page to inventory products and services offered. I started this project to assist the daily operations of a hotel where majority of their sales pipeline is done by paper and hand.","https://eventlulu.billyle.dev",[61,64,67,70,73],{"src":62,"alt":63},"__ASTRO_IMAGE_./_images/eventlulu-home.png","eventlulu home page",{"src":65,"alt":66},"__ASTRO_IMAGE_./_images/eventlulu-dashboard.png","eventlulu dashboard page",{"src":68,"alt":69},"__ASTRO_IMAGE_./_images/eventlulu-charts.png","eventlulu charst",{"src":71,"alt":72},"__ASTRO_IMAGE_./_images/eventlulu-lead-form.png","eventlulu lead form",{"src":74,"alt":75},"__ASTRO_IMAGE_./_images/eventlulu-leads.png","eventlulu leads table",[77],{"link":78,"host":37},"https://github.com/billy-le/eventlulu",[80,81,82,83,40],"node","trpc","typescript","tailwindcss","high","src/content/projects/eventlulu.json",[87,88,89,90,91],"./_images/eventlulu-home.png","./_images/eventlulu-dashboard.png","./_images/eventlulu-charts.png","./_images/eventlulu-lead-form.png","./_images/eventlulu-leads.png","75db2b0bfa6d3bdf","soil-life",{"id":93,"data":95,"filePath":121,"assetImports":122,"digest":128},{"name":96,"description":97,"link":98,"images":99,"sourceCode":115,"tags":118,"ranking":120},"Soil Life","I developed an informational website aimed at educating the public about soil life, employing the JAMStack architecture. Initially, the project began as a monolithic stack with static pages served from an Express Node server using Embedded JavaScript Templates (ejs). Eventually, the final product transitioned to React, leveraging Google Sheets as the CMS.","https://soillife.org",[100,103,106,109,112],{"src":101,"alt":102},"__ASTRO_IMAGE_./_images/soillife-home.png","soil life home page",{"src":104,"alt":105},"__ASTRO_IMAGE_./_images/soillife-web-of-soil.png","soil life - web of soil",{"src":107,"alt":108},"__ASTRO_IMAGE_./_images/soillife-web-graph.png","soil life - web graph",{"src":110,"alt":111},"__ASTRO_IMAGE_./_images/soillife-media.png","soil life - media page",{"src":113,"alt":114},"__ASTRO_IMAGE_./_images/soillife-101.png","soil life - soil 101 page",[116],{"link":117,"host":37},"https://github.com/SoilLife/soil-life-web",[40,39,119,43],"netlify","mid","src/content/projects/soil-life.json",[123,124,125,126,127],"./_images/soillife-home.png","./_images/soillife-web-of-soil.png","./_images/soillife-web-graph.png","./_images/soillife-media.png","./_images/soillife-101.png","f1da16b37a6c5461","dotted-earth",{"id":129,"data":131,"filePath":154,"assetImports":155,"digest":159},{"name":132,"description":133,"link":134,"images":135,"sourceCode":145,"tags":148,"ranking":44},"Dotted","An AI-powered mobile application built using Flutter, Supabase, and Node. The app generates an itinerary for users based on their profiles. The AI takes into account their recreational activities, diet, favorite cuisines, and food allergies to create a personalized schedule. Users can then view the itinerary, which displays each location and route on Google Maps.","https://billyle.dev/posts/case-study-building-dotted",[136,139,142],{"src":137,"alt":138},"__ASTRO_IMAGE_../posts/_images/case-study-dotted/dotted-desktop.webp","dotted landing page",{"src":140,"alt":141},"__ASTRO_IMAGE_../posts/_images/case-study-dotted/dotted-screens.png","dotted various screens",{"src":143,"alt":144},"__ASTRO_IMAGE_../posts/_images/case-study-dotted/excalidraw_dotted.png","dotted app design and logic flow",[146],{"link":147,"host":37},"https://github.com/dotted-earth",[149,150,151,152,80,153],"flutter","dart","ai","supabase","python","src/content/projects/dotted-earth.json",[156,157,158],"../posts/_images/case-study-dotted/dotted-desktop.webp","../posts/_images/case-study-dotted/dotted-screens.png","../posts/_images/case-study-dotted/excalidraw_dotted.png","abce405903d01d6f","converse",{"id":160,"data":162,"filePath":187,"assetImports":188,"digest":193},{"name":163,"description":164,"link":165,"images":166,"sourceCode":179,"tags":182,"ranking":44},"Converse","Converse is a real-time web chat app utilizing WebRTC and Socket.io. It boasts features such as public chatrooms, live video and audio streaming, the ability to change input/output media devices, and invitation link sharing. I initiated this project with the primary goal of enhancing my knowledge in real-time web communications and protocols.","https://converse.billyle.dev",[167,170,173,176],{"src":168,"alt":169},"__ASTRO_IMAGE_./_images/converse-lobby-01.png","converse user 1 lobby",{"src":171,"alt":172},"__ASTRO_IMAGE_./_images/converse-lobby-02.png","converse user 2 lobby",{"src":174,"alt":175},"__ASTRO_IMAGE_./_images/converse-chatroom.png","converse chatroom",{"src":177,"alt":178},"__ASTRO_IMAGE_./_images/converse-livestream.png","converse livestream",[180],{"link":181,"host":37},"https://github.com/billy-le/converse",[80,183,184,185,186],"express","liquidjs","web-rtc","socket.io","src/content/projects/converse.json",[189,190,191,192],"./_images/converse-lobby-01.png","./_images/converse-lobby-02.png","./_images/converse-chatroom.png","./_images/converse-livestream.png","aaa2247c73587c04","posts",["Map",196,197,296,297,330,331,368,369,406,407,502,503,570,571,629,630,645,646,671,672,762,763,791,792,830,831,877,878,932,933,1019,1020,1080,1081,1125,1126,1163,1164,1208,1209],"case-study-building-dotted",{"id":196,"data":198,"body":214,"filePath":215,"assetImports":216,"digest":224,"rendered":225,"legacyId":295},{"title":199,"pubDate":200,"description":201,"author":202,"image":205,"tags":209,"draft":211,"readingTime":212,"lastDateModified":213},"Case Study - Building Dotted",["Date","2024-08-12T00:00:00.000Z"],"I developed an AI mobile app aimed at making it easy to generate travel itineraries. Having zero experience in mobile and AI development, it was quite a challenge. In this case study, I want to share the process of how I was able to build Dotted.",{"name":203,"email":204},"Billy Le","hi@billyle.dev",{"url":206,"alt":207,"className":208},"https://images.unsplash.com/photo-1511068797325-6083f0f872b1","a map with colorful pins","",[210],"case study",false,"5 min read","2024-11-12T15:59:02+08:00","## Introduction\n\n### Project Overview\n\nDotted is a travel AI mobile application built with Flutter, Supabase, and Node. he product was intended to be released on iOS and Android platforms, with a website launch planned if things went well.\n\nHere is a snapshot of all the screens that were created in this project.\n\n![Screenshots of Dotted](./_images/case-study-dotted/dotted-screens.png)\n\n### Objective\n\nThere were main three objectives:\n\n1. Utilize AI to generate itineraries while keeping costs low\n2. Launch the app before the summer where the traveling industry starts to picks up\n3. Profit\n\n## Challenges\n\n### Initial Challenges\n\nThere were quite a few challenges from the get go.\n\nI had zero experience in mobile and AI app development so learning new languages and frameworks was rather difficult.\n\nHardware limitations were another impediment since I was developing on a base model MacBook Air M1 where running iOS simulations would hog up resources and I couldn't run any local LLMs.\n\nI partnered up for this project with a friend who had a full-time role. Among his work, life and this project, he had to find time to contribute.\n\n### Project Scope\n\nWe wanted to create an MVP where a user can sign up and generate an itinerary. The generated itinerary could then be viewed by the user, showing a schedule by day.\n\nThe following diagram shows the flow of the application in it's most basic form.\n\n![High-level diagram of Dotted](./_images/case-study-dotted/excalidraw_dotted.png)\n\n## Research and Planning\n\n### Market Research\n\nI scoped out the competition and found many companies already implementing AI to generate itineraries.\n\nThe companies were offering either a mobile app or a web app but not both. The way they approached their product was similar to ours but I did find a unique product where the product is an AI chatbot.\n\nWe also read a white paper on the use of AI in the travel industry but we discovered that we were not mathematicians.\n\n### Planning\n\nI'm no designer by trade but I did design the market landing page where users could be added to a waitlist.\n\n![Mock design of market landing page](./_images/case-study-dotted/dotted-desktop.webp)\n\nFor typography, I chose Marcellus SC for headings and Alef for content. It felt right to me at the time.\n\nThe primary color is a sunset purple(?). I wanted to convey the feeling of awe that I feel when I see a beautiful sunset.\n\nIt's mesmerizing to look up at that and I wanted to translate that into traveling.\n\nFor the mobile app design, I didn't really touch it and used a lot of references from Behance and Dribbble.\n\n### Technology Stack\n\nMuch of the tech stack I chose was new to both me and my partner. I made all the choices because I wanted to learn something new.\n\nI wanted to use a cross-platform tool so I chose Flutter. The reason why I chose Flutter over React Native is because I heard Flutter was more performant.\n\nHere is a list of all the tech used:\n\n1. Flutter / Dart\n2. Supabase / Postgres\n3. Node\n4. Redis\n5. Docker - containerized the backend which includes Node and Redis\n6. SQLite for caching destinations on the phone\n7. Google Gemini Pro and Google Maps\n8. Unsplash API\n\n## Development Process\n\n### Design Phase\n\nI approached designing the core business logic and entities by starting with the customer.\n\nWe know that we wanted to create a profile of the user's preference and use that data to generate a personalized experience.\n\nOur solution to that was to make the user select their preferences on the onboarding screen.\n\nAccompanying that data is the user's destination, their accommodations, budget, and the time they want to start and end the itinerary.\n\nAny generated itinerary needed a cover image which we pulled in from Unsplash.\n\nFinally, the user can view their itinerary by tapping on any upcoming / on-going itineraries on the main page.\n\n### Development Phase\n\nI started working on the front-end first before the back-end. There were a lot of tutorials for Flutter and Supabase on how to set up a project fast.\n\nDeveloping the Flutter application was not super difficult as it felt very similar to React in terms of rendering and passing \"props\".\n\nFor the back-end, I switched between various technologies because I ran into skill issues. I tried using BentoML, then OpenLLM, and then Ollama, which, in most ways, failed me.\n\nI then tried using AI providers like Groq and liked it very much but when I introduced AI agents, I was hitting the rate limiting pretty fast so I had to use something easier.\n\nSince then, I chose Google Gemini Pro. It was mostly free to use, almost no rate limiting and I could pass in a big context if I wanted to.\n\nOn the backend, I chose Node and whenever the mobile app sent a request to create an itinerary, the payload would be queued in a Redis Message Queue.\n\nThe Message Queue would pick up jobs and make the call to Gemini for the itinerary and the result of that would be parsed and saved into Supabase.\n\n### Iterations\n\nThere a few iterations to how the AI was being generated as described above. I also changed the models quite often as I discovered properties that I needed and no longer needed.\n\n## Solution\n\nThe final solution was a mobile app that worked on iOS and Android simulators.\n\nHere are the 4 core functionalities that were implemented in this project.\n\n### Auth\n\n![Auth signup](./_images/case-study-dotted/dotted-login.gif)\n\n### On-Boarding\n\n![On-boarding screen](./_images/case-study-dotted/dotted-on-boarding.gif)\n\n### Generate Itinerary\n\n![Generate itinerary form](./_images/case-study-dotted/dotted-generate-itinerary.gif)\n\n### View Itinerary\n\n![View itinerary screen](./_images/case-study-dotted/dotted-view-itinerary.gif)\n\n## Conclusion\n\nOverall, the project was quite challenging and took more than 4 months to complete the MVP.\n\nI learned a great deal while working on Dotted and I will continue to develop my skills in this tech stack.\n\nIn regards to the project, I think I would not continue to pursue the idea.\n\nAI is great but it's also predictable and unpredictable at the same time.\n\nInputting the same destination would give you the same itinerary, even if the temperature changed.\n\nAdditionally, Google Gemini could change the way their models work at any moment.\n\nI like the idea of using AI to generate itineraries but don't think it's ready for me.\n\n## Appendix\n\n[Source code](https://github.com/dotted-earth)","src/content/posts/case-study-building-dotted.md",[217,218,219,220,221,222,223],"./_images/case-study-dotted/dotted-screens.png","./_images/case-study-dotted/excalidraw_dotted.png","./_images/case-study-dotted/dotted-desktop.webp","./_images/case-study-dotted/dotted-login.gif","./_images/case-study-dotted/dotted-on-boarding.gif","./_images/case-study-dotted/dotted-generate-itinerary.gif","./_images/case-study-dotted/dotted-view-itinerary.gif","1d28db818fbd5b93",{"html":226,"metadata":227},"\u003Csection>\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\u003Csection>\u003Ch3 id=\"project-overview\">Project Overview\u003C/h3>\u003Cp>Dotted is a travel AI mobile application built with Flutter, Supabase, and Node. he product was intended to be released on iOS and Android platforms, with a website launch planned if things went well.\u003C/p>\u003Cp>Here is a snapshot of all the screens that were created in this project.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-screens.png&#x22;,&#x22;alt&#x22;:&#x22;Screenshots of Dotted&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"objective\">Objective\u003C/h3>\u003Cp>There were main three objectives:\u003C/p>\u003Col>\n\u003Cli>Utilize AI to generate itineraries while keeping costs low\u003C/li>\n\u003Cli>Launch the app before the summer where the traveling industry starts to picks up\u003C/li>\n\u003Cli>Profit\u003C/li>\n\u003C/ol>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"challenges\">Challenges\u003C/h2>\u003Csection>\u003Ch3 id=\"initial-challenges\">Initial Challenges\u003C/h3>\u003Cp>There were quite a few challenges from the get go.\u003C/p>\u003Cp>I had zero experience in mobile and AI app development so learning new languages and frameworks was rather difficult.\u003C/p>\u003Cp>Hardware limitations were another impediment since I was developing on a base model MacBook Air M1 where running iOS simulations would hog up resources and I couldn’t run any local LLMs.\u003C/p>\u003Cp>I partnered up for this project with a friend who had a full-time role. Among his work, life and this project, he had to find time to contribute.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"project-scope\">Project Scope\u003C/h3>\u003Cp>We wanted to create an MVP where a user can sign up and generate an itinerary. The generated itinerary could then be viewed by the user, showing a schedule by day.\u003C/p>\u003Cp>The following diagram shows the flow of the application in it’s most basic form.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/excalidraw_dotted.png&#x22;,&#x22;alt&#x22;:&#x22;High-level diagram of Dotted&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"research-and-planning\">Research and Planning\u003C/h2>\u003Csection>\u003Ch3 id=\"market-research\">Market Research\u003C/h3>\u003Cp>I scoped out the competition and found many companies already implementing AI to generate itineraries.\u003C/p>\u003Cp>The companies were offering either a mobile app or a web app but not both. The way they approached their product was similar to ours but I did find a unique product where the product is an AI chatbot.\u003C/p>\u003Cp>We also read a white paper on the use of AI in the travel industry but we discovered that we were not mathematicians.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"planning\">Planning\u003C/h3>\u003Cp>I’m no designer by trade but I did design the market landing page where users could be added to a waitlist.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-desktop.webp&#x22;,&#x22;alt&#x22;:&#x22;Mock design of market landing page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>For typography, I chose Marcellus SC for headings and Alef for content. It felt right to me at the time.\u003C/p>\u003Cp>The primary color is a sunset purple(?). I wanted to convey the feeling of awe that I feel when I see a beautiful sunset.\u003C/p>\u003Cp>It’s mesmerizing to look up at that and I wanted to translate that into traveling.\u003C/p>\u003Cp>For the mobile app design, I didn’t really touch it and used a lot of references from Behance and Dribbble.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"technology-stack\">Technology Stack\u003C/h3>\u003Cp>Much of the tech stack I chose was new to both me and my partner. I made all the choices because I wanted to learn something new.\u003C/p>\u003Cp>I wanted to use a cross-platform tool so I chose Flutter. The reason why I chose Flutter over React Native is because I heard Flutter was more performant.\u003C/p>\u003Cp>Here is a list of all the tech used:\u003C/p>\u003Col>\n\u003Cli>Flutter / Dart\u003C/li>\n\u003Cli>Supabase / Postgres\u003C/li>\n\u003Cli>Node\u003C/li>\n\u003Cli>Redis\u003C/li>\n\u003Cli>Docker - containerized the backend which includes Node and Redis\u003C/li>\n\u003Cli>SQLite for caching destinations on the phone\u003C/li>\n\u003Cli>Google Gemini Pro and Google Maps\u003C/li>\n\u003Cli>Unsplash API\u003C/li>\n\u003C/ol>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"development-process\">Development Process\u003C/h2>\u003Csection>\u003Ch3 id=\"design-phase\">Design Phase\u003C/h3>\u003Cp>I approached designing the core business logic and entities by starting with the customer.\u003C/p>\u003Cp>We know that we wanted to create a profile of the user’s preference and use that data to generate a personalized experience.\u003C/p>\u003Cp>Our solution to that was to make the user select their preferences on the onboarding screen.\u003C/p>\u003Cp>Accompanying that data is the user’s destination, their accommodations, budget, and the time they want to start and end the itinerary.\u003C/p>\u003Cp>Any generated itinerary needed a cover image which we pulled in from Unsplash.\u003C/p>\u003Cp>Finally, the user can view their itinerary by tapping on any upcoming / on-going itineraries on the main page.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"development-phase\">Development Phase\u003C/h3>\u003Cp>I started working on the front-end first before the back-end. There were a lot of tutorials for Flutter and Supabase on how to set up a project fast.\u003C/p>\u003Cp>Developing the Flutter application was not super difficult as it felt very similar to React in terms of rendering and passing “props”.\u003C/p>\u003Cp>For the back-end, I switched between various technologies because I ran into skill issues. I tried using BentoML, then OpenLLM, and then Ollama, which, in most ways, failed me.\u003C/p>\u003Cp>I then tried using AI providers like Groq and liked it very much but when I introduced AI agents, I was hitting the rate limiting pretty fast so I had to use something easier.\u003C/p>\u003Cp>Since then, I chose Google Gemini Pro. It was mostly free to use, almost no rate limiting and I could pass in a big context if I wanted to.\u003C/p>\u003Cp>On the backend, I chose Node and whenever the mobile app sent a request to create an itinerary, the payload would be queued in a Redis Message Queue.\u003C/p>\u003Cp>The Message Queue would pick up jobs and make the call to Gemini for the itinerary and the result of that would be parsed and saved into Supabase.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"iterations\">Iterations\u003C/h3>\u003Cp>There a few iterations to how the AI was being generated as described above. I also changed the models quite often as I discovered properties that I needed and no longer needed.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"solution\">Solution\u003C/h2>\u003Cp>The final solution was a mobile app that worked on iOS and Android simulators.\u003C/p>\u003Cp>Here are the 4 core functionalities that were implemented in this project.\u003C/p>\u003Csection>\u003Ch3 id=\"auth\">Auth\u003C/h3>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-login.gif&#x22;,&#x22;alt&#x22;:&#x22;Auth signup&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"on-boarding\">On-Boarding\u003C/h3>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-on-boarding.gif&#x22;,&#x22;alt&#x22;:&#x22;On-boarding screen&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"generate-itinerary\">Generate Itinerary\u003C/h3>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-generate-itinerary.gif&#x22;,&#x22;alt&#x22;:&#x22;Generate itinerary form&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"view-itinerary\">View Itinerary\u003C/h3>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/case-study-dotted/dotted-view-itinerary.gif&#x22;,&#x22;alt&#x22;:&#x22;View itinerary screen&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\u003Cp>Overall, the project was quite challenging and took more than 4 months to complete the MVP.\u003C/p>\u003Cp>I learned a great deal while working on Dotted and I will continue to develop my skills in this tech stack.\u003C/p>\u003Cp>In regards to the project, I think I would not continue to pursue the idea.\u003C/p>\u003Cp>AI is great but it’s also predictable and unpredictable at the same time.\u003C/p>\u003Cp>Inputting the same destination would give you the same itinerary, even if the temperature changed.\u003C/p>\u003Cp>Additionally, Google Gemini could change the way their models work at any moment.\u003C/p>\u003Cp>I like the idea of using AI to generate itineraries but don’t think it’s ready for me.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"appendix\">Appendix\u003C/h2>\u003Cp>\u003Ca href=\"https://github.com/dotted-earth\">Source code\u003C/a>\u003C/p>\u003C/section>",{"headings":228,"imagePaths":294,"frontmatter":198},[229,233,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291],{"depth":230,"slug":231,"text":232},2,"introduction","Introduction",{"depth":234,"slug":235,"text":236},3,"project-overview","Project Overview",{"depth":234,"slug":238,"text":239},"objective","Objective",{"depth":230,"slug":241,"text":242},"challenges","Challenges",{"depth":234,"slug":244,"text":245},"initial-challenges","Initial Challenges",{"depth":234,"slug":247,"text":248},"project-scope","Project Scope",{"depth":230,"slug":250,"text":251},"research-and-planning","Research and Planning",{"depth":234,"slug":253,"text":254},"market-research","Market Research",{"depth":234,"slug":256,"text":257},"planning","Planning",{"depth":234,"slug":259,"text":260},"technology-stack","Technology Stack",{"depth":230,"slug":262,"text":263},"development-process","Development Process",{"depth":234,"slug":265,"text":266},"design-phase","Design Phase",{"depth":234,"slug":268,"text":269},"development-phase","Development Phase",{"depth":234,"slug":271,"text":272},"iterations","Iterations",{"depth":230,"slug":274,"text":275},"solution","Solution",{"depth":234,"slug":277,"text":278},"auth","Auth",{"depth":234,"slug":280,"text":281},"on-boarding","On-Boarding",{"depth":234,"slug":283,"text":284},"generate-itinerary","Generate Itinerary",{"depth":234,"slug":286,"text":287},"view-itinerary","View Itinerary",{"depth":230,"slug":289,"text":290},"conclusion","Conclusion",{"depth":230,"slug":292,"text":293},"appendix","Appendix",[217,218,219,220,221,222,223],"case-study-building-dotted.md","catching-up-with-artificial-intelligence-and-life",{"id":296,"data":298,"body":309,"filePath":310,"digest":311,"rendered":312,"legacyId":329},{"title":299,"pubDate":300,"description":301,"author":302,"image":303,"tags":306,"draft":211,"readingTime":212,"lastDateModified":308},"Catching Up with Artificial Intelligence and Life",["Date","2024-07-03T00:00:00.000Z"],"It's been a few months since I last checked in and wrote a post. During that time, I was head down working on my mobile AI app, Dotted, but progressing slowly. Recently, I finally had the chance to visit the US for a new college graduate in our family. The reunion was absolutely pleasant and a much needed break away from the monotony.",{"name":203,"email":204},{"url":304,"alt":305,"className":208},"https://images.unsplash.com/photo-1438557068880-c5f474830377","glass cups raised for a toast",[307],"blogging","2024-07-03T11:56:11+08:00","I haven't been here lately as much as I want to be. I haven't found anything worth writing about.\n\nSince my last post, I've been working on Dotted, the AI-generated itinerary Flutter app and boy! has it been a difficult journey.\n\nNothing beats an exhausting venture like a good-ol' break. So I traveled back to the US for an overdue family reunion to celebrate my nephew who recently graduated college.\n\nOn my return, I finally picked up a new M3 MacBook Air so I can put myself out there even more.\n\nWith content creation in mind, I started to learn Da Vinci Resolve and Open Broadcast Software (OBS).\n\nIn this post, I'll briefly talk about all these points.\n\n## Learning and using AI 🤖\nAI is practically everywhere and you can't really hide from it anymore. I shied away from using AI products for productivity for a while and it still hasn't registered with me completely.\n\nAs far as working and developing AI apps, I find it fun yet daunting if you never worked with it before.\n\nThings like LLM, tokens, inference, agents, tools, OpenAI spec, and the ever growing list of things to learn puts a lot of pressure for a new developer to try to keep up with.\n\nWhile working on Dotted, I don't know how many times I switched back and forth between different models, frameworks, and AI providers.\n\nNot knowing where to start, and staying away from paid services, it was tough to find out where the starting point lies.\n\nI knew I wanted to work locally so first I tried BentoML, and when that failed me, OpenLLM. And when OpenLLM was taxing my resources till the point I couldn't click properly, I moved to cloud services.\n\nThen I discovered AI agents through CrewAI and started learning a bit of Python to get it to work. Unfortunately, I kept hitting bugs and it wasn't production ready.\n\nI settled with using Google Gemini for the time being because Google is holding a competition for using their products. I figured, why not?\n\nOther than that, Dotted is nearly complete for a demo release. I don't plan to make it a paid service or submit it to the App Store or Google Play Store since I think the cost will be too high on every generation.\n\nBut what I did learn about working on Dotted is using Flutter, working with a Job Task Queue with Redis, using Supabase locally, and much more.\n\nI plan to release a case study in the future to further delve into my thoughts in a concrete form.\n\n## The Family Reunion\n\nI'm so happy I had the chance to meet my family again after 5 years since moving abroad.\n\nWe all live across many states so it's hard for all of us to be together. But what drew us in was a member of the family had graduated college.\n\nIt called for a celebration of all those who were involved and I was glad to be apart of it.\n\nHaving nostalgia and recalling our youth spread laughter among us and catching up with many family friends sparked interesting conversations about their present and future.\n\nThe best highlight of all is seeing all the young ones growing up and becoming their own person. All babies who have been born in the last few years were expressing wonders with their eyes and cooing up a storm.\n\nI wasn't very close to the graduate but having been there in his early life and now starting their next chapter in life gave me a reason to reconnect.\n\nI'm very proud of him and I'm sure he will pursue many great things as both his interests collide between being a Data Science and a Musician.\n\n## New Laptop for Content Creation\n\nAt the family gathering, I was called the \"Family Historian\". 🤣\n\nI had a good chuckle at that and I will cherish the title 'till the day I _die_. Over half the time, I had my phone out, recording all our moments together.\n\nI wanted to take all the video clips and stitch them together. My current laptop is the mere base model M1 MacBook Air.\n\nI needed a stronger laptop that can perform at all the task I give it.\n\nYou'd be surprise how far I pushed my laptop with web development but in no way it's sustainable to record, edit, and render content while having an iOS simulator, Docker containers, LLM server and recording software running in the background.\n\nIt's just too much for the base model M1 MacBook Air.\n\nI had to get an upgrade so I got myself a nice M3 MacBook Air.\n\nI took advantage of my military discount and my Apple credit, so it was fairly _cheap_.\n\nThe configuration I got was 24GB RAM and 1TB of SSD storage for about $1,200 USD.\n\nYou may be thinking... **\"Why not just put that money into a MacBook Pro?\"**.\n\nWell, I will say to you that this laptop also has another purpose in that I plan to hand this down to my wife when I'm ready for the MacBook Pro.\n\nIn two-and-a-half years, I predict the M5 MacBook Pro will get a new design and also be on the 2nm die for more power efficiency so I'll be waiting until another upgrade.\n\n## Finding a niche content\n\nThat's pretty much what I've been doing and I'm ready for my next project when I wrap up Dotted.\n\nI'm thinking about going full-time into Furfil, or start on another Flutter project. I'm not sure yet but I'll be sure to provide an update.\n\nAs far as content creation, I'm still figuring a good niche. I still feel like I'm adept to a lot of the web development topics so I don't want to dive too deep. But that might be Imposter's Syndrome talking. Who knows? 🤷🏻\n\nWell, until next time, I hope you enjoyed this update and I'll see you around. Thanks for reading and have a good one! 🍻","src/content/posts/catching-up-with-artificial-intelligence-and-life.md","d53e59c4298a2b71",{"html":313,"metadata":314},"\u003Cp>I haven’t been here lately as much as I want to be. I haven’t found anything worth writing about.\u003C/p>\n\u003Cp>Since my last post, I’ve been working on Dotted, the AI-generated itinerary Flutter app and boy! has it been a difficult journey.\u003C/p>\n\u003Cp>Nothing beats an exhausting venture like a good-ol’ break. So I traveled back to the US for an overdue family reunion to celebrate my nephew who recently graduated college.\u003C/p>\n\u003Cp>On my return, I finally picked up a new M3 MacBook Air so I can put myself out there even more.\u003C/p>\n\u003Cp>With content creation in mind, I started to learn Da Vinci Resolve and Open Broadcast Software (OBS).\u003C/p>\n\u003Cp>In this post, I’ll briefly talk about all these points.\u003C/p>\n\u003Csection>\u003Ch2 id=\"learning-and-using-ai\">Learning and using AI 🤖\u003C/h2>\u003Cp>AI is practically everywhere and you can’t really hide from it anymore. I shied away from using AI products for productivity for a while and it still hasn’t registered with me completely.\u003C/p>\u003Cp>As far as working and developing AI apps, I find it fun yet daunting if you never worked with it before.\u003C/p>\u003Cp>Things like LLM, tokens, inference, agents, tools, OpenAI spec, and the ever growing list of things to learn puts a lot of pressure for a new developer to try to keep up with.\u003C/p>\u003Cp>While working on Dotted, I don’t know how many times I switched back and forth between different models, frameworks, and AI providers.\u003C/p>\u003Cp>Not knowing where to start, and staying away from paid services, it was tough to find out where the starting point lies.\u003C/p>\u003Cp>I knew I wanted to work locally so first I tried BentoML, and when that failed me, OpenLLM. And when OpenLLM was taxing my resources till the point I couldn’t click properly, I moved to cloud services.\u003C/p>\u003Cp>Then I discovered AI agents through CrewAI and started learning a bit of Python to get it to work. Unfortunately, I kept hitting bugs and it wasn’t production ready.\u003C/p>\u003Cp>I settled with using Google Gemini for the time being because Google is holding a competition for using their products. I figured, why not?\u003C/p>\u003Cp>Other than that, Dotted is nearly complete for a demo release. I don’t plan to make it a paid service or submit it to the App Store or Google Play Store since I think the cost will be too high on every generation.\u003C/p>\u003Cp>But what I did learn about working on Dotted is using Flutter, working with a Job Task Queue with Redis, using Supabase locally, and much more.\u003C/p>\u003Cp>I plan to release a case study in the future to further delve into my thoughts in a concrete form.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"the-family-reunion\">The Family Reunion\u003C/h2>\u003Cp>I’m so happy I had the chance to meet my family again after 5 years since moving abroad.\u003C/p>\u003Cp>We all live across many states so it’s hard for all of us to be together. But what drew us in was a member of the family had graduated college.\u003C/p>\u003Cp>It called for a celebration of all those who were involved and I was glad to be apart of it.\u003C/p>\u003Cp>Having nostalgia and recalling our youth spread laughter among us and catching up with many family friends sparked interesting conversations about their present and future.\u003C/p>\u003Cp>The best highlight of all is seeing all the young ones growing up and becoming their own person. All babies who have been born in the last few years were expressing wonders with their eyes and cooing up a storm.\u003C/p>\u003Cp>I wasn’t very close to the graduate but having been there in his early life and now starting their next chapter in life gave me a reason to reconnect.\u003C/p>\u003Cp>I’m very proud of him and I’m sure he will pursue many great things as both his interests collide between being a Data Science and a Musician.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"new-laptop-for-content-creation\">New Laptop for Content Creation\u003C/h2>\u003Cp>At the family gathering, I was called the “Family Historian”. 🤣\u003C/p>\u003Cp>I had a good chuckle at that and I will cherish the title ‘till the day I \u003Cem>die\u003C/em>. Over half the time, I had my phone out, recording all our moments together.\u003C/p>\u003Cp>I wanted to take all the video clips and stitch them together. My current laptop is the mere base model M1 MacBook Air.\u003C/p>\u003Cp>I needed a stronger laptop that can perform at all the task I give it.\u003C/p>\u003Cp>You’d be surprise how far I pushed my laptop with web development but in no way it’s sustainable to record, edit, and render content while having an iOS simulator, Docker containers, LLM server and recording software running in the background.\u003C/p>\u003Cp>It’s just too much for the base model M1 MacBook Air.\u003C/p>\u003Cp>I had to get an upgrade so I got myself a nice M3 MacBook Air.\u003C/p>\u003Cp>I took advantage of my military discount and my Apple credit, so it was fairly \u003Cem>cheap\u003C/em>.\u003C/p>\u003Cp>The configuration I got was 24GB RAM and 1TB of SSD storage for about $1,200 USD.\u003C/p>\u003Cp>You may be thinking… \u003Cstrong>“Why not just put that money into a MacBook Pro?”\u003C/strong>.\u003C/p>\u003Cp>Well, I will say to you that this laptop also has another purpose in that I plan to hand this down to my wife when I’m ready for the MacBook Pro.\u003C/p>\u003Cp>In two-and-a-half years, I predict the M5 MacBook Pro will get a new design and also be on the 2nm die for more power efficiency so I’ll be waiting until another upgrade.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"finding-a-niche-content\">Finding a niche content\u003C/h2>\u003Cp>That’s pretty much what I’ve been doing and I’m ready for my next project when I wrap up Dotted.\u003C/p>\u003Cp>I’m thinking about going full-time into Furfil, or start on another Flutter project. I’m not sure yet but I’ll be sure to provide an update.\u003C/p>\u003Cp>As far as content creation, I’m still figuring a good niche. I still feel like I’m adept to a lot of the web development topics so I don’t want to dive too deep. But that might be Imposter’s Syndrome talking. Who knows? 🤷🏻\u003C/p>\u003Cp>Well, until next time, I hope you enjoyed this update and I’ll see you around. Thanks for reading and have a good one! 🍻\u003C/p>\u003C/section>",{"headings":315,"imagePaths":328,"frontmatter":298},[316,319,322,325],{"depth":230,"slug":317,"text":318},"learning-and-using-ai","Learning and using AI 🤖",{"depth":230,"slug":320,"text":321},"the-family-reunion","The Family Reunion",{"depth":230,"slug":323,"text":324},"new-laptop-for-content-creation","New Laptop for Content Creation",{"depth":230,"slug":326,"text":327},"finding-a-niche-content","Finding a niche content",[],"catching-up-with-artificial-intelligence-and-life.md","diving-head-first-into-the-startup-unknowns",{"id":330,"data":332,"body":344,"filePath":345,"digest":346,"rendered":347,"legacyId":367},{"title":333,"pubDate":334,"description":335,"author":336,"image":337,"tags":340,"draft":211,"readingTime":342,"lastDateModified":343},"Diving Head First into the Startup Unknowns",["Date","2024-04-18T00:00:00.000Z"],"This year, I'm going to try to launch projects that will hopefully generate income. It's always been a dream of mine to pursue exciting ideas that I'm passionate about. In doing so, there are so many raised questions about what I need to do.",{"name":203,"email":204},{"url":338,"alt":339,"className":208},"https://images.pexels.com/photos/19421180/pexels-photo-19421180/free-photo-of-man-jumping-to-sea-at-golden-hour.jpeg","a man jumping off an ocean cliff",[307,341],"startup","3 min read","2024-05-04T16:12:49+08:00","After I'd been forced to quit my last employment, I've been idling by since I felt burnt out from that role.\n\nI didn't have any drive to do anything for about a year but I have been keeping up-to-date on tech matters.\n\nWatching the tech market plummet with massive layoffs and the rise of AI, I knew I had to do something or risk being left behind.\n\nI started to pick up Golang as my backend language of choice for its simplicity and speed while also picking up PostgreSQL.\n\nAnd then after a conversation with a friend, he recommended using Flutter for mobile development.\n\nWith this new stack, I rolled up my sleeves to work on some projects.\n\n## Project #1: Furfil\n\nFurfil has been spinning in my mind for quite a while.\n\nIt's about creating a platform where pet services can meet customers. It's like Rover but will offer plenty of more services.\n\nIt will be released as a web and mobile app.\n\n## Project #2: Dotted\n\nDotted is a project that a friend and I are working on.\n\nIt's an AI mobile app that helps generate itineraries for traveling.\n\nWe're using Flutter to release on mobile, and potentially releasing a web app.\n\n## Learning how to launch startups\n\nI listened to hours of podcasts about startups but I'm constantly thinking about how I'm supposed to launch my own.\n\nThe majority of the content I've been consuming is very broad and high-level. It doesn't necessarily cover the nitty-gritty details I need to take.\n\nLike should I start an LLC first or use a sole proprietorship?\n\nShould I use the beginning of a tax year to form the LLC?\n\nWhere should I set one up? Wyoming? Delaware? Do I need a lawyer from that state?\n\nShould I have a holding company and hold ownership in another LLC for Dotted since that will be a partnership?\n\nCan my partner qualify for working on Dotted since they're on an H1-B visa?\n\nI have so many questions and they are coming in slowly. It's been paralyzing to take action because there is so much to do.\n\n## The struggles of app development\n\nDevelopment will be always slow on new languages and technologies being learned. As we push forward, there are always an area of unknowns and it takes time and research to figure out the best approach.\n\nI get mentally exhausted from learning and hitting obstacles that I end up working on my website like this blog post as a way to reclaim my peace.\n\nAnd every minute taken away from the projects means time to market is prolonged.\n\nI'm thinking about starting Furfil from scratch using what I know to keep things simple and fast. But I know Furfil won't scale well with Node and MongoDB in the long run.\n\nThere's a tradeoff to everything.\n\n## Next course of action\n\nUntil I do something to push the needle forward, I will be in this constant state.\n\nSo I'm starting my new LLC next month. I have a domain ready and I'll announce it when it's finalized.\n\nI have to learn by doing and learn by failing. If this is not the right decision, I'll learn to live with it and adapt accordingly.\n\nThat's how anyone can find success and every success story is different from one another.\n\nIt's time to write my own story.\n\nThanks for reading my rant. I hope you have a good one.","src/content/posts/diving-head-first-into-the-startup-unknowns.md","f94e5941865341f2",{"html":348,"metadata":349},"\u003Cp>After I’d been forced to quit my last employment, I’ve been idling by since I felt burnt out from that role.\u003C/p>\n\u003Cp>I didn’t have any drive to do anything for about a year but I have been keeping up-to-date on tech matters.\u003C/p>\n\u003Cp>Watching the tech market plummet with massive layoffs and the rise of AI, I knew I had to do something or risk being left behind.\u003C/p>\n\u003Cp>I started to pick up Golang as my backend language of choice for its simplicity and speed while also picking up PostgreSQL.\u003C/p>\n\u003Cp>And then after a conversation with a friend, he recommended using Flutter for mobile development.\u003C/p>\n\u003Cp>With this new stack, I rolled up my sleeves to work on some projects.\u003C/p>\n\u003Csection>\u003Ch2 id=\"project-1-furfil\">Project #1: Furfil\u003C/h2>\u003Cp>Furfil has been spinning in my mind for quite a while.\u003C/p>\u003Cp>It’s about creating a platform where pet services can meet customers. It’s like Rover but will offer plenty of more services.\u003C/p>\u003Cp>It will be released as a web and mobile app.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"project-2-dotted\">Project #2: Dotted\u003C/h2>\u003Cp>Dotted is a project that a friend and I are working on.\u003C/p>\u003Cp>It’s an AI mobile app that helps generate itineraries for traveling.\u003C/p>\u003Cp>We’re using Flutter to release on mobile, and potentially releasing a web app.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"learning-how-to-launch-startups\">Learning how to launch startups\u003C/h2>\u003Cp>I listened to hours of podcasts about startups but I’m constantly thinking about how I’m supposed to launch my own.\u003C/p>\u003Cp>The majority of the content I’ve been consuming is very broad and high-level. It doesn’t necessarily cover the nitty-gritty details I need to take.\u003C/p>\u003Cp>Like should I start an LLC first or use a sole proprietorship?\u003C/p>\u003Cp>Should I use the beginning of a tax year to form the LLC?\u003C/p>\u003Cp>Where should I set one up? Wyoming? Delaware? Do I need a lawyer from that state?\u003C/p>\u003Cp>Should I have a holding company and hold ownership in another LLC for Dotted since that will be a partnership?\u003C/p>\u003Cp>Can my partner qualify for working on Dotted since they’re on an H1-B visa?\u003C/p>\u003Cp>I have so many questions and they are coming in slowly. It’s been paralyzing to take action because there is so much to do.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"the-struggles-of-app-development\">The struggles of app development\u003C/h2>\u003Cp>Development will be always slow on new languages and technologies being learned. As we push forward, there are always an area of unknowns and it takes time and research to figure out the best approach.\u003C/p>\u003Cp>I get mentally exhausted from learning and hitting obstacles that I end up working on my website like this blog post as a way to reclaim my peace.\u003C/p>\u003Cp>And every minute taken away from the projects means time to market is prolonged.\u003C/p>\u003Cp>I’m thinking about starting Furfil from scratch using what I know to keep things simple and fast. But I know Furfil won’t scale well with Node and MongoDB in the long run.\u003C/p>\u003Cp>There’s a tradeoff to everything.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"next-course-of-action\">Next course of action\u003C/h2>\u003Cp>Until I do something to push the needle forward, I will be in this constant state.\u003C/p>\u003Cp>So I’m starting my new LLC next month. I have a domain ready and I’ll announce it when it’s finalized.\u003C/p>\u003Cp>I have to learn by doing and learn by failing. If this is not the right decision, I’ll learn to live with it and adapt accordingly.\u003C/p>\u003Cp>That’s how anyone can find success and every success story is different from one another.\u003C/p>\u003Cp>It’s time to write my own story.\u003C/p>\u003Cp>Thanks for reading my rant. I hope you have a good one.\u003C/p>\u003C/section>",{"headings":350,"imagePaths":366,"frontmatter":332},[351,354,357,360,363],{"depth":230,"slug":352,"text":353},"project-1-furfil","Project #1: Furfil",{"depth":230,"slug":355,"text":356},"project-2-dotted","Project #2: Dotted",{"depth":230,"slug":358,"text":359},"learning-how-to-launch-startups","Learning how to launch startups",{"depth":230,"slug":361,"text":362},"the-struggles-of-app-development","The struggles of app development",{"depth":230,"slug":364,"text":365},"next-course-of-action","Next course of action",[],"diving-head-first-into-the-startup-unknowns.md","enabling-developer-mode-on-ios-17_3_1",{"id":368,"data":370,"body":382,"filePath":383,"assetImports":384,"digest":396,"rendered":397,"legacyId":405},{"title":371,"pubDate":372,"description":373,"author":374,"image":375,"tags":378,"draft":211,"readingTime":381,"lastDateModified":343},"Enabling Developer Mode on iOS 17.3.1",["Date","2024-03-07T00:00:00.000Z"],"If you have trouble finding the Developer Mode settings on your iPhone, I may have the fix for you. The official documentation was outdated and other users' comments around the internet echoed what the docs said. ",{"name":203,"email":204},{"url":376,"alt":377,"className":208},"https://images.unsplash.com/photo-1598170845055-806a9e9f3f72","a pile of fresh red apples",[379,380],"mobile development","iOS","2 min read","I had trouble recently trying to find the \"Developer Mode\" settings on my iPhone. I tried viewing the \"Privacy & Security\" settings and scrolling down to the bottom only to find that it wasn't there.\n\n![screen of iphone where developer mode is not showing](./_images/developer-mode/developer-mode-invisible.jpg)\n\nEven the official documentation was not helpful and users around the internet repeated the same instructions.\n\nIt wasn't until I found an obscure comment that helped me unlock \"Developer Mode\". So now I'm going to share how I got \"Developer Mode\" to show.\n\n## How to enable \"Developer Mode\" for iPhone and Xcode\n\n1. [Download Xcode](https://developer.apple.com/xcode/) on your macOS device.\n   ![xcode logo](./_images/developer-mode/xcode-logo.png)\n\n2. Connect your iPhone to your macOS device and make sure to trust your device on your iPhone.\n   ![trust computer prompt on iOS](./_images/developer-mode/trust-computer-prompt.jpeg)\n\n3. And enter your passcode on your iPhone\n   ![enter passcode on iOS](./_images/developer-mode/enter-device-passcode.jpeg)\n\n4. Open Xcode and navigate to the settings \"Product\" > \"Destination\" > \"Manage Run Destinations\"\n   ![menu navigation to \"manage run destinations\"](./_images/developer-mode/xcode-manage-run-destinations.png)\n\n5. You should see your device now but there's a warning banner that \"Developer Mode\" is not enabled.\n   ![destinations management showing a banner that dev mode is not enabled](./_images/developer-mode/xcode-destinations-no-dev-mode.png)\n\n6. Head over to \"Privacy & Security\" in \"Settings\" on your iPhone and you should now see \"Developer Mode\".\n   ![privacy and security menu](./_images/developer-mode/privacy-and-security.jpeg)\n\n7. Turn it on and it will ask you to \"Restart\" which is required.\n   ![turning on dev mode](./_images/developer-mode/dev-mode-on.jpeg)\n\n8. Upon logging back into your iPhone, it will confirm you want to turn on \"Developer Mode\". Press \"Turn On\".\n   ![dev mode reduced security prompt](./_images/developer-mode/dev-mode-reduced-security.jpeg)\n\n9. One last time you'll be asked to enter your passcode.\n   ![dev mode enter the passcode](./_images/developer-mode/dev-mode-passcode.jpeg)\n\n10. If you look at Xcode, you should see that your iPhone will try to pair. If not, you may need to wait or click on the warning banner.\n    ![iphone and xcode paring](./_images/developer-mode/xcode-device-pairing.png)\n\nThat's it!\n\nYou now have \"Developer Mode\" set on your iPhone. Turn off \"Developer Mode\" by going back to your iPhone \"Privacy & Security\" settings if you no longer need it.\n\nGood luck, happy coding and see you next time.","src/content/posts/enabling-developer-mode-on-ios-17_3_1.md",[385,386,387,388,389,390,391,392,393,394,395],"./_images/developer-mode/developer-mode-invisible.jpg","./_images/developer-mode/xcode-logo.png","./_images/developer-mode/trust-computer-prompt.jpeg","./_images/developer-mode/enter-device-passcode.jpeg","./_images/developer-mode/xcode-manage-run-destinations.png","./_images/developer-mode/xcode-destinations-no-dev-mode.png","./_images/developer-mode/privacy-and-security.jpeg","./_images/developer-mode/dev-mode-on.jpeg","./_images/developer-mode/dev-mode-reduced-security.jpeg","./_images/developer-mode/dev-mode-passcode.jpeg","./_images/developer-mode/xcode-device-pairing.png","350cac829f51cccb",{"html":398,"metadata":399},"\u003Cp>I had trouble recently trying to find the “Developer Mode” settings on my iPhone. I tried viewing the “Privacy &#x26; Security” settings and scrolling down to the bottom only to find that it wasn’t there.\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/developer-mode-invisible.jpg&#x22;,&#x22;alt&#x22;:&#x22;screen of iphone where developer mode is not showing&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>Even the official documentation was not helpful and users around the internet repeated the same instructions.\u003C/p>\n\u003Cp>It wasn’t until I found an obscure comment that helped me unlock “Developer Mode”. So now I’m going to share how I got “Developer Mode” to show.\u003C/p>\n\u003Csection>\u003Ch2 id=\"how-to-enable-developer-mode-for-iphone-and-xcode\">How to enable “Developer Mode” for iPhone and Xcode\u003C/h2>\u003Col>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://developer.apple.com/xcode/\">Download Xcode\u003C/a> on your macOS device.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/xcode-logo.png&#x22;,&#x22;alt&#x22;:&#x22;xcode logo&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Connect your iPhone to your macOS device and make sure to trust your device on your iPhone.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/trust-computer-prompt.jpeg&#x22;,&#x22;alt&#x22;:&#x22;trust computer prompt on iOS&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>And enter your passcode on your iPhone\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/enter-device-passcode.jpeg&#x22;,&#x22;alt&#x22;:&#x22;enter passcode on iOS&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Open Xcode and navigate to the settings “Product” > “Destination” > “Manage Run Destinations”\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/xcode-manage-run-destinations.png&#x22;,&#x22;alt&#x22;:&#x22;menu navigation to \\&#x22;manage run destinations\\&#x22;&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You should see your device now but there’s a warning banner that “Developer Mode” is not enabled.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/xcode-destinations-no-dev-mode.png&#x22;,&#x22;alt&#x22;:&#x22;destinations management showing a banner that dev mode is not enabled&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Head over to “Privacy &#x26; Security” in “Settings” on your iPhone and you should now see “Developer Mode”.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/privacy-and-security.jpeg&#x22;,&#x22;alt&#x22;:&#x22;privacy and security menu&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Turn it on and it will ask you to “Restart” which is required.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/dev-mode-on.jpeg&#x22;,&#x22;alt&#x22;:&#x22;turning on dev mode&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Upon logging back into your iPhone, it will confirm you want to turn on “Developer Mode”. Press “Turn On”.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/dev-mode-reduced-security.jpeg&#x22;,&#x22;alt&#x22;:&#x22;dev mode reduced security prompt&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>One last time you’ll be asked to enter your passcode.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/dev-mode-passcode.jpeg&#x22;,&#x22;alt&#x22;:&#x22;dev mode enter the passcode&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If you look at Xcode, you should see that your iPhone will try to pair. If not, you may need to wait or click on the warning banner.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-mode/xcode-device-pairing.png&#x22;,&#x22;alt&#x22;:&#x22;iphone and xcode paring&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003C/ol>\u003Cp>That’s it!\u003C/p>\u003Cp>You now have “Developer Mode” set on your iPhone. Turn off “Developer Mode” by going back to your iPhone “Privacy &#x26; Security” settings if you no longer need it.\u003C/p>\u003Cp>Good luck, happy coding and see you next time.\u003C/p>\u003C/section>",{"headings":400,"imagePaths":404,"frontmatter":370},[401],{"depth":230,"slug":402,"text":403},"how-to-enable-developer-mode-for-iphone-and-xcode","How to enable “Developer Mode” for iPhone and Xcode",[385,386,387,388,389,390,391,392,393,394,395],"enabling-developer-mode-on-ios-17_3_1.md","adding-github-pull-request-preview-deployments-with-coolify",{"id":406,"data":408,"body":422,"filePath":423,"assetImports":424,"digest":468,"rendered":469,"legacyId":501},{"title":409,"pubDate":410,"description":411,"author":412,"image":413,"tags":416,"draft":211,"readingTime":421,"lastDateModified":343},"Adding GitHub Pull Request Preview Deployments with Coolify",["Date","2024-03-05T00:00:00.000Z"],"Pull Request Preview Deployments are a neat feature where you receive a shareable link so you can showcase a feature before merging it into production. In this post, I'll show you how you can set up your Coolify to create those magical Pull Request Preview Deploys just like Netlify.",{"name":203,"email":204},{"url":414,"alt":415,"className":208},"https://images.unsplash.com/photo-1475706398693-8250350bc704","a top-down view of a man pulling a thick rope",[417,418,419,420],"self-hosting","devops","tutorial","paas","12 min read","One of the nice things about Netlify, Vercel, etc. is automatic commit deployments on your main branch. We can use the same manner in Coolify's feature using \"Private Repository with GitHub app\". Not only will we get the benefit of commit deployments, but we can also set it up for Pull Request preview deploys before we make a merge to the main branch.\n\nLet's cover what we're going to do:\n\n1. Create a subdomain wildcard DNS record inside Cloudflare\n2. Update the localhost server to use the wildcard domain setting\n3. Add a Coolify's Source\n4. Deploy a resource and configure our application to use Pull Request Previews\n5. Test Pull Request Previews by creating a Pull Request on GitHub\n\n## Update DNS for Wildcard Subdomains\n\nI’m using Cloudflare but whatever you’re using should likely be the same. All you need to do is go to your DNS Records dashboard and enter the details below.\n\nIn Cloudflare, navigate to the DNS Records dashboard.\n\n![navigating to cloudflare's dns records dashboard](./_images/self-hosting/cloudflare-dns-management.png)\n\nWe’ll create a new record by clicking on the add new record button.\n\nA form should pop up, and we’ll enter an \"**A**\" record, with a hostname of \"**\\***\" and the value of the IP address. I'm using `192.0.2.1`, but you'll replace it with your remote server IP where your Coolify instance is running.\n\n![adding an A record for subdomain wildcards](./_images/pull-request-previews/cloudflare-dns-wildcard.png)\n\nThe \"**\\***\" represents a catch-all for any subdomain so when we make Pull Requests on GitHub, Coolify will automatically create a Preview Deploy that looks like `\u003Csubdomain_pr_id>.\u003Cyour_domain>`. You can then click on that URL and be taken to a live instance of your Preview Deploy.\n\nClick save and close Cloudflare since we won't be accessing them from here.\n\n## Allow Coolify to create wildcard domains\n\nNavigate to your Coolify instance and head over to the server that will handle the wildcard domains. In my case, it is the \"localhost\" server that Coolify lives on.\n\n![navigating to the server we want to use wildcard domains](./_images/pull-request-previews/coolify-wildcard-server.png)\n\nYou should see a \"Wildcard Domain\" field. Let's update that to use our custom domain URL. I'm using \"https://billyle.dev\". Be sure to include the HTTPS protocol.\n\nSome things you need to be sure of are that the wildcard DNS record in your DNS provider is pointing to the server IP where the Coolify instance lives and that the wildcard domain you're entering is being served by Coolify.\n\n![entering wildcard domain url](./_images/pull-request-previews/coolify-wildcard-domain.png)\n\nClick save, and a confirmation prompt will display. Click continue.\n\n![entering wildcard domain url](./_images/pull-request-previews/coolify-wildcard-confirmation.png)\n\n## Creating a Source\n\nNext up is creating a \"Source\". Coolify will create a private GitHub App for you. After creating the GitHub App, Coolify will automatically grab all the details from the GitHub App (App Id, Installation Id, Client Id, Client Secret, and Webhook Secret) and store it as a Source. This GitHub App later will ask your GitHub account to permit it to watch for Pull Requests and commits to the main branch.\n\nHead over to the Sources page, so we can create one.\n\n![navigation to the sources page](./_images/pull-request-previews/coolify-menu-sources.png)\n\nClick on \"+ Add\" and you'll be taken to a different screen, and you'll enter some details about the GitHub you're about to create.\n\n![navigation to the sources page](./_images/pull-request-previews/coolify-add-source.png)\n\nWe're only going to change the name of the GitHub App to something more recognizable. I'm using \"billylecoolify\". Click continue.\n\n![navigation to the sources page](./_images/pull-request-previews/coolify-github-app-name.png)\n\nThe next screen is where Coolify needs to register the GitHub App. Before we do that, we're going to change the \"Webhook Endpoint\" so we don't expose our remote server IP to the world. I'm using the domain where my Coolify instance lives.\n\nWe also want to turn on \"Preview Deployments\" for this Source so be sure to toggle that on.\n\n![navigation to the sources page](./_images/pull-request-previews/coolify-github-app-register.png)\n\nAfter completing the steps above, click on \"Register Now\".\n\nYou should be taken to a GitHub page in the browser where it will ask you to log in. I have 2FA set up so this screen may be different for you. Just enter your details, and you should be good to go.\n\n![entering github authentication details](./_images/pull-request-previews/github-authentication.png)\n\nAfter you log in, you will see the GitHub App you're about to create. The name should match the GitHub App name given in the Coolify instance.\n\n![entering github app name](./_images/pull-request-previews/github-app-name.png)\n\nClick on \"Create GitHub App\" and you'll be redirected back to Coolify.\n\nYou should see a screen now with a button that says \"Install Repositories on GitHub\". We want to connect our GitHub App to our GitHub account so let's click on that.\n\n![screen that shows the GitHub app with an install repositories button](./_images/pull-request-previews/coolify-install-repositories.png)\n\nThis next step will grant the GitHub App that you created (mine was named \"billylecoolify\") to have access to your GitHub repositories. You can select specific repositories or all repositories. I think keeping it on \"All repositories\" makes it easier, so you don't need to manually keep adding repositories later.\n\n![installing the github app](./_images/pull-request-previews/github-app-install.png)\n\nNotice all the permissions the GitHub App is requesting.\n\n- **Read** access to administration, code, and metadata\n- **Read** and **write** access to pull requests\n\nThe write access here is for Coolify to create comments on your Pull Requests which I will show you later. Click on \"Install\" and it will redirect you back to Coolify.\n\nThe Coolify GitHub App Source was auto populated and has all the necessary information for it to trigger builds on your behalf.\n\n![github app auto-populated](./_images/pull-request-previews/coolify-github-app-populated.png)\n\nWe're going to create a new project in the next section and test the Pull Request Preview Deployment feature.\n\n## Add a new Project with our new Source\n\nHead over to the Projects page in the navigation menu and create a new Project.\n\n![navigation menu for projects](./_images/pull-request-previews/coolify-navigate-to-projects.png)\n\nGive it whatever name you like. I'm going to name mine \"my-cool-project\" and click save.\n\n![naming your project](./_images/pull-request-previews/coolify-project-name.png)\n\nSelect an environment on the next page. I only have one environment, \"production\".\n\n![select environment for your project](./_images/pull-request-previews/coolify-project-environment.png)\n\nAnd then we'll add a new Resource for our project.\n\n![add new resource for your project](./_images/pull-request-previews/coolify-add-resource.png)\n\nYou'll see a page with many resources. Since we created a GitHub App, we're going to choose the \"Private Repository (with GitHub App)\" option.\n\n![selecting a new resource page](./_images/pull-request-previews/coolify-select-resource.png)\n\nThe next screens will ask you where to store your resources. Select \"localhost\" for your Server and \"docker-standalone\" for the Destination.\n\n![selecting a resource server](./_images/self-hosting/coolify-resource-add-server.png)\n\n![selecting a resource destination](./_images/self-hosting/coolify-resource-destination.png)\n\nNow it will ask you which GitHub App you want to use. We're going to select the one we created.\n\n![selecting a resource github app](./_images/pull-request-previews/coolify-select-github-app.png)\n\nWe can see all our repositories and choose the one we want to deploy! How awesome is that? I'm going to select an old project that runs on a node server for this tutorial.\n\nFrom the dropdown list, select the project you want to deploy.\n\n![selecting a github repository](./_images/pull-request-previews/coolify-select-repository.png)\n\nOnce you select your repository, click on \"Load Repository\".\n\nCoolify will try its best to gather information about your project like the main branch we want to deploy, the build pack, and the port.\n\nI had to adjust the Branch to \"master\" because the dropdown list is ordered alphabetically. If your site is static, be sure to toggle that on. You can change all of this on the configuration page if you mess up. Click \"Continue\".\n\n![configure github repository](./_images/pull-request-previews/coolify-load-repository.png)\n\nThis next section should be familiar if you followed my other tutorial when I set up self-hosting for this website.\n\n## Configuring for Preview Deployments\n\nNotice how in the \"Domains\" field, we see the Coolify wildcard domain being auto-generated with the domain we gave it earlier in the [\"localhost\" server configuration](#allow-coolify-to-create-wildcard-domains).\n\n![arrow showing the subdomain feature](./_images/pull-request-previews/coolify-autogen-subdomain.png)\n\nChange the subdomain portion to whatever name you like. I used the name \"conversus\". Click \"Save\" next to the General heading.\n\n![renaming subdomain](./_images/pull-request-previews/coolify-name-subdomain.png)\n\nNow click on the \"Advanced\" menu item where we will turn on Preview Deployments for this application.\n\n![navigation to the advanced settings page](./_images/pull-request-previews/coolify-navigate-to-app-advanced-settings.png)\n\nToggle on \"Preview Deployments\".\n\nThese next steps can be ignored if you don't want to set resource limits for your application. In my case, since this application is a demo, I don't want it to hog resources in case there are a lot of requests coming from it. Click on \"Resource Limits\" if you want this feature.\n\n![navigation to the advanced settings page](./_images/pull-request-previews/coolify-turn-on-preview-deployments.png)\n\n## Limit resources for your app (optional)\n\nUnder the \"Resource Limits\" menu, we will find several fields we can set to limit resources for the application. You can follow the link when you hover the asterisk in the field label to get more information.\n\nHere I'm adjusting the \"Number of CPUs\", \"CPU sets to use\", and \"Maximum Memory Limit\". Click save to apply the changes.\n\n![setting resource limits](./_images/pull-request-previews/coolify-resource-limits.png)\n\n## Launching Preview Deployments\n\nOkay, so we're ready to deploy our application. Let's give it a try and see if it builds. Click on the \"Deploy\" button on the top right in the previous picture.\n\nYou will be taken to the build logs and see real-time output from your build.\n\n![viewing build progress logs](./_images/pull-request-previews/coolify-build-progress.png)\n\nOnce it's complete, you should see that the Deployment status is changed from \"In Progress\" to \"Finished\". Also, you will see a green \"Running (healthy)\" at the top. You can view your application by following the \"Open Application Menu\" and click the link.\n\n![build finished and navigating to the build link](./_images/pull-request-previews/coolify-build-finished.png)\n\nIf it doesn't work because of SSL, give it a few minutes and refresh the page.\n\nThis is how my app looks when everything goes well.\n\n![deployed app with ui bugs](./_images/pull-request-previews/app-before-pr-preview.png)\n\nNotice the URL is now `conversus.billyle.dev`. We deployed an app on the `conversus` subdomain on our shared domain of `billyle.dev`. This shows you the power of Coolify being able to host multiple apps under one domain.\n\nI have a UI bug where the list of active rooms is collapsed, and I want to set a minimum height. This is a good opportunity to show you the Preview Deployment feature.\n\nI created a fix for this repository and pushed it onto GitHub. When we create a Pull Request to the `master` branch, the GitHub App \"billylecoolify\" we created earlier will trigger a build. It will even leave a comment in your PR to show you how you can view the Preview Deployment or check the build log.\n\n![github app leaving a pr comment](./_images/pull-request-previews/github-app-pr-comment.png)\n\nTalk about awesomeness! It's integrated in our GitHub Workflow now.\n\nLet's navigate to the Deployment build list.\n\n![a list of all deployment builds](./_images/pull-request-previews/coolify-deployment-list.png)\n\nYou see that the latest deployment shows that it was triggered by a \"Webhook\". We now know it's working. Let's click into our build and see how things are going.\n\nNot much has changed from before. The build should be completed and say that the deployment is \"Finished\".\n\nLet's check out what apps are available to view by clicking on the \"Open Applications\" menu.\n\nYou should see a new app called, `\u003Cpr_id>.\u003Csubdomain>.\u003Cyour_domain>`\n\n![a list available deployed apps](./_images/pull-request-previews/coolify-prefix-preview-deployment.png)\n\nThe PR ID is the Pull Request ID retrieved from GitHub. The subdomain is what we entered when we [configured the app](#configuring-the-application-for-preview-deployments).\n\nSo let's try opening the app now. Click on it and see what happens.\n\n![a ssl error no cypher overlap](./_images/pull-request-previews/ssl-err-no-cypher-overlap.png)\n\nOpening it on Firefox and wait... oh no! What error is this?! Seems like I have an SSL error. I'm not sure what's going on here, but I believe my DNS doesn't like using `sub.subdomain.domain` which might be causing the error. How do we fix this?\n\nLuckily, we can configure how our Preview Deployments are named. Let's do that now.\n\nBack on the Configuration page, you will see a \"Preview Deployments\" menu item. Let's click on that and bring up this page.\n\n![an arrow showing where to navigate to the preview deployments](./_images/pull-request-previews/coolify-navigate-to-preview-deployments.png)\n\nYou will see a field, \"Preview URL Template\", where the default value is: `{{pr_id}}.{{domain}}`. If you hover over the field label, you can find more template tags to use.\n\n![changing preview url template](./_images/pull-request-previews/coolify-preview-url-template.png)\n\nSo instead of having a dot separator, I'm going to use a dash.\nFrom this: `{{pr_id}}.{{domain}}`, to this: `{{pr_id}}-{{domain}}`\n\nBe sure to click \"Save\".\n\nNow that we have changed our configuration, we need to redeploy our Preview Deployment build so that we can see changes to the URL.\n\nOn the same page, there will be a list of open Pull Request Preview Deployments. Find the one that matches your PR ID and click on \"Redeploy\".\n\n![redeploying pr preview](./_images/pull-request-previews/coolify-preview-redeploy.png)\n\nTwo things will happen now. First, you have just triggered a new build so if you go to the Deployments tab, you will see a new build running that was manually triggered.\n\nSecond, is that the GitHub App will create a new comment on your PR to the new Preview Deployment and build log.\n\nLet's wait it out for the deployment to finish and see what available apps there are.\n\nGreat! We see the updated URL, `6-conversus.billyle.dev`, and I can view it without any issues.\n\n![corrected preview deployment url from dropdown list](./_images/pull-request-previews/coolify-postfix-preview-deployment.png)\n\nThis is so cool. I can see the changes are working from the PR! If it doesn't work for you because the browser is complaining about SSL, just give it a few minutes and refresh the page again.\n\n![preview deployment with visible changes](./_images/pull-request-previews/app-preview-fix.png)\n\n## Cleanup and Merge Pull Request\n\nOkay, everything looks well on my end. I'm going to merge and close my Pull Request.\n\nWhat Coolify does in the background is trigger a new build for the updated `master` branch and remove the Preview Deployment builds from our application automatically because it's no longer needed.\n\nYou can verify this by going to the Deployment list and checking the dropdown lists of available apps.\n\n![deployment list of previous or ongoing builds](./_images/pull-request-previews/coolify-pr-merge-deployment.png)\n\nIf you do need the preview deployments to stay, I'm not sure how that's done yet, and it's better if you ask a question in the Discord channel.\n\nFinally, I can check my application and verify that the new code is working.\n\n![production app with merged changes](./_images/pull-request-previews/app-after-pr-preview.png)\n\n## What you learned\n\nWow, so many topics were covered in this tutorial! I hope you made it this far and got some value of out it.\n\nYou've learned how to use Coolify to create Preview Deployments for your Pull Requests.\n\nTo get to this point, there were several steps like setting up your DNS to accept subdomain wildcards. We then had to use that in our Coolify server as well and give it a wildcard domain so that it would auto-generate subdomains for us.\n\nThe next steps were to create a Source, in our case the GitHub App, and grant it permissions to our GitHub account. We started a new project and then added a resource that pulled in all of our repositories.\n\nOnce we selected a repository, we updated our subdomain name, preview URL template, and turned on Preview Deployments.\n\nThere were a few mini-steps in between, but that was the gist of it. I'm confident that you can do this on your own with your applications. And if you ever need help, you can reach out to me from one of my socials.\n\nGood luck and I hope you create awesome things. Until next time, have a good one!","src/content/posts/adding-github-pull-request-preview-deployments-with-coolify.md",[425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467],"./_images/self-hosting/cloudflare-dns-management.png","./_images/pull-request-previews/cloudflare-dns-wildcard.png","./_images/pull-request-previews/coolify-wildcard-server.png","./_images/pull-request-previews/coolify-wildcard-domain.png","./_images/pull-request-previews/coolify-wildcard-confirmation.png","./_images/pull-request-previews/coolify-menu-sources.png","./_images/pull-request-previews/coolify-add-source.png","./_images/pull-request-previews/coolify-github-app-name.png","./_images/pull-request-previews/coolify-github-app-register.png","./_images/pull-request-previews/github-authentication.png","./_images/pull-request-previews/github-app-name.png","./_images/pull-request-previews/coolify-install-repositories.png","./_images/pull-request-previews/github-app-install.png","./_images/pull-request-previews/coolify-github-app-populated.png","./_images/pull-request-previews/coolify-navigate-to-projects.png","./_images/pull-request-previews/coolify-project-name.png","./_images/pull-request-previews/coolify-project-environment.png","./_images/pull-request-previews/coolify-add-resource.png","./_images/pull-request-previews/coolify-select-resource.png","./_images/self-hosting/coolify-resource-add-server.png","./_images/self-hosting/coolify-resource-destination.png","./_images/pull-request-previews/coolify-select-github-app.png","./_images/pull-request-previews/coolify-select-repository.png","./_images/pull-request-previews/coolify-load-repository.png","./_images/pull-request-previews/coolify-autogen-subdomain.png","./_images/pull-request-previews/coolify-name-subdomain.png","./_images/pull-request-previews/coolify-navigate-to-app-advanced-settings.png","./_images/pull-request-previews/coolify-turn-on-preview-deployments.png","./_images/pull-request-previews/coolify-resource-limits.png","./_images/pull-request-previews/coolify-build-progress.png","./_images/pull-request-previews/coolify-build-finished.png","./_images/pull-request-previews/app-before-pr-preview.png","./_images/pull-request-previews/github-app-pr-comment.png","./_images/pull-request-previews/coolify-deployment-list.png","./_images/pull-request-previews/coolify-prefix-preview-deployment.png","./_images/pull-request-previews/ssl-err-no-cypher-overlap.png","./_images/pull-request-previews/coolify-navigate-to-preview-deployments.png","./_images/pull-request-previews/coolify-preview-url-template.png","./_images/pull-request-previews/coolify-preview-redeploy.png","./_images/pull-request-previews/coolify-postfix-preview-deployment.png","./_images/pull-request-previews/app-preview-fix.png","./_images/pull-request-previews/coolify-pr-merge-deployment.png","./_images/pull-request-previews/app-after-pr-preview.png","b6136ca30a5751a6",{"html":470,"metadata":471},"\u003Cp>One of the nice things about Netlify, Vercel, etc. is automatic commit deployments on your main branch. We can use the same manner in Coolify’s feature using “Private Repository with GitHub app”. Not only will we get the benefit of commit deployments, but we can also set it up for Pull Request preview deploys before we make a merge to the main branch.\u003C/p>\n\u003Cp>Let’s cover what we’re going to do:\u003C/p>\n\u003Col>\n\u003Cli>Create a subdomain wildcard DNS record inside Cloudflare\u003C/li>\n\u003Cli>Update the localhost server to use the wildcard domain setting\u003C/li>\n\u003Cli>Add a Coolify’s Source\u003C/li>\n\u003Cli>Deploy a resource and configure our application to use Pull Request Previews\u003C/li>\n\u003Cli>Test Pull Request Previews by creating a Pull Request on GitHub\u003C/li>\n\u003C/ol>\n\u003Csection>\u003Ch2 id=\"update-dns-for-wildcard-subdomains\">Update DNS for Wildcard Subdomains\u003C/h2>\u003Cp>I’m using Cloudflare but whatever you’re using should likely be the same. All you need to do is go to your DNS Records dashboard and enter the details below.\u003C/p>\u003Cp>In Cloudflare, navigate to the DNS Records dashboard.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-dns-management.png&#x22;,&#x22;alt&#x22;:&#x22;navigating to cloudflare&#x27;s dns records dashboard&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>We’ll create a new record by clicking on the add new record button.\u003C/p>\u003Cp>A form should pop up, and we’ll enter an “\u003Cstrong>A\u003C/strong>” record, with a hostname of ”\u003Cstrong>*\u003C/strong>” and the value of the IP address. I’m using \u003Ccode>192.0.2.1\u003C/code>, but you’ll replace it with your remote server IP where your Coolify instance is running.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/cloudflare-dns-wildcard.png&#x22;,&#x22;alt&#x22;:&#x22;adding an A record for subdomain wildcards&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The ”\u003Cstrong>*\u003C/strong>” represents a catch-all for any subdomain so when we make Pull Requests on GitHub, Coolify will automatically create a Preview Deploy that looks like \u003Ccode>&#x3C;subdomain_pr_id>.&#x3C;your_domain>\u003C/code>. You can then click on that URL and be taken to a live instance of your Preview Deploy.\u003C/p>\u003Cp>Click save and close Cloudflare since we won’t be accessing them from here.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"allow-coolify-to-create-wildcard-domains\">Allow Coolify to create wildcard domains\u003C/h2>\u003Cp>Navigate to your Coolify instance and head over to the server that will handle the wildcard domains. In my case, it is the “localhost” server that Coolify lives on.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-wildcard-server.png&#x22;,&#x22;alt&#x22;:&#x22;navigating to the server we want to use wildcard domains&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You should see a “Wildcard Domain” field. Let’s update that to use our custom domain URL. I’m using “\u003Ca href=\"https://billyle.dev\">https://billyle.dev\u003C/a>”. Be sure to include the HTTPS protocol.\u003C/p>\u003Cp>Some things you need to be sure of are that the wildcard DNS record in your DNS provider is pointing to the server IP where the Coolify instance lives and that the wildcard domain you’re entering is being served by Coolify.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-wildcard-domain.png&#x22;,&#x22;alt&#x22;:&#x22;entering wildcard domain url&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click save, and a confirmation prompt will display. Click continue.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-wildcard-confirmation.png&#x22;,&#x22;alt&#x22;:&#x22;entering wildcard domain url&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"creating-a-source\">Creating a Source\u003C/h2>\u003Cp>Next up is creating a “Source”. Coolify will create a private GitHub App for you. After creating the GitHub App, Coolify will automatically grab all the details from the GitHub App (App Id, Installation Id, Client Id, Client Secret, and Webhook Secret) and store it as a Source. This GitHub App later will ask your GitHub account to permit it to watch for Pull Requests and commits to the main branch.\u003C/p>\u003Cp>Head over to the Sources page, so we can create one.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-menu-sources.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the sources page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click on ”+ Add” and you’ll be taken to a different screen, and you’ll enter some details about the GitHub you’re about to create.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-add-source.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the sources page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>We’re only going to change the name of the GitHub App to something more recognizable. I’m using “billylecoolify”. Click continue.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-github-app-name.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the sources page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The next screen is where Coolify needs to register the GitHub App. Before we do that, we’re going to change the “Webhook Endpoint” so we don’t expose our remote server IP to the world. I’m using the domain where my Coolify instance lives.\u003C/p>\u003Cp>We also want to turn on “Preview Deployments” for this Source so be sure to toggle that on.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-github-app-register.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the sources page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>After completing the steps above, click on “Register Now”.\u003C/p>\u003Cp>You should be taken to a GitHub page in the browser where it will ask you to log in. I have 2FA set up so this screen may be different for you. Just enter your details, and you should be good to go.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/github-authentication.png&#x22;,&#x22;alt&#x22;:&#x22;entering github authentication details&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>After you log in, you will see the GitHub App you’re about to create. The name should match the GitHub App name given in the Coolify instance.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/github-app-name.png&#x22;,&#x22;alt&#x22;:&#x22;entering github app name&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click on “Create GitHub App” and you’ll be redirected back to Coolify.\u003C/p>\u003Cp>You should see a screen now with a button that says “Install Repositories on GitHub”. We want to connect our GitHub App to our GitHub account so let’s click on that.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-install-repositories.png&#x22;,&#x22;alt&#x22;:&#x22;screen that shows the GitHub app with an install repositories button&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>This next step will grant the GitHub App that you created (mine was named “billylecoolify”) to have access to your GitHub repositories. You can select specific repositories or all repositories. I think keeping it on “All repositories” makes it easier, so you don’t need to manually keep adding repositories later.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/github-app-install.png&#x22;,&#x22;alt&#x22;:&#x22;installing the github app&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Notice all the permissions the GitHub App is requesting.\u003C/p>\u003Cul>\n\u003Cli>\u003Cstrong>Read\u003C/strong> access to administration, code, and metadata\u003C/li>\n\u003Cli>\u003Cstrong>Read\u003C/strong> and \u003Cstrong>write\u003C/strong> access to pull requests\u003C/li>\n\u003C/ul>\u003Cp>The write access here is for Coolify to create comments on your Pull Requests which I will show you later. Click on “Install” and it will redirect you back to Coolify.\u003C/p>\u003Cp>The Coolify GitHub App Source was auto populated and has all the necessary information for it to trigger builds on your behalf.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-github-app-populated.png&#x22;,&#x22;alt&#x22;:&#x22;github app auto-populated&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>We’re going to create a new project in the next section and test the Pull Request Preview Deployment feature.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"add-a-new-project-with-our-new-source\">Add a new Project with our new Source\u003C/h2>\u003Cp>Head over to the Projects page in the navigation menu and create a new Project.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-navigate-to-projects.png&#x22;,&#x22;alt&#x22;:&#x22;navigation menu for projects&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Give it whatever name you like. I’m going to name mine “my-cool-project” and click save.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-project-name.png&#x22;,&#x22;alt&#x22;:&#x22;naming your project&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Select an environment on the next page. I only have one environment, “production”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-project-environment.png&#x22;,&#x22;alt&#x22;:&#x22;select environment for your project&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>And then we’ll add a new Resource for our project.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-add-resource.png&#x22;,&#x22;alt&#x22;:&#x22;add new resource for your project&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You’ll see a page with many resources. Since we created a GitHub App, we’re going to choose the “Private Repository (with GitHub App)” option.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-select-resource.png&#x22;,&#x22;alt&#x22;:&#x22;selecting a new resource page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The next screens will ask you where to store your resources. Select “localhost” for your Server and “docker-standalone” for the Destination.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-add-server.png&#x22;,&#x22;alt&#x22;:&#x22;selecting a resource server&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-destination.png&#x22;,&#x22;alt&#x22;:&#x22;selecting a resource destination&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Now it will ask you which GitHub App you want to use. We’re going to select the one we created.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-select-github-app.png&#x22;,&#x22;alt&#x22;:&#x22;selecting a resource github app&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>We can see all our repositories and choose the one we want to deploy! How awesome is that? I’m going to select an old project that runs on a node server for this tutorial.\u003C/p>\u003Cp>From the dropdown list, select the project you want to deploy.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-select-repository.png&#x22;,&#x22;alt&#x22;:&#x22;selecting a github repository&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Once you select your repository, click on “Load Repository”.\u003C/p>\u003Cp>Coolify will try its best to gather information about your project like the main branch we want to deploy, the build pack, and the port.\u003C/p>\u003Cp>I had to adjust the Branch to “master” because the dropdown list is ordered alphabetically. If your site is static, be sure to toggle that on. You can change all of this on the configuration page if you mess up. Click “Continue”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-load-repository.png&#x22;,&#x22;alt&#x22;:&#x22;configure github repository&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>This next section should be familiar if you followed my other tutorial when I set up self-hosting for this website.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"configuring-for-preview-deployments\">Configuring for Preview Deployments\u003C/h2>\u003Cp>Notice how in the “Domains” field, we see the Coolify wildcard domain being auto-generated with the domain we gave it earlier in the \u003Ca href=\"#allow-coolify-to-create-wildcard-domains\">“localhost” server configuration\u003C/a>.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-autogen-subdomain.png&#x22;,&#x22;alt&#x22;:&#x22;arrow showing the subdomain feature&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Change the subdomain portion to whatever name you like. I used the name “conversus”. Click “Save” next to the General heading.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-name-subdomain.png&#x22;,&#x22;alt&#x22;:&#x22;renaming subdomain&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Now click on the “Advanced” menu item where we will turn on Preview Deployments for this application.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-navigate-to-app-advanced-settings.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the advanced settings page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Toggle on “Preview Deployments”.\u003C/p>\u003Cp>These next steps can be ignored if you don’t want to set resource limits for your application. In my case, since this application is a demo, I don’t want it to hog resources in case there are a lot of requests coming from it. Click on “Resource Limits” if you want this feature.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-turn-on-preview-deployments.png&#x22;,&#x22;alt&#x22;:&#x22;navigation to the advanced settings page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"limit-resources-for-your-app-optional\">Limit resources for your app (optional)\u003C/h2>\u003Cp>Under the “Resource Limits” menu, we will find several fields we can set to limit resources for the application. You can follow the link when you hover the asterisk in the field label to get more information.\u003C/p>\u003Cp>Here I’m adjusting the “Number of CPUs”, “CPU sets to use”, and “Maximum Memory Limit”. Click save to apply the changes.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-resource-limits.png&#x22;,&#x22;alt&#x22;:&#x22;setting resource limits&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"launching-preview-deployments\">Launching Preview Deployments\u003C/h2>\u003Cp>Okay, so we’re ready to deploy our application. Let’s give it a try and see if it builds. Click on the “Deploy” button on the top right in the previous picture.\u003C/p>\u003Cp>You will be taken to the build logs and see real-time output from your build.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-build-progress.png&#x22;,&#x22;alt&#x22;:&#x22;viewing build progress logs&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Once it’s complete, you should see that the Deployment status is changed from “In Progress” to “Finished”. Also, you will see a green “Running (healthy)” at the top. You can view your application by following the “Open Application Menu” and click the link.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-build-finished.png&#x22;,&#x22;alt&#x22;:&#x22;build finished and navigating to the build link&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If it doesn’t work because of SSL, give it a few minutes and refresh the page.\u003C/p>\u003Cp>This is how my app looks when everything goes well.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/app-before-pr-preview.png&#x22;,&#x22;alt&#x22;:&#x22;deployed app with ui bugs&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Notice the URL is now \u003Ccode>conversus.billyle.dev\u003C/code>. We deployed an app on the \u003Ccode>conversus\u003C/code> subdomain on our shared domain of \u003Ccode>billyle.dev\u003C/code>. This shows you the power of Coolify being able to host multiple apps under one domain.\u003C/p>\u003Cp>I have a UI bug where the list of active rooms is collapsed, and I want to set a minimum height. This is a good opportunity to show you the Preview Deployment feature.\u003C/p>\u003Cp>I created a fix for this repository and pushed it onto GitHub. When we create a Pull Request to the \u003Ccode>master\u003C/code> branch, the GitHub App “billylecoolify” we created earlier will trigger a build. It will even leave a comment in your PR to show you how you can view the Preview Deployment or check the build log.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/github-app-pr-comment.png&#x22;,&#x22;alt&#x22;:&#x22;github app leaving a pr comment&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Talk about awesomeness! It’s integrated in our GitHub Workflow now.\u003C/p>\u003Cp>Let’s navigate to the Deployment build list.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-deployment-list.png&#x22;,&#x22;alt&#x22;:&#x22;a list of all deployment builds&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You see that the latest deployment shows that it was triggered by a “Webhook”. We now know it’s working. Let’s click into our build and see how things are going.\u003C/p>\u003Cp>Not much has changed from before. The build should be completed and say that the deployment is “Finished”.\u003C/p>\u003Cp>Let’s check out what apps are available to view by clicking on the “Open Applications” menu.\u003C/p>\u003Cp>You should see a new app called, \u003Ccode>&#x3C;pr_id>.&#x3C;subdomain>.&#x3C;your_domain>\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-prefix-preview-deployment.png&#x22;,&#x22;alt&#x22;:&#x22;a list available deployed apps&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The PR ID is the Pull Request ID retrieved from GitHub. The subdomain is what we entered when we \u003Ca href=\"#configuring-the-application-for-preview-deployments\">configured the app\u003C/a>.\u003C/p>\u003Cp>So let’s try opening the app now. Click on it and see what happens.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/ssl-err-no-cypher-overlap.png&#x22;,&#x22;alt&#x22;:&#x22;a ssl error no cypher overlap&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Opening it on Firefox and wait… oh no! What error is this?! Seems like I have an SSL error. I’m not sure what’s going on here, but I believe my DNS doesn’t like using \u003Ccode>sub.subdomain.domain\u003C/code> which might be causing the error. How do we fix this?\u003C/p>\u003Cp>Luckily, we can configure how our Preview Deployments are named. Let’s do that now.\u003C/p>\u003Cp>Back on the Configuration page, you will see a “Preview Deployments” menu item. Let’s click on that and bring up this page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-navigate-to-preview-deployments.png&#x22;,&#x22;alt&#x22;:&#x22;an arrow showing where to navigate to the preview deployments&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You will see a field, “Preview URL Template”, where the default value is: \u003Ccode>{{pr_id}}.{{domain}}\u003C/code>. If you hover over the field label, you can find more template tags to use.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-preview-url-template.png&#x22;,&#x22;alt&#x22;:&#x22;changing preview url template&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>So instead of having a dot separator, I’m going to use a dash.\nFrom this: \u003Ccode>{{pr_id}}.{{domain}}\u003C/code>, to this: \u003Ccode>{{pr_id}}-{{domain}}\u003C/code>\u003C/p>\u003Cp>Be sure to click “Save”.\u003C/p>\u003Cp>Now that we have changed our configuration, we need to redeploy our Preview Deployment build so that we can see changes to the URL.\u003C/p>\u003Cp>On the same page, there will be a list of open Pull Request Preview Deployments. Find the one that matches your PR ID and click on “Redeploy”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-preview-redeploy.png&#x22;,&#x22;alt&#x22;:&#x22;redeploying pr preview&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Two things will happen now. First, you have just triggered a new build so if you go to the Deployments tab, you will see a new build running that was manually triggered.\u003C/p>\u003Cp>Second, is that the GitHub App will create a new comment on your PR to the new Preview Deployment and build log.\u003C/p>\u003Cp>Let’s wait it out for the deployment to finish and see what available apps there are.\u003C/p>\u003Cp>Great! We see the updated URL, \u003Ccode>6-conversus.billyle.dev\u003C/code>, and I can view it without any issues.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-postfix-preview-deployment.png&#x22;,&#x22;alt&#x22;:&#x22;corrected preview deployment url from dropdown list&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>This is so cool. I can see the changes are working from the PR! If it doesn’t work for you because the browser is complaining about SSL, just give it a few minutes and refresh the page again.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/app-preview-fix.png&#x22;,&#x22;alt&#x22;:&#x22;preview deployment with visible changes&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"cleanup-and-merge-pull-request\">Cleanup and Merge Pull Request\u003C/h2>\u003Cp>Okay, everything looks well on my end. I’m going to merge and close my Pull Request.\u003C/p>\u003Cp>What Coolify does in the background is trigger a new build for the updated \u003Ccode>master\u003C/code> branch and remove the Preview Deployment builds from our application automatically because it’s no longer needed.\u003C/p>\u003Cp>You can verify this by going to the Deployment list and checking the dropdown lists of available apps.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/coolify-pr-merge-deployment.png&#x22;,&#x22;alt&#x22;:&#x22;deployment list of previous or ongoing builds&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If you do need the preview deployments to stay, I’m not sure how that’s done yet, and it’s better if you ask a question in the Discord channel.\u003C/p>\u003Cp>Finally, I can check my application and verify that the new code is working.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/pull-request-previews/app-after-pr-preview.png&#x22;,&#x22;alt&#x22;:&#x22;production app with merged changes&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"what-you-learned\">What you learned\u003C/h2>\u003Cp>Wow, so many topics were covered in this tutorial! I hope you made it this far and got some value of out it.\u003C/p>\u003Cp>You’ve learned how to use Coolify to create Preview Deployments for your Pull Requests.\u003C/p>\u003Cp>To get to this point, there were several steps like setting up your DNS to accept subdomain wildcards. We then had to use that in our Coolify server as well and give it a wildcard domain so that it would auto-generate subdomains for us.\u003C/p>\u003Cp>The next steps were to create a Source, in our case the GitHub App, and grant it permissions to our GitHub account. We started a new project and then added a resource that pulled in all of our repositories.\u003C/p>\u003Cp>Once we selected a repository, we updated our subdomain name, preview URL template, and turned on Preview Deployments.\u003C/p>\u003Cp>There were a few mini-steps in between, but that was the gist of it. I’m confident that you can do this on your own with your applications. And if you ever need help, you can reach out to me from one of my socials.\u003C/p>\u003Cp>Good luck and I hope you create awesome things. Until next time, have a good one!\u003C/p>\u003C/section>",{"headings":472,"imagePaths":500,"frontmatter":408},[473,476,479,482,485,488,491,494,497],{"depth":230,"slug":474,"text":475},"update-dns-for-wildcard-subdomains","Update DNS for Wildcard Subdomains",{"depth":230,"slug":477,"text":478},"allow-coolify-to-create-wildcard-domains","Allow Coolify to create wildcard domains",{"depth":230,"slug":480,"text":481},"creating-a-source","Creating a Source",{"depth":230,"slug":483,"text":484},"add-a-new-project-with-our-new-source","Add a new Project with our new Source",{"depth":230,"slug":486,"text":487},"configuring-for-preview-deployments","Configuring for Preview Deployments",{"depth":230,"slug":489,"text":490},"limit-resources-for-your-app-optional","Limit resources for your app (optional)",{"depth":230,"slug":492,"text":493},"launching-preview-deployments","Launching Preview Deployments",{"depth":230,"slug":495,"text":496},"cleanup-and-merge-pull-request","Cleanup and Merge Pull Request",{"depth":230,"slug":498,"text":499},"what-you-learned","What you learned",[425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467],"adding-github-pull-request-preview-deployments-with-coolify.md","common-errors-for-new-flutter-developers-tips-and-fixes",{"id":502,"data":504,"body":516,"filePath":517,"assetImports":518,"digest":521,"rendered":522,"legacyId":569},{"title":505,"pubDate":506,"description":507,"author":508,"image":509,"tags":512,"draft":211,"readingTime":514,"lastDateModified":515},"Common Errors for New Flutter Developers: Tips and Fixes",["Date","2024-05-16T00:00:00.000Z"],"As a new Flutter developer, I came across these errors that often left me scratching my head and frustrated. I compiled a list of common errors and fixes for them for me to reference back to. I will continue to update this list as I encounter more issues.",{"name":203,"email":204},{"url":510,"alt":511,"className":208},"https://images.unsplash.com/photo-1579559954825-f491c472a6f8","a peacock with their tail fanned out",[149,380,513,379],"android","9 min read","2024-05-24T16:38:51+08:00","I started learning Flutter this year to expand into different areas of development.\n\nBecause I'm new, I don't know my way around the ecosystem yet. Some minor setbacks are not unusual whenever I'm coming to a new technology or programming language.\n\nFlutter can be frustrating in the beginning, but once you're around the bend, it becomes easier to work with.\n\nI'm here to share with you some common errors that kept popping up and how I was able to fix them.\n\nI plan on keeping this list updated as I learn.\n\n## Installation problems and fixes\n\nI found that installing manually by downloading a zip file gave me fewer errors than doing the installation via VSCode.\n\nI don't remember all the details but somehow the PATH didn't register correctly. Whenever I ran, `dart run build_runner build -d`, to generate code, I received errors and I couldn't figure it out even though `flutter doctor -v` gave me all green check marks.\n\nSomewhere along the way, the `dart` executable wasn't in my path and unsure where it exists.\n\nSo if you're starting your journey with Flutter, I suggest installing by downloading the zip file and carefully following the instructions.\n\n## Clean and repair cache\n\nWhen I find that something goes wrong with Flutter, this is usually my first approach. I run these commands in order before I start researching for a solution.\n\nUsually, it's a hit or miss but it gives me peace-of-mind that Flutter might not be the culprit and it could be something else like Xcode or a misconfigured setting.\n\nIf you don't have a build_runner, you can skip steps 3 & 4.\n\n1. `flutter clean`\n2. `flutter pub cache repair`\n3. `dart run build_runner clean`\n4. `dart run build_runner build -d`\n5. `flutter pub get`\n6. `flutter doctor`\n\n## Cocoapods errors\n\nCocoapods is a dependency manager used by Xcode and it's a requirement if you plan to build any apps for Apple.\n\nThis section is dedicated to some issues I ran into when working with Flutter.\n\n### Cocoapods not installed error\n\nThis one was quite frustrating and recurring.\n\n```\nLaunching lib/main.dart on iPhone 15 Pro Max in debug mode...\n\nWarning: CocoaPods not installed. Skipping pod install.\n\nCocoaPods is used to retrieve the iOS and macOS platform side's plugin code that responds to your plugin usage on the Dart side.\n\nWithout CocoaPods, plugins will not work on iOS or macOS.\n\nFor more info, see https://flutter.dev/platform-plugins\n\nTo install see https://guides.cocoapods.org/using/getting-started.html#installation for instructions.\n\nCocoaPods not installed or not in valid state.\n\nError launching application on iPhone 15 Pro Max.\n\nExited (1).\n```\n\nYou can check if Cocoapods is installed by running `gem list | grep cocoapods`.\n\n```\ncocoapods (1.15.2)\ncocoapods-core (1.15.2)\ncocoapods-deintegrate (1.0.5)\ncocoapods-downloader (2.1)\ncocoapods-plugins (1.0.0)\ncocoapods-search (1.0.1)\ncocoapods-trunk (1.6.0)\ncocoapods-try (1.2.0)\n```\n\nIf you see Cocoapods listed there then the issue is not with the installation.\n\nHere are some possible fixes:\n\n1. Restart VSCode. You need to completely close all VSCode instances before opening the text editor again.\n2. Reinstall Cocoapods:\n\n   - run `sudo gem uninstall cocoapods`. Select all versions.\n   - after uninstall is complete, run `sudo gem install -n /usr/local/bin cocoapods`\n\n3. If using a Ruby Version Manager like `rbenv`:\n\n   - list all available Ruby version `rbenv install -l`\n   - install the latest Ruby version: `rbenv install 3.3.0`\n   - set global to 3.3.0 with `rbenv global 3.3.0`\n   - make sure the `.rbenv/bin` and `.rbenv/shims` are available to your PATH\n   - run `gem install bundler`\n   - perform option 2 again\n\n### Cocoapods base configuration\n\n```\n[!] CocoaPods did not set the base configuration of your project because your project already has a custom config set. In order for CocoaPods integration to work at all, please either set the base configurations of the target `Runner` to `Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig` or include the `Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig` in your build configuration (`Flutter/Release.xcconfig`).\n```\n\nTo fix this issue, you'll need to modify two files where you'll remove the `?` from `#include?` statement.\n\n1. In `ios/Flutter/Debug.xcconfig`:\n\n```\n#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig\"\n#include \"Generated.xcconfig\"\n```\n\n2. In `ios/Flutter/Release.xcconfig`:\n\nYou're going to add an extra `#include` here for the `profile.xcconfig`\n\n```\n#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig\"\n#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig\"\n#include \"Generated.xcconfig\"\n```\n\n## Target versions not supported\n\nYou might run into this issue when the version of your target platform isn't supported by a 3rd-party library that you've installed.\n\nHere are some examples of what that might look like:\n\n```\nuses-sdk:minSdkVersion 16 cannot be smaller than version 23 declared in library [:audioplayers]\n```\n\nor\n\n```\nwarning: The iOS Simulator deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 11.0, but the range of supported deployment target versions is 16.0 to 17.0. (in target 'firebase_core' from project 'Pods')\n```\n\nWhat you need to do is modify your targets for each platform you're deploying to. In my case, for Android and iOS, I edited these two files to set the `minSdkVersion` and the `platform :ios`.\n\nIn `android/local.properties` file, add the `flutter.minSdkVersion` on a new line and set it to the version you need.\n\n```\nflutter.minSdkVersion=21\n```\n\nFor iOS, go to `ios/Podfile` file and uncomment where it says, `platform :ios, '\u003Cversion>'` and specify the version.\n\n```\n# Uncomment this line to define a global platform for your project\nplatform :ios, '16.0'\n```\n\nIf you're deploying to other platforms, say Windows or macOS, you will need to search the internet on how to update those values.\n\n## Use --verbose for pod commands\n\nWhen using pod commands, sometimes the process is running but nothing is showing up in your terminal.\n\nTo get some sort of feedback that the process didn't hang, use the `--verbose` flag.\n\nFor example, while in the `/ios` folder, you can run to update your Podfile.lock:\n\n```bash\npod update --verbose\n```\n\n## Kotlin requires a newer version\n\nYou might see this error when you're required to use a newer version of Kotlin in your project:\n\n```\nBUILD FAILED in 8s\n[!] Your project requires a newer version of the Kotlin Gradle plugin.\n    Find the latest version on https://kotlinlang.org/docs/gradle.html#plugin-and-versions, then update project/android/build.gradle:\n    ext.kotlin_version = '\u003Clatest-version>'\nException: Gradle task assembleDebug failed with exit code 1\n```\n\nTo find out where you can update your `kotlin_version`, you'll have to go to `/android/settings.gradle` in your project.\n\nFind the `plugins` config and update the `org.jetbrains.kotlin.android` field with a higher version that's listed in the error message above.\n\n```\nplugins {\n    id \"dev.flutter.flutter-plugin-loader\" version \"1.0.0\"\n    id \"com.android.application\" version \"7.3.0\" apply false\n    id \"org.jetbrains.kotlin.android\" version \"2.0.0\" apply false\n}\n```\n\n## Launch the simulator from VS Code\n\nThis one was a bit tricky. When developing for Flutter in VSCode, you'll be using the debugger tool. When you start the debugging tool to launch your Flutter app, the device will often change.\n\nSometimes it will launch on my physical iPhone. Sometimes it will launch for my macOS. Neither of which I want since I only want to run an iOS simulator.\n\nMy approach to this is to use the `Flutter: Launch Emulator` from the Command Palette to launch the simulator separately, and then run the debug tool.\n\nTo do this, open the Command Palette by using the shortcut, (\u003Ckbd>⌘\u003C/kbd> + \u003Ckbd>Shift\u003C/kbd> + \u003Ckbd>P\u003C/kbd>).\n\nBegin typing Flutter and you'll see a list of options you can choose from. When you select `Flutter: Launch Emulator`, it will show you all the available simulators that you've installed on your machine.\n\nSelect one and it should open.\n\nIf not, then you may have these next set of issues.\n\n## Unable to boot the simulator\n\nThis pops up for whatever reason. Maybe I tried to do something with Xcode and broke my simulator.\n\nBut no matter what I did, restarting VSCode, uninstalling/reinstalling the simulator, nothing would work.\n\nThat is until I found a solution by deleting the Xcode caches.\n\nYou need to go to your \"System Settings > General > Storage > Developer\" and click on the \"i\" icon button. You should see the following page.\n\n![Locating Xcode Caches](./_images/common-errors-flutter/xcode-cache-delete.png)\n\nSelect \"Xcode Caches\", click \"Delete...\" and continue with the prompt.\n\nFrom there you should be able to boot your simulator again.\n\nBut you might encounter another error when the simulator has booted.\n\n## Springboard quit unexpectedly\n\nAnother popup that might show up that something went wrong. This time it has something to do with Springboard.\n\nMaybe this issue stemmed from deleting the Xcode cache but I would never know.\n\n![Springboard quit unexpectedly modal](./_images/common-errors-flutter/xcode-springboard.png)\n\nA quick internet search tells me that Springboard is the application that manages the home screen for iOS devices.\n\nNot liking the sound of that, I searched for a fix and the only thing that worked for me was to delete Xcode entirely and install it fresh.\n\nIt was a hassle but it worked and was something I could do easily since every conversation about the error was way above my technical knowledge.\n\n## Rename App ID / Bundle ID\n\nEvery app deployed to a platform has a unique App ID. In iOS terms, it's called the Bundle ID. These unique names are usually reversed in the manner of a domain name.\n\nThese App IDs must be unique because this is how the platform identifies your app in their App Store. Whether that be the App Store, Google Play Store, etc. you'll need to keep them unique and that's why reversed domain names are standard practice.\n\nFor example, `billyle.dev` becomes `dev.billyle` as my App ID.\n\nWhen you create a new Flutter project either by the command line or by VSCode, it will default the name of your App ID to be `com.example.\u003CYOUR_PROJECT_NAME>`.\n\nI don't like seeing the \"example\" in there and it's not a real representation of what I'm creating.\n\nInstead, when starting a new Flutter project use this command and replace `com.yourdomain` and `app_name` to your liking.\n\n```zsh\nflutter create --org com.yourdomain app_name\n```\n\nThis will then create the App ID for you with `com.yourdomain.app_name`.\n\nA thing I am starting to do is replace `app_name` with specific platform names like `ios` and `android` to keep things organized but you don't need to do this.\n\nIf you find that you're knee-deep in an existing project but your App ID still contains the `com.example` name, you can use this [rename-cli](https://pub.dev/packages/rename) to rename your App ID.\n\nThe instructions are straightforward to use.\n\n## Additional resources\n\n- [Flutter tips and tricks](https://github.com/vandadnp/flutter-tips-and-tricks) from Vandad.\n\n## Keeping this updated\n\nThere you have it. This is my current list of common errors and tips when developing in Flutter.\n\nI hope it helps you on your journey to becoming a Flutter Developer.\n\nI plan to keep this list updated every once in a while when I encounter a new issue so check back every few months.\n\nWith that, thanks for reading and I hope you have a good one.","src/content/posts/common-errors-for-new-flutter-developers-tips-and-fixes.md",[519,520],"./_images/common-errors-flutter/xcode-cache-delete.png","./_images/common-errors-flutter/xcode-springboard.png","7d76df1767cedaac",{"html":523,"metadata":524},"\u003Cp>I started learning Flutter this year to expand into different areas of development.\u003C/p>\n\u003Cp>Because I’m new, I don’t know my way around the ecosystem yet. Some minor setbacks are not unusual whenever I’m coming to a new technology or programming language.\u003C/p>\n\u003Cp>Flutter can be frustrating in the beginning, but once you’re around the bend, it becomes easier to work with.\u003C/p>\n\u003Cp>I’m here to share with you some common errors that kept popping up and how I was able to fix them.\u003C/p>\n\u003Cp>I plan on keeping this list updated as I learn.\u003C/p>\n\u003Csection>\u003Ch2 id=\"installation-problems-and-fixes\">Installation problems and fixes\u003C/h2>\u003Cp>I found that installing manually by downloading a zip file gave me fewer errors than doing the installation via VSCode.\u003C/p>\u003Cp>I don’t remember all the details but somehow the PATH didn’t register correctly. Whenever I ran, \u003Ccode>dart run build_runner build -d\u003C/code>, to generate code, I received errors and I couldn’t figure it out even though \u003Ccode>flutter doctor -v\u003C/code> gave me all green check marks.\u003C/p>\u003Cp>Somewhere along the way, the \u003Ccode>dart\u003C/code> executable wasn’t in my path and unsure where it exists.\u003C/p>\u003Cp>So if you’re starting your journey with Flutter, I suggest installing by downloading the zip file and carefully following the instructions.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"clean-and-repair-cache\">Clean and repair cache\u003C/h2>\u003Cp>When I find that something goes wrong with Flutter, this is usually my first approach. I run these commands in order before I start researching for a solution.\u003C/p>\u003Cp>Usually, it’s a hit or miss but it gives me peace-of-mind that Flutter might not be the culprit and it could be something else like Xcode or a misconfigured setting.\u003C/p>\u003Cp>If you don’t have a build_runner, you can skip steps 3 &#x26; 4.\u003C/p>\u003Col>\n\u003Cli>\u003Ccode>flutter clean\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>flutter pub cache repair\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>dart run build_runner clean\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>dart run build_runner build -d\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>flutter pub get\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>flutter doctor\u003C/code>\u003C/li>\n\u003C/ol>\u003C/section>\n\u003Csection>\u003Ch2 id=\"cocoapods-errors\">Cocoapods errors\u003C/h2>\u003Cp>Cocoapods is a dependency manager used by Xcode and it’s a requirement if you plan to build any apps for Apple.\u003C/p>\u003Cp>This section is dedicated to some issues I ran into when working with Flutter.\u003C/p>\u003Csection>\u003Ch3 id=\"cocoapods-not-installed-error\">Cocoapods not installed error\u003C/h3>\u003Cp>This one was quite frustrating and recurring.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Launching lib/main.dart on iPhone 15 Pro Max in debug mode...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Warning: CocoaPods not installed. Skipping pod install.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>CocoaPods is used to retrieve the iOS and macOS platform side's plugin code that responds to your plugin usage on the Dart side.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Without CocoaPods, plugins will not work on iOS or macOS.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>For more info, see https://flutter.dev/platform-plugins\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>To install see https://guides.cocoapods.org/using/getting-started.html#installation for instructions.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>CocoaPods not installed or not in valid state.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Error launching application on iPhone 15 Pro Max.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Exited (1).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You can check if Cocoapods is installed by running \u003Ccode>gem list | grep cocoapods\u003C/code>.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>cocoapods (1.15.2)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-core (1.15.2)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-deintegrate (1.0.5)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-downloader (2.1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-plugins (1.0.0)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-search (1.0.1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-trunk (1.6.0)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cocoapods-try (1.2.0)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>If you see Cocoapods listed there then the issue is not with the installation.\u003C/p>\u003Cp>Here are some possible fixes:\u003C/p>\u003Col>\n\u003Cli>\n\u003Cp>Restart VSCode. You need to completely close all VSCode instances before opening the text editor again.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Reinstall Cocoapods:\u003C/p>\n\u003Cul>\n\u003Cli>run \u003Ccode>sudo gem uninstall cocoapods\u003C/code>. Select all versions.\u003C/li>\n\u003Cli>after uninstall is complete, run \u003Ccode>sudo gem install -n /usr/local/bin cocoapods\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>If using a Ruby Version Manager like \u003Ccode>rbenv\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>list all available Ruby version \u003Ccode>rbenv install -l\u003C/code>\u003C/li>\n\u003Cli>install the latest Ruby version: \u003Ccode>rbenv install 3.3.0\u003C/code>\u003C/li>\n\u003Cli>set global to 3.3.0 with \u003Ccode>rbenv global 3.3.0\u003C/code>\u003C/li>\n\u003Cli>make sure the \u003Ccode>.rbenv/bin\u003C/code> and \u003Ccode>.rbenv/shims\u003C/code> are available to your PATH\u003C/li>\n\u003Cli>run \u003Ccode>gem install bundler\u003C/code>\u003C/li>\n\u003Cli>perform option 2 again\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\u003C/section>\u003Csection>\u003Ch3 id=\"cocoapods-base-configuration\">Cocoapods base configuration\u003C/h3>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[!] CocoaPods did not set the base configuration of your project because your project already has a custom config set. In order for CocoaPods integration to work at all, please either set the base configurations of the target `Runner` to `Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig` or include the `Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig` in your build configuration (`Flutter/Release.xcconfig`).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>To fix this issue, you’ll need to modify two files where you’ll remove the \u003Ccode>?\u003C/code> from \u003Ccode>#include?\u003C/code> statement.\u003C/p>\u003Col>\n\u003Cli>In \u003Ccode>ios/Flutter/Debug.xcconfig\u003C/code>:\u003C/li>\n\u003C/ol>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>#include \"Generated.xcconfig\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Col start=\"2\">\n\u003Cli>In \u003Ccode>ios/Flutter/Release.xcconfig\u003C/code>:\u003C/li>\n\u003C/ol>\u003Cp>You’re going to add an extra \u003Ccode>#include\u003C/code> here for the \u003Ccode>profile.xcconfig\u003C/code>\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>#include \"Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>#include \"Generated.xcconfig\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"target-versions-not-supported\">Target versions not supported\u003C/h2>\u003Cp>You might run into this issue when the version of your target platform isn’t supported by a 3rd-party library that you’ve installed.\u003C/p>\u003Cp>Here are some examples of what that might look like:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>uses-sdk:minSdkVersion 16 cannot be smaller than version 23 declared in library [:audioplayers]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>or\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>warning: The iOS Simulator deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 11.0, but the range of supported deployment target versions is 16.0 to 17.0. (in target 'firebase_core' from project 'Pods')\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>What you need to do is modify your targets for each platform you’re deploying to. In my case, for Android and iOS, I edited these two files to set the \u003Ccode>minSdkVersion\u003C/code> and the \u003Ccode>platform :ios\u003C/code>.\u003C/p>\u003Cp>In \u003Ccode>android/local.properties\u003C/code> file, add the \u003Ccode>flutter.minSdkVersion\u003C/code> on a new line and set it to the version you need.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>flutter.minSdkVersion=21\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>For iOS, go to \u003Ccode>ios/Podfile\u003C/code> file and uncomment where it says, \u003Ccode>platform :ios, '&#x3C;version>'\u003C/code> and specify the version.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># Uncomment this line to define a global platform for your project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>platform :ios, '16.0'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>If you’re deploying to other platforms, say Windows or macOS, you will need to search the internet on how to update those values.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"use-verbose-for-pod-commands\">Use —verbose for pod commands\u003C/h2>\u003Cp>When using pod commands, sometimes the process is running but nothing is showing up in your terminal.\u003C/p>\u003Cp>To get some sort of feedback that the process didn’t hang, use the \u003Ccode>--verbose\u003C/code> flag.\u003C/p>\u003Cp>For example, while in the \u003Ccode>/ios\u003C/code> folder, you can run to update your Podfile.lock:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pod\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> update\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --verbose\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\n\u003Csection>\u003Ch2 id=\"kotlin-requires-a-newer-version\">Kotlin requires a newer version\u003C/h2>\u003Cp>You might see this error when you’re required to use a newer version of Kotlin in your project:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>BUILD FAILED in 8s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[!] Your project requires a newer version of the Kotlin Gradle plugin.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    Find the latest version on https://kotlinlang.org/docs/gradle.html#plugin-and-versions, then update project/android/build.gradle:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ext.kotlin_version = '&#x3C;latest-version>'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Exception: Gradle task assembleDebug failed with exit code 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>To find out where you can update your \u003Ccode>kotlin_version\u003C/code>, you’ll have to go to \u003Ccode>/android/settings.gradle\u003C/code> in your project.\u003C/p>\u003Cp>Find the \u003Ccode>plugins\u003C/code> config and update the \u003Ccode>org.jetbrains.kotlin.android\u003C/code> field with a higher version that’s listed in the error message above.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>plugins {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    id \"dev.flutter.flutter-plugin-loader\" version \"1.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    id \"com.android.application\" version \"7.3.0\" apply false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    id \"org.jetbrains.kotlin.android\" version \"2.0.0\" apply false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\n\u003Csection>\u003Ch2 id=\"launch-the-simulator-from-vs-code\">Launch the simulator from VS Code\u003C/h2>\u003Cp>This one was a bit tricky. When developing for Flutter in VSCode, you’ll be using the debugger tool. When you start the debugging tool to launch your Flutter app, the device will often change.\u003C/p>\u003Cp>Sometimes it will launch on my physical iPhone. Sometimes it will launch for my macOS. Neither of which I want since I only want to run an iOS simulator.\u003C/p>\u003Cp>My approach to this is to use the \u003Ccode>Flutter: Launch Emulator\u003C/code> from the Command Palette to launch the simulator separately, and then run the debug tool.\u003C/p>\u003Cp>To do this, open the Command Palette by using the shortcut, (\u003Ckbd>⌘\u003C/kbd> + \u003Ckbd>Shift\u003C/kbd> + \u003Ckbd>P\u003C/kbd>).\u003C/p>\u003Cp>Begin typing Flutter and you’ll see a list of options you can choose from. When you select \u003Ccode>Flutter: Launch Emulator\u003C/code>, it will show you all the available simulators that you’ve installed on your machine.\u003C/p>\u003Cp>Select one and it should open.\u003C/p>\u003Cp>If not, then you may have these next set of issues.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"unable-to-boot-the-simulator\">Unable to boot the simulator\u003C/h2>\u003Cp>This pops up for whatever reason. Maybe I tried to do something with Xcode and broke my simulator.\u003C/p>\u003Cp>But no matter what I did, restarting VSCode, uninstalling/reinstalling the simulator, nothing would work.\u003C/p>\u003Cp>That is until I found a solution by deleting the Xcode caches.\u003C/p>\u003Cp>You need to go to your “System Settings > General > Storage > Developer” and click on the “i” icon button. You should see the following page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/common-errors-flutter/xcode-cache-delete.png&#x22;,&#x22;alt&#x22;:&#x22;Locating Xcode Caches&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Select “Xcode Caches”, click “Delete…” and continue with the prompt.\u003C/p>\u003Cp>From there you should be able to boot your simulator again.\u003C/p>\u003Cp>But you might encounter another error when the simulator has booted.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"springboard-quit-unexpectedly\">Springboard quit unexpectedly\u003C/h2>\u003Cp>Another popup that might show up that something went wrong. This time it has something to do with Springboard.\u003C/p>\u003Cp>Maybe this issue stemmed from deleting the Xcode cache but I would never know.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/common-errors-flutter/xcode-springboard.png&#x22;,&#x22;alt&#x22;:&#x22;Springboard quit unexpectedly modal&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>A quick internet search tells me that Springboard is the application that manages the home screen for iOS devices.\u003C/p>\u003Cp>Not liking the sound of that, I searched for a fix and the only thing that worked for me was to delete Xcode entirely and install it fresh.\u003C/p>\u003Cp>It was a hassle but it worked and was something I could do easily since every conversation about the error was way above my technical knowledge.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"rename-app-id--bundle-id\">Rename App ID / Bundle ID\u003C/h2>\u003Cp>Every app deployed to a platform has a unique App ID. In iOS terms, it’s called the Bundle ID. These unique names are usually reversed in the manner of a domain name.\u003C/p>\u003Cp>These App IDs must be unique because this is how the platform identifies your app in their App Store. Whether that be the App Store, Google Play Store, etc. you’ll need to keep them unique and that’s why reversed domain names are standard practice.\u003C/p>\u003Cp>For example, \u003Ccode>billyle.dev\u003C/code> becomes \u003Ccode>dev.billyle\u003C/code> as my App ID.\u003C/p>\u003Cp>When you create a new Flutter project either by the command line or by VSCode, it will default the name of your App ID to be \u003Ccode>com.example.&#x3C;YOUR_PROJECT_NAME>\u003C/code>.\u003C/p>\u003Cp>I don’t like seeing the “example” in there and it’s not a real representation of what I’m creating.\u003C/p>\u003Cp>Instead, when starting a new Flutter project use this command and replace \u003Ccode>com.yourdomain\u003C/code> and \u003Ccode>app_name\u003C/code> to your liking.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"zsh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">flutter\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> create\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --org\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> com.yourdomain\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> app_name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>This will then create the App ID for you with \u003Ccode>com.yourdomain.app_name\u003C/code>.\u003C/p>\u003Cp>A thing I am starting to do is replace \u003Ccode>app_name\u003C/code> with specific platform names like \u003Ccode>ios\u003C/code> and \u003Ccode>android\u003C/code> to keep things organized but you don’t need to do this.\u003C/p>\u003Cp>If you find that you’re knee-deep in an existing project but your App ID still contains the \u003Ccode>com.example\u003C/code> name, you can use this \u003Ca href=\"https://pub.dev/packages/rename\">rename-cli\u003C/a> to rename your App ID.\u003C/p>\u003Cp>The instructions are straightforward to use.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"additional-resources\">Additional resources\u003C/h2>\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/vandadnp/flutter-tips-and-tricks\">Flutter tips and tricks\u003C/a> from Vandad.\u003C/li>\n\u003C/ul>\u003C/section>\n\u003Csection>\u003Ch2 id=\"keeping-this-updated\">Keeping this updated\u003C/h2>\u003Cp>There you have it. This is my current list of common errors and tips when developing in Flutter.\u003C/p>\u003Cp>I hope it helps you on your journey to becoming a Flutter Developer.\u003C/p>\u003Cp>I plan to keep this list updated every once in a while when I encounter a new issue so check back every few months.\u003C/p>\u003Cp>With that, thanks for reading and I hope you have a good one.\u003C/p>\u003C/section>",{"headings":525,"imagePaths":568,"frontmatter":504},[526,529,532,535,538,541,544,547,550,553,556,559,562,565],{"depth":230,"slug":527,"text":528},"installation-problems-and-fixes","Installation problems and fixes",{"depth":230,"slug":530,"text":531},"clean-and-repair-cache","Clean and repair cache",{"depth":230,"slug":533,"text":534},"cocoapods-errors","Cocoapods errors",{"depth":234,"slug":536,"text":537},"cocoapods-not-installed-error","Cocoapods not installed error",{"depth":234,"slug":539,"text":540},"cocoapods-base-configuration","Cocoapods base configuration",{"depth":230,"slug":542,"text":543},"target-versions-not-supported","Target versions not supported",{"depth":230,"slug":545,"text":546},"use-verbose-for-pod-commands","Use —verbose for pod commands",{"depth":230,"slug":548,"text":549},"kotlin-requires-a-newer-version","Kotlin requires a newer version",{"depth":230,"slug":551,"text":552},"launch-the-simulator-from-vs-code","Launch the simulator from VS Code",{"depth":230,"slug":554,"text":555},"unable-to-boot-the-simulator","Unable to boot the simulator",{"depth":230,"slug":557,"text":558},"springboard-quit-unexpectedly","Springboard quit unexpectedly",{"depth":230,"slug":560,"text":561},"rename-app-id--bundle-id","Rename App ID / Bundle ID",{"depth":230,"slug":563,"text":564},"additional-resources","Additional resources",{"depth":230,"slug":566,"text":567},"keeping-this-updated","Keeping this updated",[519,520],"common-errors-for-new-flutter-developers-tips-and-fixes.md","adding-rss-feed-content-and-fixing-markdown-image-paths-in-astro",{"id":570,"data":572,"body":584,"filePath":585,"assetImports":586,"digest":597,"rendered":598,"legacyId":628},{"title":573,"pubDate":574,"description":575,"author":576,"image":577,"tags":580,"draft":211,"readingTime":514,"lastDateModified":583},"Adding RSS Feed Content and Fixing Markdown Image Paths in Astro",["Date","2024-05-04T00:00:00.000Z"],"I recently added an RSS feed to my website and wanted to cross-post my writings from my blog to other platforms like dev.to. Following the official docs was fine, however, there was one issue if you were using relative paths in your markdown for your image assets. The images were not correctly pointing to the URL where it was hosted. I did find a way to fix this in this post.",{"name":203,"email":204},{"url":578,"alt":579,"className":208},"https://images.unsplash.com/photo-1464131878849-80cd5cd9055a","a large tunnel in a forest",[307,581,582],"content creation","astro","2024-06-01T11:15:22+08:00","Having an RSS feed is a nice way to notify your readers when your new content has been published.\n\nI have a yellow \"Subscribe\" button at the end of every blog post which points to my `rss.xml` file where anyone could subscribe using an RSS reader.\n\nTo do this, AstroJS makes it easy for you to [create an RSS feed](https://docs.astro.build/en/guides/rss/) by using their official plugin [@astrojs/rss](https://github.com/withastro/astro/tree/main/packages/astro-rss).\n\nHowever, when it comes to adding feed content, there was one little problem...\n\n## The RSS content image issue\n\nWhen I first integrated it, I tried adding the full contents of my post to the RSS feed.\n\nI realized the output image src were all using a relative path that didn't exist because of how Astro works with local images.\n\n![Incorrect image path in RSS feed](./_images/rss-feed-content-fix/astro-incorrect-image-path.png)\n\nI couldn't find a direct fix for this initially so I put it off.\n\nWith that said, I excluded using the post content and simply used the title and description for my RSS feed.\n\nNow, when I visit an RSS reader like [Feedly](https://feedly.com) and look for my website, I get a list of feeds.\n\nIt's exactly what I want, but it looks pretty bare-bones.\n\n![Bare Feedly RSS feed item](./_images/rss-feed-content-fix/feedly-rss-feed-bare.png)\n\nAll a user can do at this point is to follow the link to visit the blog to read it.\n\nBut what if I want users to read from their preferred source?\n\nWouldn't it be nice if someone wanted to read on Medium, dev.to, or their own RSS reader?\n\nThat's why I found the want to add the post content and begin cross-posting to other platforms so that my blog has more reach.\n\n## Cross-posting on dev.to\n\nMore recently, I wanted to cross-post over to dev.to to get more visibility on my writings.\n\nYou can connect your RSS feed to dev.to under \"Settings -> Extensions\".\n\n![Add RSS feed in dev.to settings](./_images/rss-feed-content-fix/dev-to-add-rss.png)\n\nIf you want, you can specify to dev.to that you want your RSS feed to be the canonical URL. Be sure to check the box if this is your desire.\n\nFrom there, you can click the \"Fetch feed now\" button and it will pull all your feed items into your dashboard as draft posts.\n\n![Dev.to dashboard showing draft posts](./_images/rss-feed-content-fix/dev-to-dashboard.png)\n\nEverything works as expected but the contents of the blog weren't included because the RSS feed item didn't have any content that dev.to can use.\n\n![Dev.to draft post with no content](./_images/rss-feed-content-fix/dev-to-no-content.png)\n\nBefore I get to the solution, I want to talk about how AstroJS outputs the image files.\n\n## AstroJS image optimization\n\nLet's understand a bit what is happening with the images in your markdown.\n\nIn this photo, you can see I have an `_images` folder alongside my markdowns that map to a relative path in a blog post.\n\n![Markdown file showing image relative path](./_images/rss-feed-content-fix/astro-markdown-image-path.png)\n\nIf you're using an import alias or relative path that is not the public directory in your markdowns, Astro will copy and optimize the images and place them in a static folder called `_astro/` at build time.\n\nWhen AstroJS is transforming your markdowns to HTML, it will then replace all the image paths with the one found in the `_astro` folder.\n\nHere is an example of what that folder looks like.\n\n![Output directory _astro from image optimization](./_images/rss-feed-content-fix/astro-image-output.png)\n\nBy default, AstroJS will give the file names a hash and also convert it to `webp` for a smaller footprint.\n\nPretty simple, right?\n\nOkay, it's time to revisit adding the RSS feed content.\n\n## Building the RSS feed content\n\nUsing the AstroJS RSS tutorial as a base, we'll add onto it to make sure our images correctly point to a URL.\n\nThis is the basic code to compile your RSS feed.\n\n```typescript\nimport rss from '@astrojs/rss';\nimport { getCollection } from 'astro:content';\nimport sanitizeHtml from 'sanitize-html';\nimport MarkdownIt from 'markdown-it';\nconst parser = new MarkdownIt();\n\nexport async function GET(context) {\n  const blog = await getCollection('blog');\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    items: blog.map((post) => ({\n      link: `/blog/${post.slug}/`,\n      // Note: this will not process components or JSX expressions in MDX files.\n      content: sanitizeHtml(parser.render(post.body), {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img'])\n      }),\n      ...post.data,\n    })),\n  });\n}\n```\n\nIn the `parser.render(post.body)`, we are passing in the contents of our markdown into render which includes the relative image paths.\n\nThat is why in our final output for our `rss.xml`, we get those incorrect URLs.\n\nAt this point, I had an idea to fix this. What if before I pass the HTML string into `sanitizeHtml()`, I modify the markdown or HTML image paths myself, would that work?\n\nLet's see...\n\n### Add dependency node-html-parser\n\nWe're going to need an HTML parser so we can easily manipulate objects instead of strings.\n\nInstall [node-html-parser](https://www.npmjs.com/package/node-html-parser).\n\nThe Node HTML parser will convert the string output from the rendered markdown from `markdown-it` and create a DOM-like HTML structure.\n\nWe can query against this structure like how we would use the DOM API for browsers.\n\nInstall it with your preferred package manager.\n\nI use pnpm so that command would be `pnpm add node-html-parser`.\n\n### The image relative path fix\n\nHere is my solution to this problem.\n\n```typescript\nimport rss from \"@astrojs/rss\";\nimport sanitizeHtml from \"sanitize-html\";\nimport MarkdownIt from \"markdown-it\";\nimport { allPosts } from \"@utils/getCollection\";\nimport { parse as htmlParser } from \"node-html-parser\";\nimport { getImage } from \"astro:assets\";\n\nimport type { AstroGlobal } from \"astro\";\nimport type { RSSFeedItem } from \"@astrojs/rss\";\nconst markdownParser = new MarkdownIt();\n\n// get dynamic import of images as a map collection\nconst imagesGlob = import.meta.glob\u003C{ default: ImageMetadata }>(\n  \"/src/content/posts/_images/**/*.{jpeg,jpg,png,gif}\", // add more image formats if needed\n);\n\nexport async function GET(context: AstroGlobal) {\n  if (!context.site) {\n    throw Error(\"site not set\");\n  }\n\n  const feed: RSSFeedItem[] = [];\n\n  for (const post of allPosts) {\n    // convert markdown to html string\n    const body = markdownParser.render(post.body);\n    // convert html string to DOM-like structure\n    const html = htmlParser.parse(body);\n    // hold all img tags in variable images\n    const images = html.querySelectorAll(\"img\");\n\n    for (const img of images) {\n      const src = img.getAttribute(\"src\")!;\n\n      // Relative paths that are optimized by Astro build\n      if (src.startsWith(\"./\")) {\n        // remove prefix of `./`\n        const prefixRemoved = src.replace(\"./\", \"\");\n        // create prefix absolute path from root dir\n        const imagePathPrefix = `/src/content/posts/${prefixRemoved}`;\n\n        // call the dynamic import and return the module\n        const imagePath = await imagesGlob[imagePathPrefix]?.()?.then(\n          (res) => res.default,\n        );\n\n        if (imagePath) {\n          const optimizedImg = await getImage({ src: imagePath });\n          // set the correct path to the optimized image\n          img.setAttribute(\n            \"src\",\n            context.site + optimizedImg.src.replace(\"/\", \"\"),\n          );\n        }\n      } else if (src.startsWith(\"/images\")) {\n        // images starting with `/images/` is the public dir\n        img.setAttribute(\"src\", context.site + src.replace(\"/\", \"\"));\n      } else {\n        throw Error(\"src unknown\");\n      }\n    }\n\n    feed.push({\n      title: post.data.title,\n      description: post.data.description,\n      author: `${post.data.author.email} (${post.data.author.name})`,\n      pubDate: post.data.pubDate,\n      categories: post.data.tags,\n      link: `/posts/${post.slug}`,\n      // sanitize the new html string with corrected image paths\n      content: sanitizeHtml(html.toString(), {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat([\"img\"]),\n      }),\n    });\n  }\n\n  return rss({\n    title: \"Billy Le | Blog\",\n    description:\n      \"My creative outlet is a reflection of the experiences I've encountered—whether in learning, facing setbacks, or achieving success—as a software developer.\",\n    site: context.site,\n    items: feed,\n    stylesheet: \"/pretty-feed-v3.xsl\",\n    xmlns: {\n      atom: \"http://www.w3.org/2005/Atom\",\n    },\n    customData: [\n      \"\u003Clanguage>en-us\u003C/language>\",\n      `\u003Catom:link href=\"${new URL(\"rss.xml\", context.site)}\" rel=\"self\" type=\"application/rss+xml\" />`,\n    ].join(\"\"),\n    trailingSlash: false,\n  });\n}\n```\n\nI littered the code with comments but I'll try to break this down to make more sense of it.\n\nThe most important part is the `import.meta.glob()`.\n\nThanks to Henri Fournier, from the Astro Lounge Discord Support Channel, for this tip.\n\nYou can read more about [dynamically importing your images](https://docs.astro.build/en/recipes/dynamically-importing-images/) and the `import.meta.glob()` in more detail.\n\nThe `imagesGlob` variable is an object that stores keys as the paths, and the values as dynamic import functions.\n\n```\nconst imagesGlob = {\n  '/src/content/posts/_images/content-collection-in-sync/types-to-any.png': [Function: /src/content/posts/_images/content-collection-in-sync/types-to-any.png],\n  '/src/content/posts/_images/creating-toc/remark-toc-md.png': [Function: /src/content/posts/_images/creating-toc/remark-toc-md.png],\n  '/src/content/posts/_images/creating-toc/remark-toc-static.png': [Function: /src/content/posts/_images/creating-toc/remark-toc-static.png],\n  ...\n}\n```\n\nEach dynamic import contains the `ImageMetadata` object which looks like this:\n\n```typescript\nexport interface ImageMetadata {\n    src: string;\n    width: number;\n    height: number;\n    format: ImageInputFormat;\n    orientation?: number;\n}\n```\n\nWith that ready to go, I loop over all my blog posts and convert them to HTML using the `node-html-parser`.\n\n```typescript\nconst body = markdownParser.render(post.body);\nconst html = htmlParser.parse(body);\nconst images = html.querySelectorAll(\"img\");\n```\n\nFrom there, I loop through the images and use the dynamic imports from `imagesGlob` to get the correct path from the `ImageMetadata`.\n\nAnd that looks like this:\n\n```typescript\nconst src = img.getAttribute(\"src\")!;\n\nif (src.startsWith(\"./\")) {\n  // remove prefix of `./`\n  const prefixRemoved = src.replace(\"./\", \"\");\n  // create prefix absolute path from root dir\n  const imagePathPrefix = `/src/content/posts/${prefixRemoved}`;\n\n  // call the dynamic import and return the module\n  const imagePath = await imagesGlob[imagePathPrefix]?.()?.then(\n    (res) => res.default,\n  );\n\n  if (imagePath) {\n    const optimizedImg = await getImage({ src: imagePath });\n    // set the correct path to the optimized image\n    img.setAttribute(\n      \"src\",\n      context.site + optimizedImg.src.replace(\"/\", \"\"),\n    );\n  }\n}\n```\n\nThe rest of the `else if/else` statements check if the image is from my public/images directory or if it's an unknown source, I throw an error.\n\nFinally, I push the feed item into an array and when we sanitize our HTML, we call `html.toString()` which is passed into `sanitizeHtml()`.\n\n### Check RSS output fix\n\nNow it's time to see if everything works.\n\nRun the build command, I'm using `pnpm build`.\n\nCheck the contents of your `_dist` folder and look for your RSS XML file.\n\n![Corrected image path in RSS feed](./_images/rss-feed-content-fix/astro-correct-image-path.png)\n\n🥳 Yes! It's looking good and seems to be pointing to the path correctly.\n\nOkay, time to push it live and test Feedly and dev.to.\n\n## Verify fix on supported platforms\n\nIf you had an RSS feed on Feedly before adding content, they won't update as the [date is encoded on their servers](https://groups.google.com/g/feedly-cloud/c/3evZeYOnS2I).\n\nOnly new content will be updated with the new RSS changes or when you change your feed URL.\n\nViewing from Feedly, I only have one item that correctly shows the contents of my blog post.\n\nAnd the images are working!\n\n![Corrected Feedly RSS feed](./_images/rss-feed-content-fix/feedly-rss-feed-content.png)\n\nThat's awesome!\n\nOver on dev.to, I deleted all my drafts with no content.\n\nOnce I removed all my old draft posts, I fetched my updated RSS feed using the \"Fetch feed now\" button.\n\nAnd now, I see that all the contents are there ready to be published!\n\n![Dev.to draft posts with content](./_images/rss-feed-content-fix/dev-to-content.png)\n\n## Conclusion\n\nWith the RSS feed content in place, we can now fetch our blog posts on platforms that support RSS feeds.\n\nThis is great because we can benefit by sharing our blog with different platforms and give our readers a choice where they receive updates and read new content.\n\nIn this post, I've gone over the issue of the incorrect image path when creating an RSS feed from markdown to XML with AstroJS.\n\nTo fix this, we had to convert the markdown to HTML and modify the image src to use the correct path. That's all thanks to the `import.meta.glob()`, a useful Vite utility function.\n\nAfter verifying our fix, we can view places like Feedly and dev.to, to continue sharing our posts.\n\nIf you want to see how you can add a featured image per blog post for your RSS. Check out [Web Reaper's blog post](https://webreaper.dev/posts/astro-rss-feed-blog-post-images/) on how you can do that.\n\nWell, that's all I can think of. Let me know what you think and if there is anything I can add.\n\nThanks for reading, and as always, have a good one! 😊","src/content/posts/adding-rss-feed-content-and-fixing-markdown-image-paths-in-astro.md",[587,588,589,590,591,592,593,594,595,596],"./_images/rss-feed-content-fix/astro-incorrect-image-path.png","./_images/rss-feed-content-fix/feedly-rss-feed-bare.png","./_images/rss-feed-content-fix/dev-to-add-rss.png","./_images/rss-feed-content-fix/dev-to-dashboard.png","./_images/rss-feed-content-fix/dev-to-no-content.png","./_images/rss-feed-content-fix/astro-markdown-image-path.png","./_images/rss-feed-content-fix/astro-image-output.png","./_images/rss-feed-content-fix/astro-correct-image-path.png","./_images/rss-feed-content-fix/feedly-rss-feed-content.png","./_images/rss-feed-content-fix/dev-to-content.png","35e93d7d897f46cc",{"html":599,"metadata":600},"\u003Cp>Having an RSS feed is a nice way to notify your readers when your new content has been published.\u003C/p>\n\u003Cp>I have a yellow “Subscribe” button at the end of every blog post which points to my \u003Ccode>rss.xml\u003C/code> file where anyone could subscribe using an RSS reader.\u003C/p>\n\u003Cp>To do this, AstroJS makes it easy for you to \u003Ca href=\"https://docs.astro.build/en/guides/rss/\">create an RSS feed\u003C/a> by using their official plugin \u003Ca href=\"https://github.com/withastro/astro/tree/main/packages/astro-rss\">@astrojs/rss\u003C/a>.\u003C/p>\n\u003Cp>However, when it comes to adding feed content, there was one little problem…\u003C/p>\n\u003Csection>\u003Ch2 id=\"the-rss-content-image-issue\">The RSS content image issue\u003C/h2>\u003Cp>When I first integrated it, I tried adding the full contents of my post to the RSS feed.\u003C/p>\u003Cp>I realized the output image src were all using a relative path that didn’t exist because of how Astro works with local images.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/astro-incorrect-image-path.png&#x22;,&#x22;alt&#x22;:&#x22;Incorrect image path in RSS feed&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>I couldn’t find a direct fix for this initially so I put it off.\u003C/p>\u003Cp>With that said, I excluded using the post content and simply used the title and description for my RSS feed.\u003C/p>\u003Cp>Now, when I visit an RSS reader like \u003Ca href=\"https://feedly.com\">Feedly\u003C/a> and look for my website, I get a list of feeds.\u003C/p>\u003Cp>It’s exactly what I want, but it looks pretty bare-bones.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/feedly-rss-feed-bare.png&#x22;,&#x22;alt&#x22;:&#x22;Bare Feedly RSS feed item&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>All a user can do at this point is to follow the link to visit the blog to read it.\u003C/p>\u003Cp>But what if I want users to read from their preferred source?\u003C/p>\u003Cp>Wouldn’t it be nice if someone wanted to read on Medium, dev.to, or their own RSS reader?\u003C/p>\u003Cp>That’s why I found the want to add the post content and begin cross-posting to other platforms so that my blog has more reach.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"cross-posting-on-devto\">Cross-posting on dev.to\u003C/h2>\u003Cp>More recently, I wanted to cross-post over to dev.to to get more visibility on my writings.\u003C/p>\u003Cp>You can connect your RSS feed to dev.to under “Settings -> Extensions”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/dev-to-add-rss.png&#x22;,&#x22;alt&#x22;:&#x22;Add RSS feed in dev.to settings&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If you want, you can specify to dev.to that you want your RSS feed to be the canonical URL. Be sure to check the box if this is your desire.\u003C/p>\u003Cp>From there, you can click the “Fetch feed now” button and it will pull all your feed items into your dashboard as draft posts.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/dev-to-dashboard.png&#x22;,&#x22;alt&#x22;:&#x22;Dev.to dashboard showing draft posts&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Everything works as expected but the contents of the blog weren’t included because the RSS feed item didn’t have any content that dev.to can use.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/dev-to-no-content.png&#x22;,&#x22;alt&#x22;:&#x22;Dev.to draft post with no content&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Before I get to the solution, I want to talk about how AstroJS outputs the image files.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"astrojs-image-optimization\">AstroJS image optimization\u003C/h2>\u003Cp>Let’s understand a bit what is happening with the images in your markdown.\u003C/p>\u003Cp>In this photo, you can see I have an \u003Ccode>_images\u003C/code> folder alongside my markdowns that map to a relative path in a blog post.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/astro-markdown-image-path.png&#x22;,&#x22;alt&#x22;:&#x22;Markdown file showing image relative path&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If you’re using an import alias or relative path that is not the public directory in your markdowns, Astro will copy and optimize the images and place them in a static folder called \u003Ccode>_astro/\u003C/code> at build time.\u003C/p>\u003Cp>When AstroJS is transforming your markdowns to HTML, it will then replace all the image paths with the one found in the \u003Ccode>_astro\u003C/code> folder.\u003C/p>\u003Cp>Here is an example of what that folder looks like.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/astro-image-output.png&#x22;,&#x22;alt&#x22;:&#x22;Output directory _astro from image optimization&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>By default, AstroJS will give the file names a hash and also convert it to \u003Ccode>webp\u003C/code> for a smaller footprint.\u003C/p>\u003Cp>Pretty simple, right?\u003C/p>\u003Cp>Okay, it’s time to revisit adding the RSS feed content.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"building-the-rss-feed-content\">Building the RSS feed content\u003C/h2>\u003Cp>Using the AstroJS RSS tutorial as a base, we’ll add onto it to make sure our images correctly point to a URL.\u003C/p>\u003Cp>This is the basic code to compile your RSS feed.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rss \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@astrojs/rss'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getCollection } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'astro:content'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sanitizeHtml \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'sanitize-html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MarkdownIt \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'markdown-it'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> parser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MarkdownIt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> GET\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">context\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> blog\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> getCollection\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'blog'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#B392F0\"> rss\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Buzz’s Blog'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    description: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'A humble Astronaut’s guide to the stars'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    site: context.site,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    items: blog.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      link: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/blog/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">post\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">slug\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Note: this will not process components or JSX expressions in MDX files.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      content: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeHtml\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(parser.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(post.body), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        allowedTags: sanitizeHtml.defaults.allowedTags.\u003C/span>\u003Cspan style=\"color:#B392F0\">concat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'img'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">post.data,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In the \u003Ccode>parser.render(post.body)\u003C/code>, we are passing in the contents of our markdown into render which includes the relative image paths.\u003C/p>\u003Cp>That is why in our final output for our \u003Ccode>rss.xml\u003C/code>, we get those incorrect URLs.\u003C/p>\u003Cp>At this point, I had an idea to fix this. What if before I pass the HTML string into \u003Ccode>sanitizeHtml()\u003C/code>, I modify the markdown or HTML image paths myself, would that work?\u003C/p>\u003Cp>Let’s see…\u003C/p>\u003Csection>\u003Ch3 id=\"add-dependency-node-html-parser\">Add dependency node-html-parser\u003C/h3>\u003Cp>We’re going to need an HTML parser so we can easily manipulate objects instead of strings.\u003C/p>\u003Cp>Install \u003Ca href=\"https://www.npmjs.com/package/node-html-parser\">node-html-parser\u003C/a>.\u003C/p>\u003Cp>The Node HTML parser will convert the string output from the rendered markdown from \u003Ccode>markdown-it\u003C/code> and create a DOM-like HTML structure.\u003C/p>\u003Cp>We can query against this structure like how we would use the DOM API for browsers.\u003C/p>\u003Cp>Install it with your preferred package manager.\u003C/p>\u003Cp>I use pnpm so that command would be \u003Ccode>pnpm add node-html-parser\u003C/code>.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"the-image-relative-path-fix\">The image relative path fix\u003C/h3>\u003Cp>Here is my solution to this problem.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rss \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@astrojs/rss\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sanitizeHtml \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"sanitize-html\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MarkdownIt \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"markdown-it\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { allPosts } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@utils/getCollection\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { parse \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> htmlParser } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node-html-parser\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getImage } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"astro:assets\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { AstroGlobal } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { RSSFeedItem } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@astrojs/rss\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownParser\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> MarkdownIt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// get dynamic import of images as a map collection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imagesGlob\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">glob\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;{ \u003C/span>\u003Cspan style=\"color:#FFAB70\">default\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ImageMetadata\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"/src/content/posts/_images/**/*.{jpeg,jpg,png,gif}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">// add more image formats if needed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> GET\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">context\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> AstroGlobal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">context.site) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"site not set\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> feed\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> RSSFeedItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> post\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> allPosts) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // convert markdown to html string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> body\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownParser.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(post.body);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // convert html string to DOM-like structure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> html\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> htmlParser.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(body);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // hold all img tags in variable images\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> images\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> html.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"img\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> img\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> images) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> src\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> img.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Relative paths that are optimized by Astro build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (src.\u003C/span>\u003Cspan style=\"color:#B392F0\">startsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // remove prefix of `./`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> prefixRemoved\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> src.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // create prefix absolute path from root dir\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imagePathPrefix\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `/src/content/posts/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">prefixRemoved\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // call the dynamic import and return the module\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imagePath\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> imagesGlob[imagePathPrefix]?.()?.\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          (\u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.default,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (imagePath) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> optimizedImg\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> getImage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ src: imagePath });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // set the correct path to the optimized image\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          img.\u003C/span>\u003Cspan style=\"color:#B392F0\">setAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"src\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            context.site \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> optimizedImg.src.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (src.\u003C/span>\u003Cspan style=\"color:#B392F0\">startsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/images\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // images starting with `/images/` is the public dir\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        img.\u003C/span>\u003Cspan style=\"color:#B392F0\">setAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, context.site \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> src.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src unknown\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    feed.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      title: post.data.title,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      description: post.data.description,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      author: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">post\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">data\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">author\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">email\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} (${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">post\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">data\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">author\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">})`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      pubDate: post.data.pubDate,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      categories: post.data.tags,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      link: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/posts/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">post\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">slug\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // sanitize the new html string with corrected image paths\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      content: \u003C/span>\u003Cspan style=\"color:#B392F0\">sanitizeHtml\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(html.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        allowedTags: sanitizeHtml.defaults.allowedTags.\u003C/span>\u003Cspan style=\"color:#B392F0\">concat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"img\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#B392F0\"> rss\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Billy Le | Blog\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    description:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"My creative outlet is a reflection of the experiences I've encountered—whether in learning, facing setbacks, or achieving success—as a software developer.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    site: context.site,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    items: feed,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    stylesheet: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/pretty-feed-v3.xsl\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    xmlns: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      atom: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"http://www.w3.org/2005/Atom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    customData: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"&#x3C;language>en-us&#x3C;/language>\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      `&#x3C;atom:link href=\"${\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rss.xml\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">, \u003C/span>\u003Cspan style=\"color:#E1E4E8\">context\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">site\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\" rel=\"self\" type=\"application/rss+xml\" />`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ].\u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    trailingSlash: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I littered the code with comments but I’ll try to break this down to make more sense of it.\u003C/p>\u003Cp>The most important part is the \u003Ccode>import.meta.glob()\u003C/code>.\u003C/p>\u003Cp>Thanks to Henri Fournier, from the Astro Lounge Discord Support Channel, for this tip.\u003C/p>\u003Cp>You can read more about \u003Ca href=\"https://docs.astro.build/en/recipes/dynamically-importing-images/\">dynamically importing your images\u003C/a> and the \u003Ccode>import.meta.glob()\u003C/code> in more detail.\u003C/p>\u003Cp>The \u003Ccode>imagesGlob\u003C/code> variable is an object that stores keys as the paths, and the values as dynamic import functions.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>const imagesGlob = {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  '/src/content/posts/_images/content-collection-in-sync/types-to-any.png': [Function: /src/content/posts/_images/content-collection-in-sync/types-to-any.png],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  '/src/content/posts/_images/creating-toc/remark-toc-md.png': [Function: /src/content/posts/_images/creating-toc/remark-toc-md.png],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  '/src/content/posts/_images/creating-toc/remark-toc-static.png': [Function: /src/content/posts/_images/creating-toc/remark-toc-static.png],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Each dynamic import contains the \u003Ccode>ImageMetadata\u003C/code> object which looks like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> ImageMetadata\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    src\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    width\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    height\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    format\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ImageInputFormat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    orientation\u003C/span>\u003Cspan style=\"color:#F97583\">?:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>With that ready to go, I loop over all my blog posts and convert them to HTML using the \u003Ccode>node-html-parser\u003C/code>.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> body\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownParser.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(post.body);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> html\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> htmlParser.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(body);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> images\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> html.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"img\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>From there, I loop through the images and use the dynamic imports from \u003Ccode>imagesGlob\u003C/code> to get the correct path from the \u003Ccode>ImageMetadata\u003C/code>.\u003C/p>\u003Cp>And that looks like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> src\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> img.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (src.\u003C/span>\u003Cspan style=\"color:#B392F0\">startsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // remove prefix of `./`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> prefixRemoved\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> src.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // create prefix absolute path from root dir\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imagePathPrefix\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `/src/content/posts/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">prefixRemoved\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // call the dynamic import and return the module\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imagePath\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> imagesGlob[imagePathPrefix]?.()?.\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.default,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (imagePath) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> optimizedImg\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> getImage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ src: imagePath });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // set the correct path to the optimized image\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    img.\u003C/span>\u003Cspan style=\"color:#B392F0\">setAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"src\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      context.site \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> optimizedImg.src.\u003C/span>\u003Cspan style=\"color:#B392F0\">replace\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>The rest of the \u003Ccode>else if/else\u003C/code> statements check if the image is from my public/images directory or if it’s an unknown source, I throw an error.\u003C/p>\u003Cp>Finally, I push the feed item into an array and when we sanitize our HTML, we call \u003Ccode>html.toString()\u003C/code> which is passed into \u003Ccode>sanitizeHtml()\u003C/code>.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"check-rss-output-fix\">Check RSS output fix\u003C/h3>\u003Cp>Now it’s time to see if everything works.\u003C/p>\u003Cp>Run the build command, I’m using \u003Ccode>pnpm build\u003C/code>.\u003C/p>\u003Cp>Check the contents of your \u003Ccode>_dist\u003C/code> folder and look for your RSS XML file.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/astro-correct-image-path.png&#x22;,&#x22;alt&#x22;:&#x22;Corrected image path in RSS feed&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>🥳 Yes! It’s looking good and seems to be pointing to the path correctly.\u003C/p>\u003Cp>Okay, time to push it live and test Feedly and dev.to.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"verify-fix-on-supported-platforms\">Verify fix on supported platforms\u003C/h2>\u003Cp>If you had an RSS feed on Feedly before adding content, they won’t update as the \u003Ca href=\"https://groups.google.com/g/feedly-cloud/c/3evZeYOnS2I\">date is encoded on their servers\u003C/a>.\u003C/p>\u003Cp>Only new content will be updated with the new RSS changes or when you change your feed URL.\u003C/p>\u003Cp>Viewing from Feedly, I only have one item that correctly shows the contents of my blog post.\u003C/p>\u003Cp>And the images are working!\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/feedly-rss-feed-content.png&#x22;,&#x22;alt&#x22;:&#x22;Corrected Feedly RSS feed&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>That’s awesome!\u003C/p>\u003Cp>Over on dev.to, I deleted all my drafts with no content.\u003C/p>\u003Cp>Once I removed all my old draft posts, I fetched my updated RSS feed using the “Fetch feed now” button.\u003C/p>\u003Cp>And now, I see that all the contents are there ready to be published!\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/rss-feed-content-fix/dev-to-content.png&#x22;,&#x22;alt&#x22;:&#x22;Dev.to draft posts with content&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\u003Cp>With the RSS feed content in place, we can now fetch our blog posts on platforms that support RSS feeds.\u003C/p>\u003Cp>This is great because we can benefit by sharing our blog with different platforms and give our readers a choice where they receive updates and read new content.\u003C/p>\u003Cp>In this post, I’ve gone over the issue of the incorrect image path when creating an RSS feed from markdown to XML with AstroJS.\u003C/p>\u003Cp>To fix this, we had to convert the markdown to HTML and modify the image src to use the correct path. That’s all thanks to the \u003Ccode>import.meta.glob()\u003C/code>, a useful Vite utility function.\u003C/p>\u003Cp>After verifying our fix, we can view places like Feedly and dev.to, to continue sharing our posts.\u003C/p>\u003Cp>If you want to see how you can add a featured image per blog post for your RSS. Check out \u003Ca href=\"https://webreaper.dev/posts/astro-rss-feed-blog-post-images/\">Web Reaper’s blog post\u003C/a> on how you can do that.\u003C/p>\u003Cp>Well, that’s all I can think of. Let me know what you think and if there is anything I can add.\u003C/p>\u003Cp>Thanks for reading, and as always, have a good one! 😊\u003C/p>\u003C/section>",{"headings":601,"imagePaths":627,"frontmatter":572},[602,605,608,611,614,617,620,623,626],{"depth":230,"slug":603,"text":604},"the-rss-content-image-issue","The RSS content image issue",{"depth":230,"slug":606,"text":607},"cross-posting-on-devto","Cross-posting on dev.to",{"depth":230,"slug":609,"text":610},"astrojs-image-optimization","AstroJS image optimization",{"depth":230,"slug":612,"text":613},"building-the-rss-feed-content","Building the RSS feed content",{"depth":234,"slug":615,"text":616},"add-dependency-node-html-parser","Add dependency node-html-parser",{"depth":234,"slug":618,"text":619},"the-image-relative-path-fix","The image relative path fix",{"depth":234,"slug":621,"text":622},"check-rss-output-fix","Check RSS output fix",{"depth":230,"slug":624,"text":625},"verify-fix-on-supported-platforms","Verify fix on supported platforms",{"depth":230,"slug":289,"text":290},[587,588,589,590,591,592,593,594,595,596],"adding-rss-feed-content-and-fixing-markdown-image-paths-in-astro.md","from-vscode-to-neovim",{"id":629,"data":631,"filePath":641,"digest":642,"rendered":643,"legacyId":644},{"title":632,"pubDate":633,"description":634,"author":635,"image":636,"tags":639,"draft":640},"From VSCode to NeoVim",["Date","2024-11-19T00:00:00.000Z"],"Every time I went to a non-existent URL, it would redirect me to the home page. I couldn't see my 404 page unless I went to /404 directly! Thankfully, I was able to find a solution after tinkering with Docker and Nginx. If you're in this situation, then this solution might be for you.",{"name":203,"email":204},{"url":637,"alt":638,"className":208},"https://images.unsplash.com/photo-1519520104014-df63821cb6f9","a tooling section at a hardware store",[420,417,418],true,"src/content/posts/from-vscode-to-neovim.md","4bd4ba5ea4b7bad5",{"html":208},"from-vscode-to-neovim.md","keep-astro-content-collection-types-in-sync-on-git-commit",{"id":645,"data":647,"body":657,"filePath":658,"assetImports":659,"digest":661,"rendered":662,"legacyId":670},{"title":648,"pubDate":649,"description":650,"author":651,"image":652,"tags":655,"draft":211,"readingTime":381,"lastDateModified":343},"Keep Astro Content Collection Types in Sync on Git Commit",["Date","2024-04-17T00:00:00.000Z"],"Sometimes you may find your .astro type definitions out of sync of your content configuration file. I don't know why this happens but I wanted to fix this since I want to rely on Typescript whenever I'm accessing properties from my collections. The fix is relatively simple by utilizing Husky.",{"name":203,"email":204},{"url":653,"alt":654,"className":208},"https://images.unsplash.com/photo-1472722266948-a898ab5ff257","a group of people forming a star with their legs",[307,581,656,80,582],"javascript","I'm not sure when but sometimes the type definitions in the .astro folder keep going out of sync once in a while. Instead of adding the schema definitions from my collections, it replaces them with the `any` type.\n\nHere is a preview of the issue from my Git history:\n\n![schema types replaced by any type](./_images/content-collection-in-sync/types-to-any.png)\n\nThis is an issue for me since I love working with Typescript and having that safety matters when I'm developing my site.\n\nAccording to [Astro's docs](https://docs.astro.build/en/guides/content-collections/#the-astro-directory), it runs `astro sync` whenever you run `astro dev` or `astro build` so somehow during development, the types become `any`.\n\n## The fix\n\nWe're going to re-sync our types and make sure that we get the results we want by running the `astro sync` command again on a Git commit.\n\nAdd a script to your `package.json` called `sync` or whatever you like and give it the value `astro sync`.\n\n```json\n{\n  \"scripts\": {\n    \"sync\": \"astro sync\"\n  }\n}\n```\n\nYou'll need to have Husky installed in your project for this to work. It's relatively simple to set up and I talked about it [here](/posts/use-husky-and-node-to-unstage-draft-posts-from-git#what-is-husky).\n\nInside your `.husky/pre-commit` file, add these lines anywhere in the file. I'm using pnpm. Remember to replace \"pnpm\" with your package manager CLI command to run scripts.\n\n```bash\npnpm sync\ngit add .astro/types.d.ts\n```\n\nAnd that should do it! Whenever you make a new commit, the pre-commit will fire and it will sync your content collections' schemas perfectly.\n\nThanks for reading and have a good one! 😄","src/content/posts/keep-astro-content-collection-types-in-sync-on-git-commit.md",[660],"./_images/content-collection-in-sync/types-to-any.png","f3bdd13e2d79329e",{"html":663,"metadata":664},"\u003Cp>I’m not sure when but sometimes the type definitions in the .astro folder keep going out of sync once in a while. Instead of adding the schema definitions from my collections, it replaces them with the \u003Ccode>any\u003C/code> type.\u003C/p>\n\u003Cp>Here is a preview of the issue from my Git history:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/content-collection-in-sync/types-to-any.png&#x22;,&#x22;alt&#x22;:&#x22;schema types replaced by any type&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>This is an issue for me since I love working with Typescript and having that safety matters when I’m developing my site.\u003C/p>\n\u003Cp>According to \u003Ca href=\"https://docs.astro.build/en/guides/content-collections/#the-astro-directory\">Astro’s docs\u003C/a>, it runs \u003Ccode>astro sync\u003C/code> whenever you run \u003Ccode>astro dev\u003C/code> or \u003Ccode>astro build\u003C/code> so somehow during development, the types become \u003Ccode>any\u003C/code>.\u003C/p>\n\u003Csection>\u003Ch2 id=\"the-fix\">The fix\u003C/h2>\u003Cp>We’re going to re-sync our types and make sure that we get the results we want by running the \u003Ccode>astro sync\u003C/code> command again on a Git commit.\u003C/p>\u003Cp>Add a script to your \u003Ccode>package.json\u003C/code> called \u003Ccode>sync\u003C/code> or whatever you like and give it the value \u003Ccode>astro sync\u003C/code>.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"scripts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"sync\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"astro sync\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You’ll need to have Husky installed in your project for this to work. It’s relatively simple to set up and I talked about it \u003Ca href=\"/posts/use-husky-and-node-to-unstage-draft-posts-from-git#what-is-husky\">here\u003C/a>.\u003C/p>\u003Cp>Inside your \u003Ccode>.husky/pre-commit\u003C/code> file, add these lines anywhere in the file. I’m using pnpm. Remember to replace “pnpm” with your package manager CLI command to run scripts.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pnpm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> sync\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .astro/types.d.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>And that should do it! Whenever you make a new commit, the pre-commit will fire and it will sync your content collections’ schemas perfectly.\u003C/p>\u003Cp>Thanks for reading and have a good one! 😄\u003C/p>\u003C/section>",{"headings":665,"imagePaths":669,"frontmatter":647},[666],{"depth":230,"slug":667,"text":668},"the-fix","The fix",[660],"keep-astro-content-collection-types-in-sync-on-git-commit.md","configure-a-contact-form-email-server-with-resend-for-your-website",{"id":671,"data":673,"body":685,"filePath":686,"assetImports":687,"digest":703,"rendered":704,"legacyId":761},{"title":674,"pubDate":675,"description":676,"author":677,"image":678,"tags":681,"draft":211,"readingTime":683,"lastDateModified":684},"Configure a Contact Form Email Server with Resend for Your Website",["Date","2024-04-13T00:00:00.000Z"],"This tutorial covers how to hook up your front-end contact form to a back-end email server using Resend. You can apply the concepts discussed in this post to any front-end or back-end framework. If you're using a form provider like FormSpree or FormSubmit and want to move away from them, then this blog post is for you.",{"name":203,"email":204},{"url":679,"alt":680,"className":208},"https://images.pexels.com/photos/1777792/pexels-photo-1777792.jpeg","a man jump running in casual clothing",[307,582,682,80],"bun","13 min read","2024-11-18T11:52:29+08:00","Sending an email from a contact form is a necessary task for any front-end developer. Results from a search engine provide a few solutions for implementing this feature.\n\nThey usually are:\n\n1. Use a form provider where you send the data to their API and they will forward the email to your inbox\n2. Use an email framework like Nodemailer\n3. Create an SMTP Server to relay emails\n\nThe technical difficulty of implementing these features increases linearly.\n\nBut there is one other solution I found that is least talked about but it's quickly emerging and that is using [Resend](https://resend.com/home).\n\n## What is Resend?\n\nResend is a startup aimed at making sending emails easier for developers.\n\n![Resend homepage - hero section](./_images/resend-email-server/resend-homepage.png)\n\nYou can send transactional emails, start a marketing campaign, and create beautiful emails using React. And this all comes with a generous free tier.\n\nYou can also add your custom domain where the \"from\" field will be sent from your domain.\n\n## Resend Domain Config and API Key\n\nSign up for Resend and verify your email. There are two steps we're going to complete here. You can skip the Custom Domain instructions if that doesn't apply to you.\n\n### Add your Custom Domain\n\nOnce you're verified and logged into Resend, head over to the Domains page in the left panel. You should see a similar page to the one below.\n\n![Resend Domains page](./_images/resend-email-server/resend-domains-page.png)\n\nI already have mine set up but click on \"+ Add Domain\" and you'll enter your Custom domain and a region.\n\nAfter that, you need to go to your DNS provider and enter all the DNS records that Resend provides you on the following page. I have Cloudflare as my DNS provider.\n\n![Resend Domains DNS records](./_images/resend-email-server/resend-dns-records.png)\n\nThere will be a button for you to verify your DNS records. My recommendation is to wait for an hour and then try to verify that your DNS records are correctly configured with your provider.\n\nYou should see all green \"Verified\" badges next to all the records you need to add.\n\n### Create a Resend API Key\n\nOnce that's done, head over to the API Keys page for Resend. Here I'm redacting my API Key for security purposes but I'll run you through setting up a new API Key with your custom domain.\n\n![Resend API Keys page](./_images/resend-email-server/resend-api-keys-page.png)\n\nClick on \"+ Create API Key\" and a dialog will pop up.\n\n1. Enter a name for your API key.\n2. Select \"Sending Access\" under Permission since we're only using this for sending emails.\n3. In the Domain dropdown, select your verified custom domain.\n4. Finish by clicking \"Add\"\n\n![Resend Create API Key dialog](./_images/resend-email-server/resend-create-api-key.png)\n\nAnd that's all! Now onto the coding part.\n\n## Setting up the Front-end\n\nI'm using AstroJS and Tailwind for styling, but you can use vanilla or another framework if you like. Either works since we just need an HTML and some frontend JavaScript to make POST requests.\n\n\u003Cbr />\n\n### Create a simple Form element\n\nYou'll need a basic contact form markup:\n\n```astro\n\u003Cform class=\"contact-form flex max-w-md flex-col space-y-4\">\n  \u003Cinput\n    type=\"text\"\n    name=\"name\"\n    class=\"h-10 rounded px-3 ring-2 ring-neutral-300\"\n    placeholder=\"Name\"\n    required\n  />\n  \u003Cinput\n    type=\"email\"\n    name=\"email\"\n    class=\"h-10 rounded px-3 ring-2 ring-neutral-300\"\n    placeholder=\"Email\"\n    required\n  />\n  \u003Ctextarea\n    name=\"message\"\n    class=\"rounded px-3 py-2 ring-2 ring-neutral-300\"\n    rows={5}\n    placeholder=\"What would you like to say?\"\n    required>\u003C/textarea>\n  \u003Cdiv class=\"flex justify-end space-x-2\">\n    \u003Cbutton\n      type=\"submit\"\n      class=\"rounded bg-slate-900 px-3 py-1 text-xl text-slate-50 dark:bg-slate-700 dark:ring-2 dark:ring-slate-50\"\n    >\n      Submit\n    \u003C/button>\n  \u003C/div>\n\u003C/form>\n```\n\n### Basic Form Event Handler\n\nIn a script tag, we'll need to target the form and listen for events.\n\n```astro\n\u003Cscript>\n  const contactForm =\n    contactsContainer.querySelector\u003CHTMLFormElement>(\".contact-form\");\n\n  if (contactForm) {\n    contactForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      const formEl = e.target as HTMLFormElement;\n      const formData = new FormData(formEl);\n\n      const requestBody = {\n        name: formData.get(\"name\"),\n        email: formData.get(\"email\"),\n        message: formData.get(\"message\"),\n      };\n\n      console.log(requestBody);\n    });\n  }\n\u003C/script>\n```\n\nYou might be using React or some other framework but the idea here is to prepare our front-end code to start sending requests.\n\n### Test form submission\n\nThis is all we're going to need for the time being. Fire up your frontend server then fill out your contact form and hit submit. You should see a log in the dev console with your input.\n\n![Contact form filled out](./_images/resend-email-server/contact-form-filled.png)\n\n```javascript\n{\n  \"name\": \"billy\",\n  \"email\": \"billy@example.com\",\n  \"message\": \"hi from contact form\"\n}\n```\n\n## Prepare the Back-end\n\nI'm using Bun, which is a JavaScript run-time like Node. You should get very similar results if you're using Node and a web app framework like Express. If you need in that regard, feel free to reach out.\n\n### Create a `.env` file\n\nCreate a `.env` file. Use the template below since it is what I'm using these properties that will be used by our server.\n\nYou'll need to install the [dot-env](https://www.npmjs.com/package/dot-env) package if you're using Node. The link will show you how to set it up.\n\nBe sure to enter your Resend API key here.\n\n```dotenv\nSERVER_PORT=3000\nRESEND_API_KEY=\u003CAPI Key from Resend>\nEMAIL_TO=hi@billyle.dev\nALLOWED_ORIGIN=billyle.dev\n```\n\n### Install the Resend package\n\nWe also need to install the [resend](https://www.npmjs.com/package/resend) package. We'll instantiate a new Resend object and pass in our API key which will allow us to send our emails.\n\nThis is what a basic setup would look like:\n\n```typescript\nconst resend = new Resend(Bun.env.RESEND_API_KEY);\n\nconst { error } = await resend.emails.send({\n  from: `${name} \u003C${Bun.env.EMAIL_TO}>`,\n  to: [Bun.env.EMAIL_TO],\n  subject: `New Message Received From ${name}`,\n  react: EmailTemplate({ name, email, message }),\n});\n```\n\n### Creating our Bun server\n\nWe'll be creating our server next.\n\nIf you're unfamiliar with Bun, there is a web app framework called [ElysiaJS](https://elysiajs.com/) which is similar to ExpressJS. It comes with some cool features like validation which I'm using below.\n\nI've added some comments to explain a bit of what's going on.\n\n```typescript\nimport { Elysia, t } from \"elysia\";\nimport { cors } from \"@elysiajs/cors\";\nimport { Resend } from \"resend\";\nimport { EmailTemplate } from \"./email-templates/message\";\nimport winston, { format } from \"winston\";\n\nconst { errors, printf, combine, colorize, timestamp } = format;\n\n// logger for server logs\nexport const logger = winston.createLogger({\n  level: \"info\",\n});\n\nlogger.add(\n  new winston.transports.Console({\n    format: combine(\n      errors({ stack: true }),\n      colorize({ all: true }),\n      timestamp(),\n      printf(\n        ({ level, message, timestamp, stack }) =>\n          `[${timestamp}]:${level}: ${message}${stack ? `\\n\\n${stack}` : \"\"}`,\n      ),\n    ),\n  }),\n);\n\nconst resend = new Resend(Bun.env.RESEND_API_KEY);\nconst serverPort = Bun.env.SERVER_PORT || 3000;\n\n// creating Elysia instance\nnew Elysia()\n  .use(\n    cors({\n      methods: [\"POST\"],\n      origin: [\n        Bun.env.NODE_ENV === \"production\"\n          ? Bun.env.ALLOWED_ORIGIN\n          : \"localhost:4321\",\n      ],\n    }),\n  )\n  .post(\n    \"/send-email\",\n    async (context) => {\n      const { name, email, message } = context.body;\n\n      try {\n        // the part where we are sending emails\n        const { error } = await resend.emails.send({\n          from: `${name} \u003C${Bun.env.EMAIL_TO}>`,\n          to: [Bun.env.EMAIL_TO],\n          subject: `New Message Received From ${name}`,\n          react: EmailTemplate({ name, email, message }),\n        });\n\n        // error sending email, send back error status and message\n        if (error) {\n          return context.error((error as any).statusCode, error);\n        }\n\n        logger.info(\"New email received\");\n        return new Response(JSON.stringify({ message: \"Success\" }), {\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n        });\n      } catch (error) {\n        // catch error and log it, respond to user\n        if (error instanceof Error) {\n          logger.error(error.message, error);\n        }\n        return context.error(\"Internal Server Error\", error);\n      }\n    },\n    {\n      // body must be of three properties: name, email, and message\n      // validation happens as a middleware\n      body: t.Object({\n        name: t.String({\n          minLength: 3,\n          error: \"Name must be at least 3 characters\",\n        }),\n        email: t.String({\n          format: \"email\",\n          error: \"Invalid email format\",\n        }),\n        message: t.String({\n          minLength: 1,\n          maxLength: 1024,\n          error:\n            \"Message should be at least 10 characters and max of 1024 characters\",\n        }),\n      }),\n      // any errors that happens during validation will be logged\n      error: ({ path, body, request: { method, headers }, error, code }) => {\n        const errorMessage = `method=${method} path=${path} error=${\n          error.message\n        } body=${JSON.stringify(body)} userAgent=${headers.get(\"user-agent\")}`;\n        logger.error(errorMessage);\n        return error;\n      },\n    },\n  )\n  // if any errors happen on the server itself, log the errors\n  .onError(({ path, request: { method, headers }, error }) => {\n    const errorMessage = `method=${method} path=${path} userAgent=${headers.get(\n      \"user-agent\",\n    )}`;\n    logger.error(errorMessage, error);\n    return error;\n  })\n  .listen(serverPort, () => {\n    logger.info(`Server starting on PORT: ${serverPort}`);\n  });\n```\n\n\u003Cbr />\n\nIn a nutshell, we created a server that is listening on Port 3000.\n\nWhenever a POST request is received to `/send-email`, our middleware will validate the incoming body.\n\nIf any validation errors occur, we log it on our server and also return it as a response object.\n\nNow, if everything seems okay, we're going to attempt to send an email to Resend which in turn, will forward the email in our `to:` field.\n\nPretty simple right?\n\n## Front-end meets Back-end\n\nBack on our front end, we're going to make a fetch request to our server listening on Port 3000. My AstroJS server is running on PORT 4321 so make sure you distinguish the two.\n\nIn the event listener on form submission, we'll update our code to use `fetch()` as a POST request to our email server.\n\nPlease not the comments in the following code.\n\n```astro\n\u003Cscript>\n  const contactForm =\n    contactsContainer.querySelector\u003CHTMLFormElement>(\".contact-form\");\n\n  if (contactForm) {\n    contactForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      const formEl = e.target as HTMLFormElement;\n      const formData = new FormData(formEl);\n\n      const requestBody = {\n        name: formData.get(\"name\"),\n        email: formData.get(\"email\"),\n        message: formData.get(\"message\"),\n      };\n\n      try {\n        const { message } = await fetch(\n          import.meta.env.PROD\n            ? \"https://api.mycustomdomain.com/send-email\" // host a production server with your custom domain\n            : \"http://localhost:3000/send-email\",\n          {\n            method: \"POST\",\n            body: JSON.stringify(requestBody),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          },\n        ).then((res) => res.json());\n\n        // store input elements in a variable for later use\n        const nameInput =\n          formEl.querySelector\u003CHTMLInputElement>('input[name=\"name\"]');\n        const emailInput = formEl.querySelector\u003CHTMLInputElement>(\n          'input[name=\"email\"]',\n        );\n        const messageInput = formEl.querySelector\u003CHTMLTextAreaElement>(\n          'textarea[name=\"message\"]',\n        );\n\n        // remove all error classes from the inputs\n        nameInput?.classList?.remove(\"ring-red-500\");\n        emailInput?.classList?.remove(\"ring-red-500\");\n        messageInput?.classList?.remove(\"ring-red-500\");\n\n        // store adjacent siblings to see if they are error divs\n        const errorName = nameInput?.nextElementSibling as HTMLDivElement;\n        const errorEmail = emailInput?.nextElementSibling as HTMLDivElement;\n        const messageError = messageInput?.nextElementSibling as HTMLDivElement;\n\n        // each if statement checks the input adjacent sibling and removes them from the DOM\n        // if they have the `data-error=\"true\"` attribute\n        if (errorName?.dataset?.[\"error\"]) {\n          errorName.remove();\n        }\n        if (errorEmail?.dataset?.[\"error\"]) {\n          errorEmail.remove();\n        }\n        if (messageError?.dataset?.[\"error\"]) {\n          messageError.remove();\n        }\n\n        // create the error div with the data-error=\"true\" attribute\n        function createErrorMessage(message: string) {\n          const p = document.createElement(\"p\");\n          p.className = \"text-sm text-red-400\";\n          p.dataset[\"error\"] = \"true\";\n          p.textContent = message;\n          return p;\n        }\n\n        // insert the error divs after to the input element\n        function insertErrorMessage(el: HTMLElement) {\n          const error = el?.nextSibling as HTMLDivElement;\n          if (!error?.dataset?.[\"error\"]) {\n            const div = createErrorMessage(message);\n            el?.insertAdjacentElement(\"afterend\", div);\n          }\n        }\n\n        // create a toaster message upon success\n        async function createSuccessToaster() {\n          const div = document.createElement(\"div\");\n          const p = document.createElement(\"p\");\n          div.className =\n            \"fixed bottom-8 right-8 p-4 bg-slate-200 dark:bg-slate-700 shadoow-lg rounded-md opacity-0 transition-opacity duration-300 border-t-4 border-emerald-400 border-solid\";\n          p.className = \"text-xl text-slate-800 dark:text-slate-100\";\n          p.textContent = \"Your message has been sent!\";\n          div.appendChild(p);\n          document.body.appendChild(div);\n\n          // using sleep to animate the toaster\n          await sleep(100);\n          div.classList.remove(\"opacity-0\");\n          await sleep(3000);\n          div.classList.add(\"opacity-0\");\n          await sleep(200);\n          div.remove();\n        }\n\n        // message could be success or errors\n        switch (message) {\n          case \"Success\": {\n            // reset the form on success and show a toaster\n            formEl.reset();\n            createSuccessToaster();\n            break;\n          }\n          case \"Name must be at least 3 characters\": {\n            if (nameInput) {\n              insertErrorMessage(nameInput);\n            }\n            break;\n          }\n          case \"Invalid email format\": {\n            if (emailInput) {\n              insertErrorMessage(emailInput);\n            }\n            break;\n          }\n          case \"Message should be at least 10 characters and max of 1024 characters\": {\n            if (messageInput) {\n              insertErrorMessage(messageInput);\n            }\n            break;\n          }\n          default: {\n            // if message is received, log it out in the dev console\n            if (import.meta.env.DEV) {\n              console.log(\"Unknown message: \", message);\n            }\n          }\n        }\n      } catch (err) {\n        // if anything else happens during sending, log it out in the dev console\n        if (import.meta.env.DEV) {\n          console.log(err);\n        }\n      }\n    });\n  }\n\u003C/script>\n```\n\nAlright, a lot going on here. Since I'm not using a front-end framework, I'm using vanilla JavaScript to manually manage the form state and show UI elements based on the server response.\n\nAnd now if you try to submit a form, you should see it hitting your server and show up in the server logs.\n\nTry submitting different values and see what kind of messages are generated.\n\n## Deploying your Email Server\n\nNow it's time to deploy the email server.\n\nFirst, you're going to need a server. You can purchase a Virtual Private Server (VPS) or go through a managed service like Digital Ocean Droplets or Heroku.\n\nWith the former services, it should be fairly easy since you'll connect your GitHub account, point the server to your GitHub repository, and let it build/run for you. There are plenty of tutorials on this topic which I will not cover here.\n\nI have a Hetzner VPS with Coolify installed so I'll be using this configuration. If you're interested in this setup, please check out two of my other blog posts where I show you how to [self-host with Coolify](/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide) and [add Github preview deployments to Coolify](posts/adding-github-pull-request-preview-deployments-with-coolify).\n\nIn the Coolify admin page, create a New Project as usual.\n\n![Creating a new project in Coolify](./_images/resend-email-server/coolify-new-project.png)\n\nThen select the \"Production\" environment on the following page.\n\n### Adding a Resource\n\nThis next step will depend if you have Coolify integrated with GitHub or not. With a GitHub integration, Coolify can automatically deploy a new build whenever you make changes to your main branch.\n\nIf you don't have this configured yet, don't fret. You can just copy the GitHub URL to the email server repository but you have to manually redeploy anytime you make a change to see an effect.\n\nGo ahead and add a new Resource and you will see this next page.\n\n![Creating a new resource in Coolify](./_images/resend-email-server/coolify-new-resource.png)\n\nFrom there keep selecting the server you want to host it from, and then the destination.\n\n### Configuring the app settings\n\nWhen you get to the Configuration page, you would want to choose the `Nixpacks` build pack. It will automatically detect your stack and deploy a container for you.\n\nBefore we deploy, we want to add environment variables.\n\nNavigate to the environment variables page and enter the environment variables we used in the `.env` file.\n\nThere should be 4 variables to create:\n\n1. `SERVER_PORT`: the PORT you want to use\n2. `RESEND_API_KEY`: the key from Resend\n3. `EMAIL_TO`: the email address where you will receive the messages\n4. `ALLOWED_ORIGIN`: the domain that is only allowed to make requests\n\nIf you're running a server different from the front-end server, you'll need to use the `ALLOWED_ORIGIN` and enter your front-end domain value. This will help with CORS and allow your server to accept requests from your custom domain.\n\n![Coolify environment variables page](./_images/resend-email-server/coolify-environment-variables.png)\n\nThen back on the main configuration page, we want to add a Start command to run after our build finishes.\n\nAdd `NODE_ENV=production bun run start`\n\n![Coolify start command input](./_images/resend-email-server/coolify-start-command.png)\n\nThen in the Domain field, add a custom domain name. I have Coolify set up to use subdomains so here I'm using `https://test-email.billyle.dev`.\n\nSo my front-end application will now make POST requests to `https://test-email.billyle.dev/send-email`.\n\n![Coolify custom subdomain](./_images/resend-email-server/coolify-custom-subdomain.png)\n\nClick save and deploy your application.\n\nIf all is good, you should see a green status dot saying \"Healthy\".\n\n## Test the integration\n\nUpdate your front-end code where you're making the POST request.\n\n```typescript\nconst { message } = await fetch(\n  import.meta.env.PROD\n    ? \"https://test-email.billyle.dev/send-email\" // change this part here\n    : \"http://localhost:3000/send-email\",\n  {\n    method: \"POST\",\n    body: JSON.stringify(requestBody),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  },\n).then((res) => res.json());\n```\n\nFrom the Contact Form, enter all the details and click Submit.\n\n![contact form filled to test integration](./_images/resend-email-server/contact-form-test.png)\n\nIf it's successfully submitted, hopefully, you have a way of displaying to your users that it was successful. Here is my toast message that shows that.\n\n![Success Toast message](./_images/resend-email-server/toaster-message.png)\n\nFrom your Resend dashboard, you can all the emails that flowed through by checking the \"Emails\" page.\n\n![Resend Emails page](./_images/resend-email-server/resend-emails.png)\n\nI can see the \"Jane Doe\" email I sent earlier which is a good thing.\n\nAnd then in your inbox, you should see your test email as below.\n\n![Email inbox showing test message](./_images/resend-email-server/email-inbox.png)\n\nCongratulations! It's all working! Now you can deploy your front-end and do the same testing to see if it works in production.\n\n## Conclusion\n\nThat was quite a long post but I hope it gave you some ideas on how you too could implement an email server using Resend and deploying it somewhere live.\n\nThe Resend documentation is well-written as they have nearly every language support. You can easily copy and paste the code and test it from there.\n\nIf you need help with any of this setup, please use my [Contact Form](/#contact)!\n\nThere are some things I didn't include like fighting spam using honeypot techniques but that's above my current knowledge.\n\nWell, until then, thank you for reading, and have a good one.","src/content/posts/configure-a-contact-form-email-server-with-resend-for-your-website.md",[688,689,690,691,692,693,694,695,696,697,698,699,700,701,702],"./_images/resend-email-server/resend-homepage.png","./_images/resend-email-server/resend-domains-page.png","./_images/resend-email-server/resend-dns-records.png","./_images/resend-email-server/resend-api-keys-page.png","./_images/resend-email-server/resend-create-api-key.png","./_images/resend-email-server/contact-form-filled.png","./_images/resend-email-server/coolify-new-project.png","./_images/resend-email-server/coolify-new-resource.png","./_images/resend-email-server/coolify-environment-variables.png","./_images/resend-email-server/coolify-start-command.png","./_images/resend-email-server/coolify-custom-subdomain.png","./_images/resend-email-server/contact-form-test.png","./_images/resend-email-server/toaster-message.png","./_images/resend-email-server/resend-emails.png","./_images/resend-email-server/email-inbox.png","5e431d5a7bbe4dad",{"html":705,"metadata":706},"\u003Cp>Sending an email from a contact form is a necessary task for any front-end developer. Results from a search engine provide a few solutions for implementing this feature.\u003C/p>\n\u003Cp>They usually are:\u003C/p>\n\u003Col>\n\u003Cli>Use a form provider where you send the data to their API and they will forward the email to your inbox\u003C/li>\n\u003Cli>Use an email framework like Nodemailer\u003C/li>\n\u003Cli>Create an SMTP Server to relay emails\u003C/li>\n\u003C/ol>\n\u003Cp>The technical difficulty of implementing these features increases linearly.\u003C/p>\n\u003Cp>But there is one other solution I found that is least talked about but it’s quickly emerging and that is using \u003Ca href=\"https://resend.com/home\">Resend\u003C/a>.\u003C/p>\n\u003Csection>\u003Ch2 id=\"what-is-resend\">What is Resend?\u003C/h2>\u003Cp>Resend is a startup aimed at making sending emails easier for developers.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-homepage.png&#x22;,&#x22;alt&#x22;:&#x22;Resend homepage - hero section&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You can send transactional emails, start a marketing campaign, and create beautiful emails using React. And this all comes with a generous free tier.\u003C/p>\u003Cp>You can also add your custom domain where the “from” field will be sent from your domain.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"resend-domain-config-and-api-key\">Resend Domain Config and API Key\u003C/h2>\u003Cp>Sign up for Resend and verify your email. There are two steps we’re going to complete here. You can skip the Custom Domain instructions if that doesn’t apply to you.\u003C/p>\u003Csection>\u003Ch3 id=\"add-your-custom-domain\">Add your Custom Domain\u003C/h3>\u003Cp>Once you’re verified and logged into Resend, head over to the Domains page in the left panel. You should see a similar page to the one below.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-domains-page.png&#x22;,&#x22;alt&#x22;:&#x22;Resend Domains page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>I already have mine set up but click on ”+ Add Domain” and you’ll enter your Custom domain and a region.\u003C/p>\u003Cp>After that, you need to go to your DNS provider and enter all the DNS records that Resend provides you on the following page. I have Cloudflare as my DNS provider.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-dns-records.png&#x22;,&#x22;alt&#x22;:&#x22;Resend Domains DNS records&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>There will be a button for you to verify your DNS records. My recommendation is to wait for an hour and then try to verify that your DNS records are correctly configured with your provider.\u003C/p>\u003Cp>You should see all green “Verified” badges next to all the records you need to add.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"create-a-resend-api-key\">Create a Resend API Key\u003C/h3>\u003Cp>Once that’s done, head over to the API Keys page for Resend. Here I’m redacting my API Key for security purposes but I’ll run you through setting up a new API Key with your custom domain.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-api-keys-page.png&#x22;,&#x22;alt&#x22;:&#x22;Resend API Keys page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click on ”+ Create API Key” and a dialog will pop up.\u003C/p>\u003Col>\n\u003Cli>Enter a name for your API key.\u003C/li>\n\u003Cli>Select “Sending Access” under Permission since we’re only using this for sending emails.\u003C/li>\n\u003Cli>In the Domain dropdown, select your verified custom domain.\u003C/li>\n\u003Cli>Finish by clicking “Add”\u003C/li>\n\u003C/ol>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-create-api-key.png&#x22;,&#x22;alt&#x22;:&#x22;Resend Create API Key dialog&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>And that’s all! Now onto the coding part.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"setting-up-the-front-end\">Setting up the Front-end\u003C/h2>\u003Cp>I’m using AstroJS and Tailwind for styling, but you can use vanilla or another framework if you like. Either works since we just need an HTML and some frontend JavaScript to make POST requests.\u003C/p>\u003Cbr>\u003Csection>\u003Ch3 id=\"create-a-simple-form-element\">Create a simple Form element\u003C/h3>\u003Cp>You’ll need a basic contact form markup:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"astro\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"contact-form flex max-w-md flex-col space-y-4\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h-10 rounded px-3 ring-2 ring-neutral-300\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    placeholder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Name\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    required\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h-10 rounded px-3 ring-2 ring-neutral-300\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    placeholder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    required\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"message\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rounded px-3 py-2 ring-2 ring-neutral-300\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    rows\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{5}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    placeholder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"What would you like to say?\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    required\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">textarea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"flex justify-end space-x-2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rounded bg-slate-900 px-3 py-1 text-xl text-slate-50 dark:bg-slate-700 dark:ring-2 dark:ring-slate-50\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      Submit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003Csection>\u003Ch3 id=\"basic-form-event-handler\">Basic Form Event Handler\u003C/h3>\u003Cp>In a script tag, we’ll need to target the form and listen for events.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"astro\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> contactForm\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    contactsContainer.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLFormElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".contact-form\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (contactForm) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    contactForm.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      e.\u003C/span>\u003Cspan style=\"color:#B392F0\">preventDefault\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> formEl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e.target \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLFormElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> formData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> FormData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(formEl);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> requestBody\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        email: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"message\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(requestBody);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You might be using React or some other framework but the idea here is to prepare our front-end code to start sending requests.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"test-form-submission\">Test form submission\u003C/h3>\u003Cp>This is all we’re going to need for the time being. Fire up your frontend server then fill out your contact form and hit submit. You should see a log in the dev console with your input.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/contact-form-filled.png&#x22;,&#x22;alt&#x22;:&#x22;Contact form filled out&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"billy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"billy@example.com\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"message\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hi from contact form\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"prepare-the-back-end\">Prepare the Back-end\u003C/h2>\u003Cp>I’m using Bun, which is a JavaScript run-time like Node. You should get very similar results if you’re using Node and a web app framework like Express. If you need in that regard, feel free to reach out.\u003C/p>\u003Csection>\u003Ch3 id=\"create-a-env-file\">Create a \u003Ccode>.env\u003C/code> file\u003C/h3>\u003Cp>Create a \u003Ccode>.env\u003C/code> file. Use the template below since it is what I’m using these properties that will be used by our server.\u003C/p>\u003Cp>You’ll need to install the \u003Ca href=\"https://www.npmjs.com/package/dot-env\">dot-env\u003C/a> package if you’re using Node. The link will show you how to set it up.\u003C/p>\u003Cp>Be sure to enter your Resend API key here.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"dotenv\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">SERVER_PORT\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">3000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">RESEND_API_KEY\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;API Key from Resend>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">EMAIL_TO\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hi@billyle.dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">ALLOWED_ORIGIN\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">billyle.dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003Csection>\u003Ch3 id=\"install-the-resend-package\">Install the Resend package\u003C/h3>\u003Cp>We also need to install the \u003Ca href=\"https://www.npmjs.com/package/resend\">resend\u003C/a> package. We’ll instantiate a new Resend object and pass in our API key which will allow us to send our emails.\u003C/p>\u003Cp>This is what a basic setup would look like:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> resend\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Resend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">RESEND_API_KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resend.emails.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  from: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} &#x3C;${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">EMAIL_TO\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}>`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  to: [Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">EMAIL_TO\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  subject: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`New Message Received From ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  react: \u003C/span>\u003Cspan style=\"color:#B392F0\">EmailTemplate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ name, email, message }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003Csection>\u003Ch3 id=\"creating-our-bun-server\">Creating our Bun server\u003C/h3>\u003Cp>We’ll be creating our server next.\u003C/p>\u003Cp>If you’re unfamiliar with Bun, there is a web app framework called \u003Ca href=\"https://elysiajs.com/\">ElysiaJS\u003C/a> which is similar to ExpressJS. It comes with some cool features like validation which I’m using below.\u003C/p>\u003Cp>I’ve added some comments to explain a bit of what’s going on.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Elysia, t } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"elysia\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { cors } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@elysiajs/cors\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Resend } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"resend\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { EmailTemplate } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./email-templates/message\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston, { format } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"winston\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">errors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">combine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">colorize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">timestamp\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> format;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// logger for server logs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> logger\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.\u003C/span>\u003Cspan style=\"color:#B392F0\">createLogger\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"info\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  new\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> winston.transports.\u003C/span>\u003Cspan style=\"color:#B392F0\">Console\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    format: \u003C/span>\u003Cspan style=\"color:#B392F0\">combine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      errors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ stack: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      colorize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ all: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      timestamp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">level\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">timestamp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">stack\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          `[${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">timestamp\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}]:${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">level\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">message\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stack\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stack\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> resend\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Resend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">RESEND_API_KEY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> serverPort\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">SERVER_PORT\u003C/span>\u003Cspan style=\"color:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// creating Elysia instance\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Elysia\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    cors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      methods: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POST\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      origin: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">NODE_ENV\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"production\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ALLOWED_ORIGIN\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"localhost:4321\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"/send-email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">context\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> context.body;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // the part where we are sending emails\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resend.emails.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          from: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} &#x3C;${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Bun\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">env\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">EMAIL_TO\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}>`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          to: [Bun.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">EMAIL_TO\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          subject: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">`New Message Received From ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          react: \u003C/span>\u003Cspan style=\"color:#B392F0\">EmailTemplate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ name, email, message }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // error sending email, send back error status and message\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> context.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((error \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).statusCode, error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"New email received\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Success\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }), {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          headers: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"content-type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"application/json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // catch error and log it, respond to user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error \u003C/span>\u003Cspan style=\"color:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(error.message, error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> context.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Internal Server Error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // body must be of three properties: name, email, and message\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // validation happens as a middleware\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      body: t.\u003C/span>\u003Cspan style=\"color:#B392F0\">Object\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: t.\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          minLength: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Name must be at least 3 characters\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        email: t.\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          format: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Invalid email format\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: t.\u003C/span>\u003Cspan style=\"color:#B392F0\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          minLength: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          maxLength: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          error:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"Message should be at least 10 characters and max of 1024 characters\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // any errors that happens during validation will be logged\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: ({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#FFAB70\">method\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">headers\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, \u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">code\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> errorMessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `method=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">method\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} path=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">path\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} error=${\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          error\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">message\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        } body=${\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">body\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} userAgent=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">headers\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"user-agent\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(errorMessage);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // if any errors happen on the server itself, log the errors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">onError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#FFAB70\">method\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">headers\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }, \u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> errorMessage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `method=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">method\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} path=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">path\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} userAgent=${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">headers\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"user-agent\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    )\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(errorMessage, error);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">listen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(serverPort, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    logger.\u003C/span>\u003Cspan style=\"color:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Server starting on PORT: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">serverPort\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cbr>\u003Cp>In a nutshell, we created a server that is listening on Port 3000.\u003C/p>\u003Cp>Whenever a POST request is received to \u003Ccode>/send-email\u003C/code>, our middleware will validate the incoming body.\u003C/p>\u003Cp>If any validation errors occur, we log it on our server and also return it as a response object.\u003C/p>\u003Cp>Now, if everything seems okay, we’re going to attempt to send an email to Resend which in turn, will forward the email in our \u003Ccode>to:\u003C/code> field.\u003C/p>\u003Cp>Pretty simple right?\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"front-end-meets-back-end\">Front-end meets Back-end\u003C/h2>\u003Cp>Back on our front end, we’re going to make a fetch request to our server listening on Port 3000. My AstroJS server is running on PORT 4321 so make sure you distinguish the two.\u003C/p>\u003Cp>In the event listener on form submission, we’ll update our code to use \u003Ccode>fetch()\u003C/code> as a POST request to our email server.\u003C/p>\u003Cp>Please not the comments in the following code.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"astro\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> contactForm\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    contactsContainer.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLFormElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".contact-form\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (contactForm) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    contactForm.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      e.\u003C/span>\u003Cspan style=\"color:#B392F0\">preventDefault\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> formEl\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e.target \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLFormElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> formData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> FormData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(formEl);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> requestBody\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        email: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: formData.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"message\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PROD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://api.mycustomdomain.com/send-email\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> // host a production server with your custom domain\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"http://localhost:3000/send-email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POST\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            body: \u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(requestBody),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            headers: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">              \"Content-Type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"application/json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // store input elements in a variable for later use\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nameInput\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          formEl.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLInputElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'input[name=\"name\"]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> emailInput\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> formEl.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLInputElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          'input[name=\"email\"]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> messageInput\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> formEl.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLTextAreaElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          'textarea[name=\"message\"]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // remove all error classes from the inputs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        nameInput?.classList?.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ring-red-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        emailInput?.classList?.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ring-red-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        messageInput?.classList?.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"ring-red-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // store adjacent siblings to see if they are error divs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> errorName\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nameInput?.nextElementSibling \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> errorEmail\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> emailInput?.nextElementSibling \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> messageError\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> messageInput?.nextElementSibling \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // each if statement checks the input adjacent sibling and removes them from the DOM\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // if they have the `data-error=\"true\"` attribute\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (errorName?.dataset?.[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          errorName.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (errorEmail?.dataset?.[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          errorEmail.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (messageError?.dataset?.[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          messageError.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // create the error div with the data-error=\"true\" attribute\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> p\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"p\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          p.className \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"text-sm text-red-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          p.dataset[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"true\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          p.textContent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // insert the error divs after to the input element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        function\u003C/span>\u003Cspan style=\"color:#B392F0\"> insertErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">el\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> error\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> el?.nextSibling \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">error?.dataset?.[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"error\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> div\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            el?.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertAdjacentElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"afterend\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, div);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // create a toaster message upon success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createSuccessToaster\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> div\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"div\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> p\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"p\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          div.className \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"fixed bottom-8 right-8 p-4 bg-slate-200 dark:bg-slate-700 shadoow-lg rounded-md opacity-0 transition-opacity duration-300 border-t-4 border-emerald-400 border-solid\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          p.className \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"text-xl text-slate-800 dark:text-slate-100\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          p.textContent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Your message has been sent!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          div.\u003C/span>\u003Cspan style=\"color:#B392F0\">appendChild\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(p);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          document.body.\u003C/span>\u003Cspan style=\"color:#B392F0\">appendChild\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(div);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // using sleep to animate the toaster\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          await\u003C/span>\u003Cspan style=\"color:#B392F0\"> sleep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          div.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"opacity-0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          await\u003C/span>\u003Cspan style=\"color:#B392F0\"> sleep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          div.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"opacity-0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          await\u003C/span>\u003Cspan style=\"color:#B392F0\"> sleep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          div.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // message could be success or errors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        switch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (message) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Success\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // reset the form on success and show a toaster\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            formEl.\u003C/span>\u003Cspan style=\"color:#B392F0\">reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            createSuccessToaster\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Name must be at least 3 characters\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (nameInput) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">              insertErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(nameInput);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Invalid email format\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (emailInput) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">              insertErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(emailInput);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Message should be at least 10 characters and max of 1024 characters\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (messageInput) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">              insertErrorMessage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(messageInput);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">            // if message is received, log it out in the dev console\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">DEV\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Unknown message: \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (err) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // if anything else happens during sending, log it out in the dev console\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">DEV\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Alright, a lot going on here. Since I’m not using a front-end framework, I’m using vanilla JavaScript to manually manage the form state and show UI elements based on the server response.\u003C/p>\u003Cp>And now if you try to submit a form, you should see it hitting your server and show up in the server logs.\u003C/p>\u003Cp>Try submitting different values and see what kind of messages are generated.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"deploying-your-email-server\">Deploying your Email Server\u003C/h2>\u003Cp>Now it’s time to deploy the email server.\u003C/p>\u003Cp>First, you’re going to need a server. You can purchase a Virtual Private Server (VPS) or go through a managed service like Digital Ocean Droplets or Heroku.\u003C/p>\u003Cp>With the former services, it should be fairly easy since you’ll connect your GitHub account, point the server to your GitHub repository, and let it build/run for you. There are plenty of tutorials on this topic which I will not cover here.\u003C/p>\u003Cp>I have a Hetzner VPS with Coolify installed so I’ll be using this configuration. If you’re interested in this setup, please check out two of my other blog posts where I show you how to \u003Ca href=\"/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide\">self-host with Coolify\u003C/a> and \u003Ca href=\"posts/adding-github-pull-request-preview-deployments-with-coolify\">add Github preview deployments to Coolify\u003C/a>.\u003C/p>\u003Cp>In the Coolify admin page, create a New Project as usual.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/coolify-new-project.png&#x22;,&#x22;alt&#x22;:&#x22;Creating a new project in Coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then select the “Production” environment on the following page.\u003C/p>\u003Csection>\u003Ch3 id=\"adding-a-resource\">Adding a Resource\u003C/h3>\u003Cp>This next step will depend if you have Coolify integrated with GitHub or not. With a GitHub integration, Coolify can automatically deploy a new build whenever you make changes to your main branch.\u003C/p>\u003Cp>If you don’t have this configured yet, don’t fret. You can just copy the GitHub URL to the email server repository but you have to manually redeploy anytime you make a change to see an effect.\u003C/p>\u003Cp>Go ahead and add a new Resource and you will see this next page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/coolify-new-resource.png&#x22;,&#x22;alt&#x22;:&#x22;Creating a new resource in Coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>From there keep selecting the server you want to host it from, and then the destination.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"configuring-the-app-settings\">Configuring the app settings\u003C/h3>\u003Cp>When you get to the Configuration page, you would want to choose the \u003Ccode>Nixpacks\u003C/code> build pack. It will automatically detect your stack and deploy a container for you.\u003C/p>\u003Cp>Before we deploy, we want to add environment variables.\u003C/p>\u003Cp>Navigate to the environment variables page and enter the environment variables we used in the \u003Ccode>.env\u003C/code> file.\u003C/p>\u003Cp>There should be 4 variables to create:\u003C/p>\u003Col>\n\u003Cli>\u003Ccode>SERVER_PORT\u003C/code>: the PORT you want to use\u003C/li>\n\u003Cli>\u003Ccode>RESEND_API_KEY\u003C/code>: the key from Resend\u003C/li>\n\u003Cli>\u003Ccode>EMAIL_TO\u003C/code>: the email address where you will receive the messages\u003C/li>\n\u003Cli>\u003Ccode>ALLOWED_ORIGIN\u003C/code>: the domain that is only allowed to make requests\u003C/li>\n\u003C/ol>\u003Cp>If you’re running a server different from the front-end server, you’ll need to use the \u003Ccode>ALLOWED_ORIGIN\u003C/code> and enter your front-end domain value. This will help with CORS and allow your server to accept requests from your custom domain.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/coolify-environment-variables.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify environment variables page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then back on the main configuration page, we want to add a Start command to run after our build finishes.\u003C/p>\u003Cp>Add \u003Ccode>NODE_ENV=production bun run start\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/coolify-start-command.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify start command input&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then in the Domain field, add a custom domain name. I have Coolify set up to use subdomains so here I’m using \u003Ccode>https://test-email.billyle.dev\u003C/code>.\u003C/p>\u003Cp>So my front-end application will now make POST requests to \u003Ccode>https://test-email.billyle.dev/send-email\u003C/code>.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/coolify-custom-subdomain.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify custom subdomain&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click save and deploy your application.\u003C/p>\u003Cp>If all is good, you should see a green status dot saying “Healthy”.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"test-the-integration\">Test the integration\u003C/h2>\u003Cp>Update your front-end code where you’re making the POST request.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">message\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PROD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"https://test-email.billyle.dev/send-email\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> // change this part here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"http://localhost:3000/send-email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POST\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    body: \u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(requestBody),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    headers: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"Content-Type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"application/json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>From the Contact Form, enter all the details and click Submit.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/contact-form-test.png&#x22;,&#x22;alt&#x22;:&#x22;contact form filled to test integration&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If it’s successfully submitted, hopefully, you have a way of displaying to your users that it was successful. Here is my toast message that shows that.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/toaster-message.png&#x22;,&#x22;alt&#x22;:&#x22;Success Toast message&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>From your Resend dashboard, you can all the emails that flowed through by checking the “Emails” page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/resend-emails.png&#x22;,&#x22;alt&#x22;:&#x22;Resend Emails page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>I can see the “Jane Doe” email I sent earlier which is a good thing.\u003C/p>\u003Cp>And then in your inbox, you should see your test email as below.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/resend-email-server/email-inbox.png&#x22;,&#x22;alt&#x22;:&#x22;Email inbox showing test message&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Congratulations! It’s all working! Now you can deploy your front-end and do the same testing to see if it works in production.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\u003Cp>That was quite a long post but I hope it gave you some ideas on how you too could implement an email server using Resend and deploying it somewhere live.\u003C/p>\u003Cp>The Resend documentation is well-written as they have nearly every language support. You can easily copy and paste the code and test it from there.\u003C/p>\u003Cp>If you need help with any of this setup, please use my \u003Ca href=\"/#contact\">Contact Form\u003C/a>!\u003C/p>\u003Cp>There are some things I didn’t include like fighting spam using honeypot techniques but that’s above my current knowledge.\u003C/p>\u003Cp>Well, until then, thank you for reading, and have a good one.\u003C/p>\u003C/section>",{"headings":707,"imagePaths":760,"frontmatter":673},[708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759],{"depth":230,"slug":709,"text":710},"what-is-resend","What is Resend?",{"depth":230,"slug":712,"text":713},"resend-domain-config-and-api-key","Resend Domain Config and API Key",{"depth":234,"slug":715,"text":716},"add-your-custom-domain","Add your Custom Domain",{"depth":234,"slug":718,"text":719},"create-a-resend-api-key","Create a Resend API Key",{"depth":230,"slug":721,"text":722},"setting-up-the-front-end","Setting up the Front-end",{"depth":234,"slug":724,"text":725},"create-a-simple-form-element","Create a simple Form element",{"depth":234,"slug":727,"text":728},"basic-form-event-handler","Basic Form Event Handler",{"depth":234,"slug":730,"text":731},"test-form-submission","Test form submission",{"depth":230,"slug":733,"text":734},"prepare-the-back-end","Prepare the Back-end",{"depth":234,"slug":736,"text":737},"create-a-env-file","Create a .env file",{"depth":234,"slug":739,"text":740},"install-the-resend-package","Install the Resend package",{"depth":234,"slug":742,"text":743},"creating-our-bun-server","Creating our Bun server",{"depth":230,"slug":745,"text":746},"front-end-meets-back-end","Front-end meets Back-end",{"depth":230,"slug":748,"text":749},"deploying-your-email-server","Deploying your Email Server",{"depth":234,"slug":751,"text":752},"adding-a-resource","Adding a Resource",{"depth":234,"slug":754,"text":755},"configuring-the-app-settings","Configuring the app settings",{"depth":230,"slug":757,"text":758},"test-the-integration","Test the integration",{"depth":230,"slug":289,"text":290},[688,689,690,691,692,693,694,695,696,697,698,699,700,701,702],"configure-a-contact-form-email-server-with-resend-for-your-website.md","my-content-creation-in-its-infancy",{"id":762,"data":764,"body":773,"filePath":774,"digest":775,"rendered":776,"legacyId":790},{"title":765,"pubDate":766,"description":767,"author":768,"image":769,"tags":772,"draft":211,"readingTime":342,"lastDateModified":343},"My Content Creation In Its Infancy",["Date","2024-02-22T00:00:00.000Z"],"Embarking on something new can be both frightening and exciting. In my case, it's a mix of both. Creating content involves putting myself out there for the world to see. I'm starting small with the hope that it will blossom into a consistent flow of creativity. In this post, I share my thoughts on the reasons behind the existence of this blog.",{"name":203,"email":204},{"url":770,"alt":771,"className":208},"https://images.unsplash.com/photo-1496055401924-5e7fdc885742","aerial view of highway crossings",[307,581],"After years of procrastination and hesitation, my blog is _finally_ online. It's been a long time coming ever since I began to learn how to code in 2015.\n\nIn that timeframe, I have used several blogging tools, ranging from easy to difficult - WordPress, GatsbyJS, and, daringly, Hugo (I had no Golang experience at the time). I hadn't committed to any because I was still exploring programming in general.\n\nWhen Astro landed on my radar, I chose it for many reasons. One of the most convincing was that it is a static site generator with the promise of shipping minimal JavaScript.\n\nIts simplicity and versatility are by far the most advanced I've seen in a static site generator. I'm very glad that I can blog with such an amazing tool. Thank you, Astro team, for delivering a pleasant experience.\n\n## So why blog now?\n\nIt's 2024, and artificial intelligence is running rampant. People's attention spans are getting shorter due to information overload, and almost every market is saturated with regurgitated content.\n\nWho dares to start a blog in this day and age?\n\nAs someone who fancies an easygoing lifestyle, I couldn't care less about this environment. The joy and calmness that result from writing are therapeutic.\n\nI'm mostly alone with my thoughts and equipped with a blinking cursor for the majority of my day. What better way could I lay out these unspoken feelings and thoughts into a post other than coding?\n\n## Uncharted territory\n\nI'm discovering what it is to become a creator and how difficult navigating the path is, even when there are plenty of guides on it. That's why blogging, I think, is the easiest entry of them all.\n\nRe-engagement can be low, and there is no significant time-sink into editing. The hard part is coming up with ideas and putting in the time to do the work.\n\nSlowly, but surely, I'll refine my process as I author dozens more posts like this one while also building new features to supplement your reading.\n\n## What's current with me\n\nI'm currently involved in building a startup as a solo founder in hopes of generating income. The world of startups is alien to me, and that is why I'm starting to blog. I want to document my journey in a safe environment.\n\nI don't know startup lingo. Furthermore, I don't have a social network. And I surely don't know how to launch a product. To sum it all up, I don't know what I'm doing and am just trying things out until something sticks.\n\nSo hopefully, I'll be able to reveal to you cool articles, techniques, products, and more that I think you might be interested in along the way.\n\nIf you made it this far, thank you for taking the time to read this. And if you happen to enjoy this or encourage me to go on, please reach out. I would love to hear any feedback or advice you have to offer.\n\nWith that, I bid you farewell until next time.","src/content/posts/my-content-creation-in-its-infancy.md","7cdcafbf0ab6d773",{"html":777,"metadata":778},"\u003Cp>After years of procrastination and hesitation, my blog is \u003Cem>finally\u003C/em> online. It’s been a long time coming ever since I began to learn how to code in 2015.\u003C/p>\n\u003Cp>In that timeframe, I have used several blogging tools, ranging from easy to difficult - WordPress, GatsbyJS, and, daringly, Hugo (I had no Golang experience at the time). I hadn’t committed to any because I was still exploring programming in general.\u003C/p>\n\u003Cp>When Astro landed on my radar, I chose it for many reasons. One of the most convincing was that it is a static site generator with the promise of shipping minimal JavaScript.\u003C/p>\n\u003Cp>Its simplicity and versatility are by far the most advanced I’ve seen in a static site generator. I’m very glad that I can blog with such an amazing tool. Thank you, Astro team, for delivering a pleasant experience.\u003C/p>\n\u003Csection>\u003Ch2 id=\"so-why-blog-now\">So why blog now?\u003C/h2>\u003Cp>It’s 2024, and artificial intelligence is running rampant. People’s attention spans are getting shorter due to information overload, and almost every market is saturated with regurgitated content.\u003C/p>\u003Cp>Who dares to start a blog in this day and age?\u003C/p>\u003Cp>As someone who fancies an easygoing lifestyle, I couldn’t care less about this environment. The joy and calmness that result from writing are therapeutic.\u003C/p>\u003Cp>I’m mostly alone with my thoughts and equipped with a blinking cursor for the majority of my day. What better way could I lay out these unspoken feelings and thoughts into a post other than coding?\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"uncharted-territory\">Uncharted territory\u003C/h2>\u003Cp>I’m discovering what it is to become a creator and how difficult navigating the path is, even when there are plenty of guides on it. That’s why blogging, I think, is the easiest entry of them all.\u003C/p>\u003Cp>Re-engagement can be low, and there is no significant time-sink into editing. The hard part is coming up with ideas and putting in the time to do the work.\u003C/p>\u003Cp>Slowly, but surely, I’ll refine my process as I author dozens more posts like this one while also building new features to supplement your reading.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"whats-current-with-me\">What’s current with me\u003C/h2>\u003Cp>I’m currently involved in building a startup as a solo founder in hopes of generating income. The world of startups is alien to me, and that is why I’m starting to blog. I want to document my journey in a safe environment.\u003C/p>\u003Cp>I don’t know startup lingo. Furthermore, I don’t have a social network. And I surely don’t know how to launch a product. To sum it all up, I don’t know what I’m doing and am just trying things out until something sticks.\u003C/p>\u003Cp>So hopefully, I’ll be able to reveal to you cool articles, techniques, products, and more that I think you might be interested in along the way.\u003C/p>\u003Cp>If you made it this far, thank you for taking the time to read this. And if you happen to enjoy this or encourage me to go on, please reach out. I would love to hear any feedback or advice you have to offer.\u003C/p>\u003Cp>With that, I bid you farewell until next time.\u003C/p>\u003C/section>",{"headings":779,"imagePaths":789,"frontmatter":764},[780,783,786],{"depth":230,"slug":781,"text":782},"so-why-blog-now","So why blog now?",{"depth":230,"slug":784,"text":785},"uncharted-territory","Uncharted territory",{"depth":230,"slug":787,"text":788},"whats-current-with-me","What’s current with me",[],"my-content-creation-in-its-infancy.md","creating-custom-table-of-contents-for-astro-content-collections",{"id":791,"data":793,"body":803,"filePath":804,"assetImports":805,"digest":808,"rendered":809,"legacyId":829},{"title":794,"pubDate":795,"description":796,"author":797,"image":798,"tags":801,"draft":211,"readingTime":802,"lastDateModified":343},"Creating Custom Table of Contents for Astro Content Collections",["Date","2024-03-13T00:00:00.000Z"],"There isn't a well-documented source on how you can create a custom Table of Contents from your markdown with the Astro Content Collection API. The 'remark-toc' plugin does the job but offers little control over where you can place it. In this post, I'll show you how I created my ToC for my blog.",{"name":203,"email":204},{"url":799,"alt":800,"className":208},"https://images.unsplash.com/photo-1529473814998-077b4fec6770","book collections sorted by color on a bookshelf",[307,581,582],"6 min read","Having a Table of Contents (ToC) for your blog is nice because it allows users to see an overview of your content and provides a quick way to navigate between sections. To do this in Astro with the Content Collections API, there's a bit of legwork, but the results are satisfying. But first, let's talk about the issues I ran into.\n\n## The problem\n\nI tried to do this with the plugin, **'remark-toc'**, which is mentioned in the Astro documentation. What I didn't like about it is that if I wanted to include a ToC, I would have to manually add it to the top of all my `.md` files.\n\n![remark-toc display output on the blog post](./_images/creating-toc/remark-toc-static.png)\n\nAnother note is that wherever I included it in the markdown, the ToC sits statically and to style it, I would have to target the `id` and fight my existing blog layout.\n\n![using remark-toc in a markdown file](./_images/creating-toc/remark-toc-md.png)\n\nThis is not ideal for me. I had to figure out a better way to do this.\n\n## Retrieving all headers of a markdown\n\nIn the official documentation, there are [two ways you can get all the headings](https://docs.astro.build/en/guides/markdown-content/#exported-properties) of your blog posts. The two ways are when you're importing a `.md` into a `.astro` file or using the `Astro.glob()` function. Neither of those was valid in my case because I'm using the Content Collections API.\n\nBuried in the documentation, I found that you can get the [headings from a RenderedEntry](https://docs.astro.build/en/reference/api-reference/#collection-entry-type) if you're using the Content Collections API.\n\nInside of my `/src/pages/posts/[...slug].astro` where I am pre-rendering my blog posts using `getStaticPaths()`, I have a utility function that pulls all my published blog posts into a collection. From there, I extract the headings using a `Promise.all()`.\n\n```typescript\n---\nimport BlogLayout from \"../../layouts/BlogLayout.astro\";\nimport { allPosts } from \"@utils/getCollection\";\nimport type { GetStaticPaths } from \"astro\";\n\nexport const getStaticPaths = (async () => {\n  const headings = await Promise.all(\n    allPosts.map((entry) => entry.render().then((data) => data.headings)),\n  );\n\n  const posts = allPosts.map((entry, index) => {\n    return {\n      params: { slug: entry.slug },\n      props: { entry, headings: headings[index] },\n    };\n  });\n\n  return posts;\n}) satisfies GetStaticPaths;\n\nconst { entry, headings } = Astro.props;\nconst { Content } = await entry.render();\n---\n\n\u003CBlogLayout {...entry.data} {headings}>\n  \u003CContent />\n\u003C/BlogLayout>\n```\n\nFor reference, inside an Astro Collection, you have a list of Entries. These Entries have a `render()` method that compiles the `.md` file for rendering. It also returns a property called `headings` which I used here to collect all the headings in a given markdown.\n\nHere is the shape of that:\n\n```typescript\n// headings shape\nconst headings: {\n  depth: number;\n  text: string;\n  slug: string;\n}[];\n```\n\nWith that, I returned it inside the props object which can be extracted from `Astro.props`.\n\n## Creating the heading hierarchy\n\nI have all the headings passed down to my `BlogLayout` component, and now I can use it. The first thing I need to do is make sure that there is a hierarchy of headings so that the ToC properly indents the headings.\n\nI tried doing this on my own with a recursive function but didn't have too much success. Luckily, I came across this [blog by Reza Zahedi](https://rezahedi.dev/blog/create-table-of-contents-in-astro-and-sectionize-the-markdown-content#retrieving-the-headings-prop-in-astro-layouts-or-components) that showed me a good foundation to start with.\n\nWith the ~~stolen~~ copied code, I noticed that the nesting only allowed one list of subheadings. So if a heading has a depth of 2, and two headings succeeding that is of depth of 3 and 4 respectively, then it outputs something like this:\n\n```typescript\nconst nestedHeadings = [\n  {\n    depth: 2,\n    text: \"My Heading\",\n    slug: \"my-heading\",\n    subheadings: [\n      {\n        depth: 3,\n        text: \"My Subheading 1\",\n        slug: \"my-subheading-1\",\n      },\n      {\n        depth: 4,\n        text: \"My Subheading 2\",\n        slug: \"my-subheading-2\",\n      },\n    ],\n  },\n];\n```\n\nI was okay with this since I do not want the ToC to get carried away with indentations. I wanted to prevent from writing any headings greater than 3, so I added a guard to throw an error if I did include one by accident.\n\nInside my `TOCHeading.astro` component, I'm exporting an interface:\n\n```typescript\nimport type { MarkdownHeading } from \"astro\";\nexport interface HeadingHierarchy extends MarkdownHeading {\n  subheadings: HeadingHierarchy[];\n}\n```\n\nInside my `BlogLayout.astro` component:\n\n```typescript\nimport type { HeadingHierarchy } from \"@ui/components/TOCHeading.astro\";\nimport type { MarkdownHeading } from \"astro\";\n\nconst { headings } = Astro.props;\n\nfunction createHeadingHierarchy(headings: MarkdownHeading[]) {\n  const topLevelHeadings: HeadingHierarchy[] = [];\n\n  headings.forEach((heading) => {\n    if (heading.depth > 3) {\n      throw Error(\n        `Depths greater than 3 not allowed:\\n${JSON.stringify(heading, null, 2)}`,\n      );\n    }\n    const h = {\n      ...heading,\n      subheadings: [],\n    };\n\n    if (h.depth === 2) {\n      topLevelHeadings.push(h);\n    } else {\n      let parent = topLevelHeadings[topLevelHeadings.length - 1];\n      if (parent) {\n        parent.subheadings.push(h);\n      }\n    }\n  });\n\n  return topLevelHeadings;\n}\n\nconst toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);\nconst hasToC = toc.length > 1;\n```\n\nI'm using a variable called `hasToC` since in some cases I have a short blog post with only one heading, and it doesn't make sense to show the ToC. I use this variable to conditionally render the ToC and the appropriate layout.\n\n## Rendering the ToC\n\nRendering is fairly straightforward in Astro. I have a `TOCHeading.astro` component that I found in the other blog post and made minor adjustments like giving it types and such.\n\nIf you're going to use a sticky ToC, be sure that the parent component has a `position: relative` and that there is no `overflow` property on it. If your parent is a `flex` or `grid` parent, you need to wrap your `position: sticky` ToC with a container so that it will properly work.\n\n```jsx\n\u003Csection class={`${hasToC ? \"mx-auto max-w-7xl lg:grid lg:grid-cols-4\" : \"\"}`}>\n  {hasToC && (\n    \u003Cdiv class=\"prose relative mx-auto px-4 dark:prose-invert xl:pt-10 2xl:px-0\">\n      \u003Cnav class=\"xl:sticky xl:top-20\">\n        \u003Ch2 class=\"text-emerald-400\">Table of Contents\u003C/h2>\n        \u003Cul>\n          {toc.map((heading) => (\n            \u003CTOCHeading heading={heading} />\n          ))}\n        \u003C/ul>\n      \u003C/nav>\n    \u003C/div>\n  )}\n\n  \u003Carticle\n    class={`prose mx-auto px-4 py-10 dark:prose-invert sm:prose-lg lg:prose-xl\n            prose-h1:font-vidaloka prose-code:before:hidden\n            prose-code:after:hidden sm:py-20\n            ${hasToC ? \"lg:col-span-3\" : \"\"}\n        `}\n  >\n    \u003Ch1>{title}\u003C/h1>\n    \u003Cslot />\n  \u003C/article>\n\u003C/section>\n```\n\n## The results\n\nAs you can see, my Table of Contents appears on the left-hand side. Now you can easily move between sections as you read!\n\nFor now, I'm only supporting the sticky ToC for desktops as I haven't found a good UI for tablets and mobile devices yet.\n\nI guess all that's left to do is highlight the ToC heading that is currently being viewed, but I'll do that some other time.\n\nI hope that was a bit helpful if you're trying to add a ToC for your Astro website if you're using the Content Collections API.\n\nWell, thanks for reading and I hope you have a good one.","src/content/posts/creating-custom-table-of-contents-for-astro-content-collections.md",[806,807],"./_images/creating-toc/remark-toc-static.png","./_images/creating-toc/remark-toc-md.png","69647b391d7a4456",{"html":810,"metadata":811},"\u003Cp>Having a Table of Contents (ToC) for your blog is nice because it allows users to see an overview of your content and provides a quick way to navigate between sections. To do this in Astro with the Content Collections API, there’s a bit of legwork, but the results are satisfying. But first, let’s talk about the issues I ran into.\u003C/p>\n\u003Csection>\u003Ch2 id=\"the-problem\">The problem\u003C/h2>\u003Cp>I tried to do this with the plugin, \u003Cstrong>‘remark-toc’\u003C/strong>, which is mentioned in the Astro documentation. What I didn’t like about it is that if I wanted to include a ToC, I would have to manually add it to the top of all my \u003Ccode>.md\u003C/code> files.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/creating-toc/remark-toc-static.png&#x22;,&#x22;alt&#x22;:&#x22;remark-toc display output on the blog post&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Another note is that wherever I included it in the markdown, the ToC sits statically and to style it, I would have to target the \u003Ccode>id\u003C/code> and fight my existing blog layout.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/creating-toc/remark-toc-md.png&#x22;,&#x22;alt&#x22;:&#x22;using remark-toc in a markdown file&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>This is not ideal for me. I had to figure out a better way to do this.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"retrieving-all-headers-of-a-markdown\">Retrieving all headers of a markdown\u003C/h2>\u003Cp>In the official documentation, there are \u003Ca href=\"https://docs.astro.build/en/guides/markdown-content/#exported-properties\">two ways you can get all the headings\u003C/a> of your blog posts. The two ways are when you’re importing a \u003Ccode>.md\u003C/code> into a \u003Ccode>.astro\u003C/code> file or using the \u003Ccode>Astro.glob()\u003C/code> function. Neither of those was valid in my case because I’m using the Content Collections API.\u003C/p>\u003Cp>Buried in the documentation, I found that you can get the \u003Ca href=\"https://docs.astro.build/en/reference/api-reference/#collection-entry-type\">headings from a RenderedEntry\u003C/a> if you’re using the Content Collections API.\u003C/p>\u003Cp>Inside of my \u003Ccode>/src/pages/posts/[...slug].astro\u003C/code> where I am pre-rendering my blog posts using \u003Ccode>getStaticPaths()\u003C/code>, I have a utility function that pulls all my published blog posts into a collection. From there, I extract the headings using a \u003Ccode>Promise.all()\u003C/code>.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> BlogLayout \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"../../layouts/BlogLayout.astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { allPosts } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@utils/getCollection\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { GetStaticPaths } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> getStaticPaths\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headings\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">all\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    allPosts.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.headings)),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> posts\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> allPosts.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      params: { slug: entry.slug },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      props: { entry, headings: headings[index] },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> posts;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}) \u003C/span>\u003Cspan style=\"color:#F97583\">satisfies\u003C/span>\u003Cspan style=\"color:#B392F0\"> GetStaticPaths\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">entry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">headings\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Astro.props;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">Content\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">---\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">BlogLayout {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">entry.data} {headings}\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Content \u003C/span>\u003Cspan style=\"color:#F97583\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">BlogLayout\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>For reference, inside an Astro Collection, you have a list of Entries. These Entries have a \u003Ccode>render()\u003C/code> method that compiles the \u003Ccode>.md\u003C/code> file for rendering. It also returns a property called \u003Ccode>headings\u003C/code> which I used here to collect all the headings in a given markdown.\u003C/p>\u003Cp>Here is the shape of that:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// headings shape\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> headings\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  depth\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  text\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  slug\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}[];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>With that, I returned it inside the props object which can be extracted from \u003Ccode>Astro.props\u003C/code>.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"creating-the-heading-hierarchy\">Creating the heading hierarchy\u003C/h2>\u003Cp>I have all the headings passed down to my \u003Ccode>BlogLayout\u003C/code> component, and now I can use it. The first thing I need to do is make sure that there is a hierarchy of headings so that the ToC properly indents the headings.\u003C/p>\u003Cp>I tried doing this on my own with a recursive function but didn’t have too much success. Luckily, I came across this \u003Ca href=\"https://rezahedi.dev/blog/create-table-of-contents-in-astro-and-sectionize-the-markdown-content#retrieving-the-headings-prop-in-astro-layouts-or-components\">blog by Reza Zahedi\u003C/a> that showed me a good foundation to start with.\u003C/p>\u003Cp>With the \u003Cdel>stolen\u003C/del> copied code, I noticed that the nesting only allowed one list of subheadings. So if a heading has a depth of 2, and two headings succeeding that is of depth of 3 and 4 respectively, then it outputs something like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nestedHeadings\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    depth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    text: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My Heading\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    slug: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my-heading\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    subheadings: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        depth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        text: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My Subheading 1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        slug: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my-subheading-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        depth: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        text: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My Subheading 2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        slug: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my-subheading-2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I was okay with this since I do not want the ToC to get carried away with indentations. I wanted to prevent from writing any headings greater than 3, so I added a guard to throw an error if I did include one by accident.\u003C/p>\u003Cp>Inside my \u003Ccode>TOCHeading.astro\u003C/code> component, I’m exporting an interface:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { MarkdownHeading } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#B392F0\"> HeadingHierarchy\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> MarkdownHeading\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  subheadings\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HeadingHierarchy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Inside my \u003Ccode>BlogLayout.astro\u003C/code> component:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { HeadingHierarchy } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@ui/components/TOCHeading.astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { MarkdownHeading } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"astro\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">headings\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Astro.props;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createHeadingHierarchy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">headings\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> MarkdownHeading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> topLevelHeadings\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HeadingHierarchy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  headings.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">heading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (heading.depth \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        `Depths greater than 3 not allowed:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">${\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">stringify\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">heading\u003C/span>\u003Cspan style=\"color:#9ECBFF\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#9ECBFF\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> h\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">heading,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      subheadings: [],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (h.depth \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      topLevelHeadings.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(h);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> parent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> topLevelHeadings[topLevelHeadings.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (parent) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        parent.subheadings.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(h);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> topLevelHeadings;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> toc\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HeadingHierarchy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> createHeadingHierarchy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(headings \u003C/span>\u003Cspan style=\"color:#F97583\">??\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> hasToC\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> toc.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> >\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I’m using a variable called \u003Ccode>hasToC\u003C/code> since in some cases I have a short blog post with only one heading, and it doesn’t make sense to show the ToC. I use this variable to conditionally render the ToC and the appropriate layout.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"rendering-the-toc\">Rendering the ToC\u003C/h2>\u003Cp>Rendering is fairly straightforward in Astro. I have a \u003Ccode>TOCHeading.astro\u003C/code> component that I found in the other blog post and made minor adjustments like giving it types and such.\u003C/p>\u003Cp>If you’re going to use a sticky ToC, be sure that the parent component has a \u003Ccode>position: relative\u003C/code> and that there is no \u003Ccode>overflow\u003C/code> property on it. If your parent is a \u003Ccode>flex\u003C/code> or \u003Ccode>grid\u003C/code> parent, you need to wrap your \u003Ccode>position: sticky\u003C/code> ToC with a container so that it will properly work.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hasToC\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"mx-auto max-w-7xl lg:grid lg:grid-cols-4\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {hasToC \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"prose relative mx-auto px-4 dark:prose-invert xl:pt-10 2xl:px-0\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"xl:sticky xl:top-20\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-emerald-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Table of Contents&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {toc.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">heading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">TOCHeading\u003C/span>\u003Cspan style=\"color:#B392F0\"> heading\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{heading} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    class\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`prose mx-auto px-4 py-10 dark:prose-invert sm:prose-lg lg:prose-xl\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            prose-h1:font-vidaloka prose-code:before:hidden\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            prose-code:after:hidden sm:py-20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">hasToC\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"lg:col-span-3\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  >\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">slot\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\n\u003Csection>\u003Ch2 id=\"the-results\">The results\u003C/h2>\u003Cp>As you can see, my Table of Contents appears on the left-hand side. Now you can easily move between sections as you read!\u003C/p>\u003Cp>For now, I’m only supporting the sticky ToC for desktops as I haven’t found a good UI for tablets and mobile devices yet.\u003C/p>\u003Cp>I guess all that’s left to do is highlight the ToC heading that is currently being viewed, but I’ll do that some other time.\u003C/p>\u003Cp>I hope that was a bit helpful if you’re trying to add a ToC for your Astro website if you’re using the Content Collections API.\u003C/p>\u003Cp>Well, thanks for reading and I hope you have a good one.\u003C/p>\u003C/section>",{"headings":812,"imagePaths":828,"frontmatter":793},[813,816,819,822,825],{"depth":230,"slug":814,"text":815},"the-problem","The problem",{"depth":230,"slug":817,"text":818},"retrieving-all-headers-of-a-markdown","Retrieving all headers of a markdown",{"depth":230,"slug":820,"text":821},"creating-the-heading-hierarchy","Creating the heading hierarchy",{"depth":230,"slug":823,"text":824},"rendering-the-toc","Rendering the ToC",{"depth":230,"slug":826,"text":827},"the-results","The results",[806,807],"creating-custom-table-of-contents-for-astro-content-collections.md","registering-for-apple-and-google-developer-accounts",{"id":830,"data":832,"body":841,"filePath":842,"assetImports":843,"digest":852,"rendered":853,"legacyId":876},{"title":833,"pubDate":834,"description":835,"author":836,"image":837,"tags":840,"draft":211,"readingTime":342,"lastDateModified":343},"Registering for Apple and Google Developer Accounts",["Date","2024-04-23T00:00:00.000Z"],"Last week I said I was going to form an LLC but decided not to. I finally took the plunge into mobile development and signed up for Apple and Google Developer Accounts under my name. I believe the web is still the most accessible platform there is out there but something about developing for mobile is appealing.",{"name":203,"email":204},{"url":838,"alt":839,"className":208},"https://images.unsplash.com/photo-1574417836112-fda6a03dae97","a slice of lemon dropped into a body of water",[307,379,380,513],"If you read my previous blog, I said I was going to form an LLC. I decided not to because I felt it was too early in my journey.\n\nMy goal right now is to build mobile apps. The problem is that I can't publish my projects.\n\nSo I signed up for Apple and Google Developer Accounts and wanted to share my research and experience.\n\n## Platform pros and cons\n\nWhen it comes to comparing Apple and Android for development, I found these metrics important for me as a developer.\n\n|                                   | Apple                        | Google              |\n| --------------------------------- | ---------------------------- | ------------------- |\n| 🪧 Developer Account Registration | $99 yearly                   | $25 one-time fee    |\n| 📊 OS Market Share                | 27.58% **(Q3 '23)**          | 71.72% **(Q3 '23)** |\n| 📋 App Reviewal Process           | ~ 48 hours                   | ~ 2 hours           |\n| 💰 Revenue Share Model            | 70% to dev / 30% to platform | -                   |\n| 💻 Programming Language           | Swift                        | Java, Kotlin        |\n| 📱 Emulator Support               | iOS devices, Andriod         | Android             |\n\nApple costs a lot more than Google year-over-year and the strict review guidelines can slow iteration cycles but offer consumers higher-quality products.\n\nFor Google, you can iterate and validate ideas much more quickly.\n\nYou can also see that Apple owns less of the market share than Google but Apple generates more revenue because people are willing to pay more.\n\nI didn't want to limit myself to one platform so I chose to target both platforms using Flutter as my tool of choice.\n\n## Registration Experience\n\nOn both platforms, the registration was pretty straightforward.\n\nThere are a few screens where they will ask you what kind of app you're building.\n\nThe following screenshots are redacted and incomplete but it should give you an idea of what the process would look like.\n\n### Apple Developer Program\n\nTo get started with the [Apple Developer Program](https://developer.apple.com/programs/enroll/), you will start on their enrollment page.\n\n![Apple enrollment page](./_images/developer-account-registrations/apple-enrollment-page.jpeg)\nClick \"Enroll\" and you'll be asked to sign in. After signing in, you'll see these next few pages.\n\n![Apple enrollment - continue to web](./_images/developer-account-registrations/apple-enrollment-web.jpeg)\n\n![Apple account type](./_images/developer-account-registrations/apple-enrollment-type.jpeg)\n\nI chose the Sole Proprietor account since I am not at the point where I need to form an LLC.\n![Apple enrollment purchase page](./_images/developer-account-registrations/apple-enrollment-purchase.jpeg)\nThis should be the last step but if not, you'll have to enter your payment details.\n\n### Google Play Console\n\nThe same goes for [Google Play Console](https://developer.android.com/distribute/console). Sign in and follow the flow.\n\nHere are some screenshots from the Google Play Console's registration.\n\n![Google Play Console - Get Started page](./_images/developer-account-registrations/google-play-get-started.jpeg)\n\n![Requirements to create a Google Play Developer account](./_images/developer-account-registrations/google-play-requirements.jpeg)\n\n![Creating a new Payment Profile](./_images/developer-account-registrations/google-play-payment-profile.jpeg)\nYou would create a new Payment Profile if you never had one.\n\n![Google Play Console - Terms page](./_images/developer-account-registrations/google-play-terms.jpeg)\nAnd lastly, you'll come to the Terms page. You can see all the steps on the left-hand side that you'll have to complete.\n\n## Approval process time\n\nGoogle **immediately** activated my account. After activation, you still need to verify with them before you can publish any apps.\n\nGoogle will ask you to verify by uploading a valid ID or using a physical Android device.\n\nFor Apple, I thought the approval would take longer. I've read that it may take up to 5 weeks for them to approve them but that wasn't the case for me.\n\nIt only took Apple **one day** to approve my account.\n\n## Wrap-Up\n\nI know this post wasn't technical or anything but I hope it gives you an idea of what the registration process is for both platforms.\n\nI'll be doing some mobile development in the coming weeks, so I hope I can share with you those experiences as well.\n\nThanks for reading and have a good one!","src/content/posts/registering-for-apple-and-google-developer-accounts.md",[844,845,846,847,848,849,850,851],"./_images/developer-account-registrations/apple-enrollment-page.jpeg","./_images/developer-account-registrations/apple-enrollment-web.jpeg","./_images/developer-account-registrations/apple-enrollment-type.jpeg","./_images/developer-account-registrations/apple-enrollment-purchase.jpeg","./_images/developer-account-registrations/google-play-get-started.jpeg","./_images/developer-account-registrations/google-play-requirements.jpeg","./_images/developer-account-registrations/google-play-payment-profile.jpeg","./_images/developer-account-registrations/google-play-terms.jpeg","b3552355ba0a0fa1",{"html":854,"metadata":855},"\u003Cp>If you read my previous blog, I said I was going to form an LLC. I decided not to because I felt it was too early in my journey.\u003C/p>\n\u003Cp>My goal right now is to build mobile apps. The problem is that I can’t publish my projects.\u003C/p>\n\u003Cp>So I signed up for Apple and Google Developer Accounts and wanted to share my research and experience.\u003C/p>\n\u003Csection>\u003Ch2 id=\"platform-pros-and-cons\">Platform pros and cons\u003C/h2>\u003Cp>When it comes to comparing Apple and Android for development, I found these metrics important for me as a developer.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>\u003C/th>\u003Cth>Apple\u003C/th>\u003Cth>Google\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>🪧 Developer Account Registration\u003C/td>\u003Ctd>$99 yearly\u003C/td>\u003Ctd>$25 one-time fee\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>📊 OS Market Share\u003C/td>\u003Ctd>27.58% \u003Cstrong>(Q3 ‘23)\u003C/strong>\u003C/td>\u003Ctd>71.72% \u003Cstrong>(Q3 ‘23)\u003C/strong>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>📋 App Reviewal Process\u003C/td>\u003Ctd>~ 48 hours\u003C/td>\u003Ctd>~ 2 hours\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>💰 Revenue Share Model\u003C/td>\u003Ctd>70% to dev / 30% to platform\u003C/td>\u003Ctd>-\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>💻 Programming Language\u003C/td>\u003Ctd>Swift\u003C/td>\u003Ctd>Java, Kotlin\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>📱 Emulator Support\u003C/td>\u003Ctd>iOS devices, Andriod\u003C/td>\u003Ctd>Android\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\u003Cp>Apple costs a lot more than Google year-over-year and the strict review guidelines can slow iteration cycles but offer consumers higher-quality products.\u003C/p>\u003Cp>For Google, you can iterate and validate ideas much more quickly.\u003C/p>\u003Cp>You can also see that Apple owns less of the market share than Google but Apple generates more revenue because people are willing to pay more.\u003C/p>\u003Cp>I didn’t want to limit myself to one platform so I chose to target both platforms using Flutter as my tool of choice.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"registration-experience\">Registration Experience\u003C/h2>\u003Cp>On both platforms, the registration was pretty straightforward.\u003C/p>\u003Cp>There are a few screens where they will ask you what kind of app you’re building.\u003C/p>\u003Cp>The following screenshots are redacted and incomplete but it should give you an idea of what the process would look like.\u003C/p>\u003Csection>\u003Ch3 id=\"apple-developer-program\">Apple Developer Program\u003C/h3>\u003Cp>To get started with the \u003Ca href=\"https://developer.apple.com/programs/enroll/\">Apple Developer Program\u003C/a>, you will start on their enrollment page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/apple-enrollment-page.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Apple enrollment page&#x22;,&#x22;index&#x22;:0}\">\nClick “Enroll” and you’ll be asked to sign in. After signing in, you’ll see these next few pages.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/apple-enrollment-web.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Apple enrollment - continue to web&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/apple-enrollment-type.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Apple account type&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>I chose the Sole Proprietor account since I am not at the point where I need to form an LLC.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/apple-enrollment-purchase.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Apple enrollment purchase page&#x22;,&#x22;index&#x22;:0}\">\nThis should be the last step but if not, you’ll have to enter your payment details.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"google-play-console\">Google Play Console\u003C/h3>\u003Cp>The same goes for \u003Ca href=\"https://developer.android.com/distribute/console\">Google Play Console\u003C/a>. Sign in and follow the flow.\u003C/p>\u003Cp>Here are some screenshots from the Google Play Console’s registration.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/google-play-get-started.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Google Play Console - Get Started page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/google-play-requirements.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Requirements to create a Google Play Developer account&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/google-play-payment-profile.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Creating a new Payment Profile&#x22;,&#x22;index&#x22;:0}\">\nYou would create a new Payment Profile if you never had one.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/developer-account-registrations/google-play-terms.jpeg&#x22;,&#x22;alt&#x22;:&#x22;Google Play Console - Terms page&#x22;,&#x22;index&#x22;:0}\">\nAnd lastly, you’ll come to the Terms page. You can see all the steps on the left-hand side that you’ll have to complete.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"approval-process-time\">Approval process time\u003C/h2>\u003Cp>Google \u003Cstrong>immediately\u003C/strong> activated my account. After activation, you still need to verify with them before you can publish any apps.\u003C/p>\u003Cp>Google will ask you to verify by uploading a valid ID or using a physical Android device.\u003C/p>\u003Cp>For Apple, I thought the approval would take longer. I’ve read that it may take up to 5 weeks for them to approve them but that wasn’t the case for me.\u003C/p>\u003Cp>It only took Apple \u003Cstrong>one day\u003C/strong> to approve my account.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"wrap-up\">Wrap-Up\u003C/h2>\u003Cp>I know this post wasn’t technical or anything but I hope it gives you an idea of what the registration process is for both platforms.\u003C/p>\u003Cp>I’ll be doing some mobile development in the coming weeks, so I hope I can share with you those experiences as well.\u003C/p>\u003Cp>Thanks for reading and have a good one!\u003C/p>\u003C/section>",{"headings":856,"imagePaths":875,"frontmatter":832},[857,860,863,866,869,872],{"depth":230,"slug":858,"text":859},"platform-pros-and-cons","Platform pros and cons",{"depth":230,"slug":861,"text":862},"registration-experience","Registration Experience",{"depth":234,"slug":864,"text":865},"apple-developer-program","Apple Developer Program",{"depth":234,"slug":867,"text":868},"google-play-console","Google Play Console",{"depth":230,"slug":870,"text":871},"approval-process-time","Approval process time",{"depth":230,"slug":873,"text":874},"wrap-up","Wrap-Up",[844,845,846,847,848,849,850,851],"registering-for-apple-and-google-developer-accounts.md","regain-access-to-hetzner-vps-from-a-new-machine",{"id":877,"data":879,"body":890,"filePath":891,"assetImports":892,"digest":904,"rendered":905,"legacyId":931},{"title":880,"pubDate":881,"description":882,"author":883,"image":884,"tags":887,"draft":211,"readingTime":888,"lastDateModified":889},"Regain Access to Hetzner VPS From a New Machine",["Date","2024-07-13T00:00:00.000Z"],"I recently bought a new laptop and had already factory reset my old one to resell. In doing so, I lost all access to my Hetzner VPS since it was configured to disallow root access entirely and only allow user access via SSH since passwords were turned off. I was able to regain access by following these steps.",{"name":203,"email":204},{"url":885,"alt":886,"className":208},"https://images.unsplash.com/photo-1518600942388-37b306a5544b","a lock with the letters SOS",[418,420,417],"7 min read","2024-07-13T18:07:36+08:00","Did you lose access to your Hetzner VPS? I lost my access because I picked up a new laptop but wiped my old one that had access.\n\nMy server SSH configurations are as follows:\n\n- Allow root access by SSH only with `PermitRootLogin without-password`\n  - If you're using Coolify, you should leave it as `without-password`\n- Clear text passwords are turned off via `PasswordAuthentication no`\n- My user has admin permissions via `sudo`\n- My user has an SSH key authorized for login via `ssh \u003Cuser>@\u003Cvps_ip_address>`\n\nFrom my new laptop, this wasn't going to allow me access to my VPS at all.\n\nLuckily, I was able to work around it by accessing my root user through the Hetzner Cloud Console, and then rolling back the configurations to allow my user to log in with a password.\n\nAfter that, with my new SSH key generated on my local machine, I used `ssh-copy-id \u003Cuser>@\u003Cvps_ip_address>` to copy my local SSH key over to the VPS.\n\nAnd not to forget, I reconfigured my server to the settings listed above for improved security.\n\nLet's get started on how you can go about this.\n\n## Access Hetzner console\n\nLog in to your Hetzner account and navigate to the [Cloud Console](https://console.hetzner.cloud/projects).\n\n![Hetzner Cloud Console](./_images/regain-access-to-hetzner/hetzner-cloud-console.png)\n\nChoose the server you're trying to regain access to.\n\n![Hetzner Cloud Console - Server](./_images/regain-access-to-hetzner/hetzner-cloud-server.png)\n\nClick on the Console icon in the top right.\n\n![Hetzner Server Console](./_images/regain-access-to-hetzner/hetzner-server-console.png)\n\nA new window should pop up. If you have pop-ups disabled, ensure you enable them for this website.\n\n![Hetzner Console Window](./_images/regain-access-to-hetzner/hetzner-console.png)\n\nFor the login, type in `root`, followed by your password.\n\n> Note: Since this is a windowed console through the browser, you can't copy/paste text, so you will need to manually enter passwords for the time being until access is restored\n\nIf you forgot your `root` password, you can reset it in the previous page by going to the `Rescue` tab and click on `Reset Root Password`\n\n![Hetzner Reset Root Password](./_images/regain-access-to-hetzner/hetzner-reset-root-pw.png)\n\n## Restore PasswordAuthentication\n\nOnce you have access to your VPS as root, you should be able to see your welcome message.\n\n![Hetzner Reset Root Password](./_images/regain-access-to-hetzner/root-welcome.png)\n\nOnce you're in, we're going to temporarily allow passwords for the SSH server.\n\nTo do that, we're going to modify the `/etc/ssh/sshd_config` file which configures the SSH server.\n\nIn the terminal, enter:\n\n```bash\nnano /etc/ssh/sshd_config\n```\n\nYou'll see many options as a key / value pair. We want to go down to the line where `PasswordAuthentication` is and set that to `yes`\n\n```bash\n# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts\n#HostbasedAuthentication no\n# Change to yes if you don't trust ~/.ssh/known_hosts for\n# HostbasedAuthentication\n#IgnoreUserKnownHosts no\n# Don't read the user's ~/.rhosts and ~/.shosts files\n#IgnoreRhosts yes\n\n# To disable tunneled clear text passwords, change to no here!\nPasswordAuthentication yes\n#PermitEmptyPasswords no\n```\n\nSave the document by using \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>X\u003C/kbd>. You'll be asked to save the modified buffer. Enter 'Y' for yes.\n\n![Save Modified buffer](./_images/regain-access-to-hetzner/root-pw-auth-save-yes.png)\n\nThen it will ask you where you want to save it. We will overwrite the file so hit enter again.\n\n![Overwrite file](./_images/regain-access-to-hetzner/root-pw-auth-overwrite.png)\n\nSince we've modified the SSH server configuration, we'll need to restart the daemon so that it can pick up the new changes.\n\nDepending on your linux distro, you might have different commands to start/stop/restart services.\n\nYou can try one of these commands, but make sure you search how to do this for your specific OS.\n\n- `sudo /etc/init.d/ssh restart`\n- `sudo systemctl sshd restart`\n- `sudo service ssh restart`.\n\nThe service should now be restarted and now we're ready for testing.\n\n## Login via SSH\n\nIn a fresh terminal window, let's try SSH'ing into our VPS with our user.\n\nLet's assume the 😁 happy path and that you know your user's password.\n\n```bash\nssh \u003Cuser>@\u003Cvps_ip_address>\n```\n\nYou should be able to make a connection to your VPS if your user exists and be prompted to enter a password.\n\nOnce you enter it, you'll be able to see a welcome message.\n\nNow let's talk about some 😞 sad paths.\n\nRunning into this error:\n\n```bash\nssh: connect to host xx.xxx.xxx.xxx port 22: Connection refused\n```\n\nThis can mean a lot of things: your VPS has a firewall and port 22 is not accepting incoming connections, the VPS package openssh-server was improperly installed or misconfigured, your local machine may have it's own firewall, etc.\n\nMy problem with this error was that my `fail2ban` client had banned my IP address because I failed to log in too many times.\n\nAll I had to do was remove my banned IP address, and I was able to regain access.\n\nIf you're in the same boat, follow this guide I found for [How to Unban an IP Properly with Fail2Ban](https://serverfault.com/questions/285256/how-to-unban-an-ip-properly-with-fail2ban).\n\nA second reason why I think this could happen is because you forgot your user's password.\n\nYou will have to reset your user's password via the root user. There are many tutorials online on how to do that and I will not be covering that topic here.\n\n## Remove old SSH keys\n\nNow that we are logged in as our user, we can remove the old SSH keys that were tied to our previous device.\n\nI haven't found a tool to remove old SSH keys yet other than doing it by hand, so that's what we'll do.\n\nIn the terminal, enter `nano ~/.ssh/authorized_keys`\n\n![Old SSH Key](./_images/regain-access-to-hetzner/remove-old-ssh-keys.png)\n\nYou should see your old SSH key there. If you have many keys, you may need to figure out which key belongs to your old device and remove it.\n\nGo ahead and delete the whole line.\n\nOnce completed, save the file again using the steps above with \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>X\u003C/kbd>.\n\nThat should be all to remove the old key from the remote server.\n\nThere are some scripts that do this online, but I didn't try them since I don't know what they're doing.\n\nHere is the reference I looked at if you're interested: [Command to Remove a SSH Authorized Key on Server](https://superuser.com/questions/429954/command-to-remove-a-ssh-authorized-key-on-server).\n\n## Create and add new SSH Key\n\nIf you don't know how to create an SSH, I got you covered.\n\nI wrote about it in [my blog post about setting up Coolify](/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide#creating-your-ssh-key).\n\nOnce you have an SSH key, we're going to use `ssh-copy-id` which will copy all your keys to your remote server.\n\nThe `ssh-copy-id` command will only add your public keys to the remote server by appending it to the target user's `.ssh/authorized_keys` file.\n\nOnce you're ready, enter:\n\n```bash\nssh-copy-id \u003Cuser>@\u003Cvps_ip_address>\n```\n\nor if you want to use a specific key, use:\n\n```bash\nssh-copy-id -i ~/.ssh/my_public_key \u003Cuser>@\u003Cvps_ip_address>\n```\n\nReplace `my_public_key` with your public key, e.g., id_ed25519.pub, id_rsa.pub, etc.\n\nTo ensure it's properly added, we can test it by running the command again.\n\nIf you want more information on how the command works, take a look at this [SSH Copy ID for Copying SSH Keys to Servers](https://www.ssh.com/academy/ssh/copy-id) article.\n\nAfter that, we'll want to add the SSH key to the keyring so that you don't have to retype your password every time you SSH into the VPS.\n\nIn your terminal, enter `ssh-add`\n\nYou will see one or more keys added.\n\n![Adding SSH keys to key-ring](./_images/regain-access-to-hetzner/ssh-add.png)\n\nWhat is `ssh-add` and what does it do? [Peter John Acklam](https://superuser.com/users/106410/peter-john-acklam) put it best:\n\n> ssh-add adds private key identities (from your ~/.ssh directory) to the authentication agent (ssh-agent), so that the ssh agent can take care of the authentication for you, and you don’t have type in passwords at the terminal.\n\n## Reset the PasswordAuthentication\n\nGoing back to the `/etc/ssh/sshd_config` file, we're going to roll back our changes so that 'PasswordAuthentication' is inactive.\n\nThis improves security and convenience since you won't be asked to enter your password if you don't have an authorized SSH key.\n\nAssuming you have root access for your user, you can use the `sudo nano /etc/ssh/sshd_config` command while still connected to the server.\n\nIf you don't, you'll have to switch to the root user using `su - root` and enter your root password.\n\nSet PasswordAuthentication to \"no\".\n\n![PasswordAuthentication no](./_images/regain-access-to-hetzner/pw-auth-no.png)\n\nSave the file, and restart the SSH server as before via one of these commands:\n\n- `sudo /etc/init.d/ssh restart`\n- `sudo systemctl sshd restart`\n- `sudo service ssh restart`.\n\n## Login from a new shell\n\nTo test everything works, open up a new terminal window.\n\nAttempt to access your user account via SSH.\n\n```bash\nssh \u003Cuser>@\u003Cvps_ip_address>\n```\n\nIf all goes well, you should have access without entering a password. Hooray! 🥳 we regained access to our VPS on our new device.\n\nHopefully, these steps helped you regain control of your server.\n\nIf not, please reach out and I'll try my best to help even though I'm still a novice at this stuff.\n\nThank you for reading, and as always, have a good one!","src/content/posts/regain-access-to-hetzner-vps-from-a-new-machine.md",[893,894,895,896,897,898,899,900,901,902,903],"./_images/regain-access-to-hetzner/hetzner-cloud-console.png","./_images/regain-access-to-hetzner/hetzner-cloud-server.png","./_images/regain-access-to-hetzner/hetzner-server-console.png","./_images/regain-access-to-hetzner/hetzner-console.png","./_images/regain-access-to-hetzner/hetzner-reset-root-pw.png","./_images/regain-access-to-hetzner/root-welcome.png","./_images/regain-access-to-hetzner/root-pw-auth-save-yes.png","./_images/regain-access-to-hetzner/root-pw-auth-overwrite.png","./_images/regain-access-to-hetzner/remove-old-ssh-keys.png","./_images/regain-access-to-hetzner/ssh-add.png","./_images/regain-access-to-hetzner/pw-auth-no.png","14b62f16e626a10d",{"html":906,"metadata":907},"\u003Cp>Did you lose access to your Hetzner VPS? I lost my access because I picked up a new laptop but wiped my old one that had access.\u003C/p>\n\u003Cp>My server SSH configurations are as follows:\u003C/p>\n\u003Cul>\n\u003Cli>Allow root access by SSH only with \u003Ccode>PermitRootLogin without-password\u003C/code>\n\u003Cul>\n\u003Cli>If you’re using Coolify, you should leave it as \u003Ccode>without-password\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Clear text passwords are turned off via \u003Ccode>PasswordAuthentication no\u003C/code>\u003C/li>\n\u003Cli>My user has admin permissions via \u003Ccode>sudo\u003C/code>\u003C/li>\n\u003Cli>My user has an SSH key authorized for login via \u003Ccode>ssh &#x3C;user>@&#x3C;vps_ip_address>\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>From my new laptop, this wasn’t going to allow me access to my VPS at all.\u003C/p>\n\u003Cp>Luckily, I was able to work around it by accessing my root user through the Hetzner Cloud Console, and then rolling back the configurations to allow my user to log in with a password.\u003C/p>\n\u003Cp>After that, with my new SSH key generated on my local machine, I used \u003Ccode>ssh-copy-id &#x3C;user>@&#x3C;vps_ip_address>\u003C/code> to copy my local SSH key over to the VPS.\u003C/p>\n\u003Cp>And not to forget, I reconfigured my server to the settings listed above for improved security.\u003C/p>\n\u003Cp>Let’s get started on how you can go about this.\u003C/p>\n\u003Csection>\u003Ch2 id=\"access-hetzner-console\">Access Hetzner console\u003C/h2>\u003Cp>Log in to your Hetzner account and navigate to the \u003Ca href=\"https://console.hetzner.cloud/projects\">Cloud Console\u003C/a>.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/hetzner-cloud-console.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Cloud Console&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Choose the server you’re trying to regain access to.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/hetzner-cloud-server.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Cloud Console - Server&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click on the Console icon in the top right.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/hetzner-server-console.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Server Console&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>A new window should pop up. If you have pop-ups disabled, ensure you enable them for this website.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/hetzner-console.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Console Window&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>For the login, type in \u003Ccode>root\u003C/code>, followed by your password.\u003C/p>\u003Cblockquote>\n\u003Cp>Note: Since this is a windowed console through the browser, you can’t copy/paste text, so you will need to manually enter passwords for the time being until access is restored\u003C/p>\n\u003C/blockquote>\u003Cp>If you forgot your \u003Ccode>root\u003C/code> password, you can reset it in the previous page by going to the \u003Ccode>Rescue\u003C/code> tab and click on \u003Ccode>Reset Root Password\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/hetzner-reset-root-pw.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Reset Root Password&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"restore-passwordauthentication\">Restore PasswordAuthentication\u003C/h2>\u003Cp>Once you have access to your VPS as root, you should be able to see your welcome message.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/root-welcome.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner Reset Root Password&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Once you’re in, we’re going to temporarily allow passwords for the SSH server.\u003C/p>\u003Cp>To do that, we’re going to modify the \u003Ccode>/etc/ssh/sshd_config\u003C/code> file which configures the SSH server.\u003C/p>\u003Cp>In the terminal, enter:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">nano\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /etc/ssh/sshd_config\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You’ll see many options as a key / value pair. We want to go down to the line where \u003Ccode>PasswordAuthentication\u003C/code> is and set that to \u003Ccode>yes\u003C/code>\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#HostbasedAuthentication no\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Change to yes if you don't trust ~/.ssh/known_hosts for\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># HostbasedAuthentication\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#IgnoreUserKnownHosts no\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Don't read the user's ~/.rhosts and ~/.shosts files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#IgnoreRhosts yes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># To disable tunneled clear text passwords, change to no here!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">PasswordAuthentication\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> yes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#PermitEmptyPasswords no\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Save the document by using \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>X\u003C/kbd>. You’ll be asked to save the modified buffer. Enter ‘Y’ for yes.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/root-pw-auth-save-yes.png&#x22;,&#x22;alt&#x22;:&#x22;Save Modified buffer&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then it will ask you where you want to save it. We will overwrite the file so hit enter again.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/root-pw-auth-overwrite.png&#x22;,&#x22;alt&#x22;:&#x22;Overwrite file&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Since we’ve modified the SSH server configuration, we’ll need to restart the daemon so that it can pick up the new changes.\u003C/p>\u003Cp>Depending on your linux distro, you might have different commands to start/stop/restart services.\u003C/p>\u003Cp>You can try one of these commands, but make sure you search how to do this for your specific OS.\u003C/p>\u003Cul>\n\u003Cli>\u003Ccode>sudo /etc/init.d/ssh restart\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>sudo systemctl sshd restart\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>sudo service ssh restart\u003C/code>.\u003C/li>\n\u003C/ul>\u003Cp>The service should now be restarted and now we’re ready for testing.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"login-via-ssh\">Login via SSH\u003C/h2>\u003Cp>In a fresh terminal window, let’s try SSH’ing into our VPS with our user.\u003C/p>\u003Cp>Let’s assume the 😁 happy path and that you know your user’s password.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">r\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">@\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">vps_ip_addres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">s\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You should be able to make a connection to your VPS if your user exists and be prompted to enter a password.\u003C/p>\u003Cp>Once you enter it, you’ll be able to see a welcome message.\u003C/p>\u003Cp>Now let’s talk about some 😞 sad paths.\u003C/p>\u003Cp>Running into this error:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> connect\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> host\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> xx.xxx.xxx.xxx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> port\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 22:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Connection\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> refused\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>This can mean a lot of things: your VPS has a firewall and port 22 is not accepting incoming connections, the VPS package openssh-server was improperly installed or misconfigured, your local machine may have it’s own firewall, etc.\u003C/p>\u003Cp>My problem with this error was that my \u003Ccode>fail2ban\u003C/code> client had banned my IP address because I failed to log in too many times.\u003C/p>\u003Cp>All I had to do was remove my banned IP address, and I was able to regain access.\u003C/p>\u003Cp>If you’re in the same boat, follow this guide I found for \u003Ca href=\"https://serverfault.com/questions/285256/how-to-unban-an-ip-properly-with-fail2ban\">How to Unban an IP Properly with Fail2Ban\u003C/a>.\u003C/p>\u003Cp>A second reason why I think this could happen is because you forgot your user’s password.\u003C/p>\u003Cp>You will have to reset your user’s password via the root user. There are many tutorials online on how to do that and I will not be covering that topic here.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"remove-old-ssh-keys\">Remove old SSH keys\u003C/h2>\u003Cp>Now that we are logged in as our user, we can remove the old SSH keys that were tied to our previous device.\u003C/p>\u003Cp>I haven’t found a tool to remove old SSH keys yet other than doing it by hand, so that’s what we’ll do.\u003C/p>\u003Cp>In the terminal, enter \u003Ccode>nano ~/.ssh/authorized_keys\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/remove-old-ssh-keys.png&#x22;,&#x22;alt&#x22;:&#x22;Old SSH Key&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You should see your old SSH key there. If you have many keys, you may need to figure out which key belongs to your old device and remove it.\u003C/p>\u003Cp>Go ahead and delete the whole line.\u003C/p>\u003Cp>Once completed, save the file again using the steps above with \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>X\u003C/kbd>.\u003C/p>\u003Cp>That should be all to remove the old key from the remote server.\u003C/p>\u003Cp>There are some scripts that do this online, but I didn’t try them since I don’t know what they’re doing.\u003C/p>\u003Cp>Here is the reference I looked at if you’re interested: \u003Ca href=\"https://superuser.com/questions/429954/command-to-remove-a-ssh-authorized-key-on-server\">Command to Remove a SSH Authorized Key on Server\u003C/a>.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"create-and-add-new-ssh-key\">Create and add new SSH Key\u003C/h2>\u003Cp>If you don’t know how to create an SSH, I got you covered.\u003C/p>\u003Cp>I wrote about it in \u003Ca href=\"/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide#creating-your-ssh-key\">my blog post about setting up Coolify\u003C/a>.\u003C/p>\u003Cp>Once you have an SSH key, we’re going to use \u003Ccode>ssh-copy-id\u003C/code> which will copy all your keys to your remote server.\u003C/p>\u003Cp>The \u003Ccode>ssh-copy-id\u003C/code> command will only add your public keys to the remote server by appending it to the target user’s \u003Ccode>.ssh/authorized_keys\u003C/code> file.\u003C/p>\u003Cp>Once you’re ready, enter:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh-copy-id\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">r\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">@\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">vps_ip_addres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">s\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>or if you want to use a specific key, use:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh-copy-id\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ~/.ssh/my_public_key\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">r\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">@\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">vps_ip_addres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">s\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Replace \u003Ccode>my_public_key\u003C/code> with your public key, e.g., id_ed25519.pub, id_rsa.pub, etc.\u003C/p>\u003Cp>To ensure it’s properly added, we can test it by running the command again.\u003C/p>\u003Cp>If you want more information on how the command works, take a look at this \u003Ca href=\"https://www.ssh.com/academy/ssh/copy-id\">SSH Copy ID for Copying SSH Keys to Servers\u003C/a> article.\u003C/p>\u003Cp>After that, we’ll want to add the SSH key to the keyring so that you don’t have to retype your password every time you SSH into the VPS.\u003C/p>\u003Cp>In your terminal, enter \u003Ccode>ssh-add\u003C/code>\u003C/p>\u003Cp>You will see one or more keys added.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/ssh-add.png&#x22;,&#x22;alt&#x22;:&#x22;Adding SSH keys to key-ring&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>What is \u003Ccode>ssh-add\u003C/code> and what does it do? \u003Ca href=\"https://superuser.com/users/106410/peter-john-acklam\">Peter John Acklam\u003C/a> put it best:\u003C/p>\u003Cblockquote>\n\u003Cp>ssh-add adds private key identities (from your ~/.ssh directory) to the authentication agent (ssh-agent), so that the ssh agent can take care of the authentication for you, and you don’t have type in passwords at the terminal.\u003C/p>\n\u003C/blockquote>\u003C/section>\n\u003Csection>\u003Ch2 id=\"reset-the-passwordauthentication\">Reset the PasswordAuthentication\u003C/h2>\u003Cp>Going back to the \u003Ccode>/etc/ssh/sshd_config\u003C/code> file, we’re going to roll back our changes so that ‘PasswordAuthentication’ is inactive.\u003C/p>\u003Cp>This improves security and convenience since you won’t be asked to enter your password if you don’t have an authorized SSH key.\u003C/p>\u003Cp>Assuming you have root access for your user, you can use the \u003Ccode>sudo nano /etc/ssh/sshd_config\u003C/code> command while still connected to the server.\u003C/p>\u003Cp>If you don’t, you’ll have to switch to the root user using \u003Ccode>su - root\u003C/code> and enter your root password.\u003C/p>\u003Cp>Set PasswordAuthentication to “no”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/regain-access-to-hetzner/pw-auth-no.png&#x22;,&#x22;alt&#x22;:&#x22;PasswordAuthentication no&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Save the file, and restart the SSH server as before via one of these commands:\u003C/p>\u003Cul>\n\u003Cli>\u003Ccode>sudo /etc/init.d/ssh restart\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>sudo systemctl sshd restart\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>sudo service ssh restart\u003C/code>.\u003C/li>\n\u003C/ul>\u003C/section>\n\u003Csection>\u003Ch2 id=\"login-from-a-new-shell\">Login from a new shell\u003C/h2>\u003Cp>To test everything works, open up a new terminal window.\u003C/p>\u003Cp>Attempt to access your user account via SSH.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">r\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">@\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">vps_ip_addres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">s\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>If all goes well, you should have access without entering a password. Hooray! 🥳 we regained access to our VPS on our new device.\u003C/p>\u003Cp>Hopefully, these steps helped you regain control of your server.\u003C/p>\u003Cp>If not, please reach out and I’ll try my best to help even though I’m still a novice at this stuff.\u003C/p>\u003Cp>Thank you for reading, and as always, have a good one!\u003C/p>\u003C/section>",{"headings":908,"imagePaths":930,"frontmatter":879},[909,912,915,918,921,924,927],{"depth":230,"slug":910,"text":911},"access-hetzner-console","Access Hetzner console",{"depth":230,"slug":913,"text":914},"restore-passwordauthentication","Restore PasswordAuthentication",{"depth":230,"slug":916,"text":917},"login-via-ssh","Login via SSH",{"depth":230,"slug":919,"text":920},"remove-old-ssh-keys","Remove old SSH keys",{"depth":230,"slug":922,"text":923},"create-and-add-new-ssh-key","Create and add new SSH Key",{"depth":230,"slug":925,"text":926},"reset-the-passwordauthentication","Reset the PasswordAuthentication",{"depth":230,"slug":928,"text":929},"login-from-a-new-shell","Login from a new shell",[893,894,895,896,897,898,899,900,901,902,903],"regain-access-to-hetzner-vps-from-a-new-machine.md","self-hosting-your-website-with-coolify-v4-a-step-by-step-guide",{"id":932,"data":934,"body":943,"filePath":944,"assetImports":945,"digest":976,"rendered":977,"legacyId":1018},{"title":935,"pubDate":936,"description":937,"author":938,"image":939,"tags":942,"draft":211,"readingTime":683,"lastDateModified":343},"Self-hosting Your Website with Coolify v4: A Step-by-Step Guide",["Date","2024-03-01T00:00:00.000Z"],"Ever wondered how you can self-host your own websites and web apps without the need for services like Netlify, Vercel, and the like? I am venturing down that path and I want to share what I learned. In this tutorial, I will explain what I did to host a static website using Cloudflare, Hetzner, and Coolify.",{"name":203,"email":204},{"url":940,"alt":941,"className":208},"https://images.unsplash.com/photo-1502139214982-d0ad755818d8","\"breathe\" neon sign hung against a wall of foliage",[417,418,419,420],"If you're thinking about self-hosting your own apps but don't know where to start then you're not alone.\n\nLeaving services like Netlify, Vercel, Render, etc. can be scary. These are professional services that provide high security and convenience.\n\nBut it's not so bad once you self-host with Coolify.\n\nAnd after a lot of trial and error, I detached my billyle.dev domain from Netlify and have it running on my server.\n\nDown below, I will guide you through the same steps on how to get started with Coolify.\n\nIf you prefer video, check out [Self-host 101 - Set up Coolify | Self Hosted PaaS with Zero Config Deployments by CJ from Syntax.fm](https://www.youtube.com/watch?v=taJlPG82Ucw)\n\n## What you're going to need\n\nHere's what you're going to need if you're planning to do this:\n\n- A domain name (My domain is registered with Cloudflare)\n- A remote server you can SSH into (I used Hetzner and the referral link from Coolify)\n- A git repository of what you're going to deploy\n- SSH public key on your device (optional)\n\n**Note:**\n\nIt's worth noting that I had to fiddle with the DNS around a lot near the end of this tutorial, but I found that having your domain on Cloudflare is a better experience. Initially, I had my domain on NameCheap. While it was working, I was experiencing strange behaviors like slow load times on the desktop versus mobile.\n\n## Creating your SSH key\n\nIf you want to use your password for SSH'ing remotely onto your server, you will have to perform this step. Otherwise, you can just skip to the next section since Hetzner will email you the root password if you omit it. You can also skip this step if you already have an existing SSH key you want to use.\n\nIn your terminal, follow these commands:\n\n```bash\nssh-keygen -t rsa -b 4096\n```\n\nYou will see this prompt.\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/billyle/.ssh/id_rsa):\n```\n\nHit enter and use the default path, and then you will be asked to enter a passphrase twice. Once to enter, and twice to confirm. I suggest you make it a strong password and save it to a secure location like an encrypted note on a password manager.\n\n```\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\n```\n\nOnce you get past that step, you have created your SSH key. You will see something similar below.\n\n```\nYour identification has been saved in /Users/billyle/.ssh/id_rsa\nYour public key has been saved in /Users/billyle/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:xcAmxtStfRBiLtm7HIU44NrI0mF9geOYT87SoT9xVmQ billyle@mbp.local\nThe key's randomart image is:\n+---[RSA 4096]----+\n|    .+oo+...     |\n|   oo.+BE=o      |\n|  o+oo*=+o+.     |\n| +o=+. oo+. .    |\n|. =B.. .S  .     |\n| .o * o. o       |\n|   o +  o        |\n|    o            |\n|     .           |\n+----[SHA256]-----+\n```\n\nI will show you how to use this key in the next section.\n\n## Shopping on Hetzner\n\nHave your domain ready for the next step. You'll be renting a private server.\n\nHetzner is a great choice for me compared to other companies that charge quite a lot for the same offerings. Hetzner is cheap and seems like a popular choice among the Coolify crowd.\n\nWhen picking a server, there are some details you want to pay attention to:\n\n- the location where you think most of your traffic will come from (I chose Germany since it's a nice in-between Continental US and Asia)\n\n![hHetzner server location options](./_images/self-hosting/hetzner-location-selection.png)\n\n- the image you want to use on the server (Ubuntu is a great choice)\n\n![Hetzner images options](./_images/self-hosting/hetzner-image-selection.png)\n\n- whether you will need shared or dedicated vCPU (shared is the best price/performance)\n\n![Hetzner CPU options](./_images/self-hosting/hetzner-server-type-selection.png)\n\n- the server resources like how many CPUs, RAM, and storage your sites and apps will consume. To run Coolify, these are the **minimum requirements**\n  - **2 CPUs**\n  - **2 GB memory**\n  - **30+ GB of storage for the docker images**\n\n![Hetzner review order](./_images/self-hosting/hetzner-server-selection.png)\n\n- lastly, your monthly budget\n\n### Add your SSH key\n\nAfter your selection, you may want to include your SSH key. Skip this if you want Hetzner to email the password to you.\n\nUnder the section titled \"SSH keys\", click on \"Add SSH Key\" and a modal will pop up.\n\nBack to the terminal now, we're going to copy our SSH key and paste it into the modal.\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n\nThe `.pub` signifies that this is the public key and the output will look something like this:\n\n```\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDbQj5IxxXslqfOl4Qv5Ux0RNbofCVy5EWbkosc2AnDj6XAFZSdLNwlPG1qnckhuWCeHveWmJAU80G9d4eTvV/W4bKOE8jj0iqVCFHLXdgOlbO+WQgpVDKjhAnRlaJfPNiLvAn0yNr/Sj1ESbMzBwNK4bjTBCMOalvq/NUqz+3bcewdlc3gDunvdmGf4RbfUydZ73rhO0Bg/r+u7NWT1pghcFW/E/E9f6OavBzyHRSSP0MJQYx3bnmgpFcmZlz/3O0gUaxLGXAmFAsaYxAZ7iZXz8AWw2DmcaNlf+lyAYOQ2TGVaZ4VAUwDQE/8u4zFaX+HooUScgTY3oUztIHFDFgyu6Q4N6ILj/aujnSiuv5fW9PiQ70Jce78IMTAlRSqVeBxRgK8Di5eHECFOH+chNp9UhThw+ZO4dHBwxngdZcbd7xmX3hczS1DnYgtOKUIWzx6rUGrN1wsMsdJS4GAWHvhtWMZITqvg4XXEsMdFtKZ8pJj8O8qjNyPEmfYg1upVmoGufcCCbIRY0CKzBeer3hpqD74EcGyB0TJmeHQezCMsmdBW9DJNPDtCfL/zMMXyqtyjsddkl8AbloZmlkgHDLtSscfWeLtMMX1DkT13LoekjL11ZCOMU5vAWvKiJGxU0NRFRStHU/AIpRqDBtD+VFPRWa0javzgXZTr3ALQun5jQ== billyle@mbp.local\n```\n\nHighlight all the output and then paste it into the modal and then click save.\n\nAfter that, you will want to review your Hetzner configuration before you complete the transaction.\n\nIf all looks okay, go ahead and create it. It will take less than a minute to spin up your new server.\n\nIf you mess up, you can always delete the server and start a new one since they charge by the hour.\n\n## Installing Coolify\n\nOnce your server is created, you will see an IP address for your remote server. You will connect to it and configure your server to use Coolify.\n\nIn your terminal, type in these commands:\n\n```bash\nssh root@\u003Cserver_ip_address>\n```\n\nWhere `\u003Cserver_ip_address>` is the one provided to you by Hetzner.\n\nThe next prompt will ask you to add the IP to your known hosts list.\n\nType in \"yes\" here.\n\nThen you will enter the passphrase that you used to create the SSH key or the password that Hetzner sent to you by email.\n\n```\nThe authenticity of host '162.55.37.168' can't be established.\nED25519 key fingerprint is SHA256:L1WGqdh9jEOSIrQ/eNcDOtgyYNDWCbTIlEtMcp8rs10.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '162.55.37.168' (ED25519) to the list of known hosts.\nEnter passphrase for key '/Users/billyle/.ssh/id_rsa':\n```\n\nYou should now have remote access to your server and execute commands.\n\n```\nWelcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-91-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Sun Mar  3 03:54:34 AM UTC 2024\n\n  System load:  0.0               Processes:             100\n  Usage of /:   5.1% of 37.23GB   Users logged in:       0\n  Memory usage: 5%                IPv4 address for eth0: 162.55.37.168\n  Swap usage:   0%                IPv6 address for eth0: 2a01:4f8:c012:7c82::1\n\n\nExpanded Security Maintenance for Applications is not enabled.\n\n0 updates can be applied immediately.\n\nEnable ESM Apps to receive additional future security updates.\nSee https://ubuntu.com/esm or run: sudo pro status\n\n\nThe list of available updates is more than a week old.\nTo check for new updates run: sudo apt update\n\nroot@ubuntu-4gb-fsn1-1:~#\n```\n\nIf you go to [Coolify.io docs](https://coolify.io/docs/installation) and search for installation, you should see the installation script which looks like this:\n\n```bash\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash\n```\n\nEnter the command and let the installation script do its thing. Once that's complete, you will see an output with an IP address where you can access the Coolify instance on your server, in my case it was `http://162.55.37.168:8000`.\n\n![Coolify installing in the terminal gif](/images/coolify-installation.gif)\n\nCopy the IP address along with the port and enter that in your browser's URL. You will be directed to the registration screen for Coolify.\n\n## Coolify Onboarding Experience\n\nWhen you follow the IP address from the Coolify installation, you will be taken to a registration page.\n\nSign up to log in to the Coolify instance where we will host it on your domain.\n\nBe sure to use a strong, unique password since this is how you will interface with Coolify on your custom domain.\n\n![Coolify onboarding registration form](./_images/self-hosting/coolify-registration.png)\n\nYou will be prompted with a series of onboarding questions. Just keep clicking next until you see the page, \"Server\".\n\n![Welcome to the Coolify page](./_images/self-hosting/coolify-welcome.png)\n\nYou will select \"localhost\" as that's where this instance of Coolify is installed.\n\n![Coolify onboarding - server-type options](./_images/self-hosting/coolify-server-selection.png)\n\nThen you will create your first project. These projects are a way to organize your resources under one umbrella. Here you will be adding your first project so click on \"Let's create a new one\". This will create a project called, \"My first project\" for you.\n\n![Coolify onboarding - project selection](./_images/self-hosting/coolify-project-selection.png)\n\nAfter that, the next page says something about adding resources. Resources are things that your app or website needs such as databases, servers, etc. Click on the \"Let's do it!\" button.\n\nIf you're deploying a static site, chances are, you only have one resource to deploy. Select the \"Public Repository\" resource.\n\n![Coolify - create a resource page](./_images/self-hosting/coolify-resource-add.png)\n\nWhen you click that, you will be asked which server you like to use. There should be only one and that's \"localhost\" from before.\n\n![Coolify resource select server option](./_images/self-hosting/coolify-resource-add-server.png)\n\nThen it will ask you to select a Destination. Just choose the only option which should be a Standalone Docker instance called \"localhost-coolify\".\n\n![Coolify resource select destination option](./_images/self-hosting/coolify-resource-destination.png)\n\nAnd lastly, it will ask you for the URL for the public repository. Paste the URL of your public repo into the field.\n\nIt will get the metadata from the Git repo and should populate all the necessary details.\n\nThe important part here is the **Publish Directory** where the build output will be.\n\nAlso, toggle the \"Is it a static site\" toggle if it applies to you.\n\n![Coolify - creating a new application page](./_images/self-hosting/coolify-source-repo.png)\n\nYou should now see a configuration page for the resource you just created.\n\nThere's a lot on this screen but we're going to focus solely on deploying to see if we can get Coolify to build our application.\n\nOn the top right corner, click \"Deploy\"\n\n![Coolify's application configuration page](./_images/self-hosting/coolify-resource-config.png)\n\nYou will be taken to the Deployment page and your build logs will start appearing.\n\nHopefully, there won't be any errors and you will see a \"New container started\" as the last log entry and your deployment says \"Finished\".\n\n![Coolify's deployment page](./_images/self-hosting/coolify-app-deploy.png)\n\nTo test to see if Coolify can serve the website, click on the \"Open Application\" button and select the auto-generated link to view your site.\n\n![opening deployment application on Coolify](./_images/self-hosting/coolify-app-open.png)\n\nYou should see your site being served by Coolify.\n\n![my website live on URL that Coolify provided](./_images/self-hosting/coolify-app-website.png)\n\nKeep your Coolify page open for the next part as we still need to tinker with it later.\n\n## Proxy domain from Cloudflare to Coolify\n\nNow all we need to do is some configuration between Cloudflare and Coolify. We need to point our domain in Cloudflare to our Hetzner server and Coolify will serve our applications.\n\nIt took me a long time to figure this out so there might be some trial and error on your part, but I hope this next set of instructions just works for you.\n\n### Enforce Strict SSL/TSL Mode\n\nThis next part is important! Navigate to the SSL/TLS page in Cloudflare.\n\n![navigation menu showing how to get to Cloudflare's SSL overview](./_images/self-hosting//cloudflare-ssl.png)\n\nWe want to turn on SSL Full (strict) mode to allow Coolify to serve HTTPS for us.\n\nBy default, SSL will be on Flexible mode and if you had this on, both Coolify and Cloudflare will be stuck in a redirect loop causing the page to throw a \"Too many redirects\" error.\n\n![selecting the Full Strict option in Cloudflare SSL/TLS page](./_images/self-hosting/cloudflare-ssl-full-strict.png)\n\n### Access Coolify from our domain\n\nIn your Cloudflare dashboard, go to the DNS Records Management page for your domain. We want to add a subdomain for our Coolify instance.\n\n![navigation menu showing how to get to Cloudflare's DNS records management](./_images/self-hosting/cloudflare-dns-management.png)\n\nAdd a new \"**A**\" record, with the hostname \"**coolify\\*\\***\", and the value is the IP address of your remote server, and click save.\n\n![creating Coolify instance DNS record](./_images/self-hosting/cloudflare-dns-coolify.png)\n\nGo back to Coolify, and go to the Settings page.\n\n![navigation menu showing how to get to Coolify's settings page](./_images/self-hosting/coolify-settings.png)\n\nIn the \"**Instance's Domain**\" field, type out `https://coolify.\u003Cyour_domain>`.\n\nNotice that we added HTTPS here. Coolify will automatically generate an SSL cert when it sees this configuration. Be sure to hit save.\n\n![configuring Coolify's setting to point to the domain](./_images/self-hosting/coolify-instance-url.png)\n\nLet's see if we can now access our Coolify instance from our domain instead of the Hetzner server IP address.\n\nHead over to `https://coolify.\u003Cyour_domain>` and check out your new Coolify on your domain!\n\nIf it doesn't load yet, wait a few moments until the DNS propagates.\n\n![Custom domain website hosting Coolify](./_images/self-hosting/coolify-domain.png)\n\nNow login with the credentials you used to register in the initial Coolify setup, and you should now be at the Coolify dashboard.\n\n### Link the Coolify app to your domain\n\nFrom the Coolify dashboard, navigate back to your project configuration dashboard.\n\nWe're going to change the auto-generated domain that Coolify created to use our domain.\n\nType in your domain and then click save. After you save, make sure to click \"Redeploy\" or else this won't work.\n\n![configuring custom domain in Coolify's application configuration page](./_images/self-hosting/coolify-custom-domain.png)\n\nBack to Cloudflare, we need to create more DNS records to make sure our domain is pointed to our server.\n\nSo head on back to the Cloudflare DNS Management and enter a new \"**A**\" record, with the hostname \"**@**\", and the value should be the Hetzner server IP address.\n\n![entering DNS record for custom domain](./_images/self-hosting/cloudflare-dns-domain.png)\n\nNow give it a couple of minutes and visit your domain. You should see live! How cool is that?\n\n![Custom domain running off Cloudflare and Coolify](./_images/self-hosting/custom-domain.png)\n\n## Redirect www to non-www\n\nWe're almost done with the long tutorial. I was excited when I got this far and I hope you are too.\n\nThis last part is the final section and what we're going to do is redirect our `www.\u003Cdomain>` to just `\u003Cdomain>`.\n\nAll of this will happen in Cloudflare so we don't need to mess around with Coolify.\n\nIn Cloudflare, back in our DNS management, we're going to add two records.\n\nThe first one is an \"**A**\" record, with the name of \"**www**\", and the value of `192.0.2.1`.\n\nThis is saying we are creating an ALIAS record that uses the `www` subdomain, and we are pointing to a dummy IPv4 address.\n\nThe dummy IPv4 address is insignificant since Cloudflare will redirect all traffic before reaching the IP address.\n\n![entering DNS record for ipv4](./_images/self-hosting/cloudflare-redirect-ipv4.png)\n\nNow we'll create the IPv6 version with another \"**AAAA**\" with the name same name but this time the IPv6 address is `100::`\n\n![entering DNS record for ipv6](./_images/self-hosting/cloudflare-redirect-ipv6.png)\n\nWhile that's being propagated, we need to set up the actual redirect rules in Cloudflare.\n\nHead over to the Rules Redirect page\n\n![navigation menu showing how to get to Cloudflare's redirect rules](./_images/self-hosting/cloudflare-redirect-rules.png)\n\nOnce there, click on \"+ Create rule\" where you'll be taken to a form.\n\nAdd the name of your Redirect Rule. I named mine \"www to apex\".\n\n![enter the redirect rule name](./_images/self-hosting/cloudflare-redirect-name.png)\n\nThen click on \"Edit expression\" where you'll type in the rule expression. Replace `billyle.dev` with your actual domain.\n\n![arrow showing how to edit expressions](./_images/self-hosting/cloudflare-redirect-edit-expression.png)\n\n```\n(http.request.full_uri contains \"www.billyle.dev\")\n```\n\n![condition criteria inside edit expressions](./_images/self-hosting/cloudflare-redirect-expression.png)\n\nThe last input field is where Cloudflare does something when it matches the condition above.\n\nWe want a \"Dynamic\", with a \"301\" permanent redirect and our expression will be:\n\n![dynamic redirect expression with status code 301](./_images/self-hosting/cloudflare-redirect-dynamic.png)\n\n```\nconcat(\"https://\",\"billyle.dev\",http.request.uri.path)\n```\n\nAgain, replace `billyle.dev` with your actual domain and make sure the \"Preserve query string\" is checked.\n\nNow test it out after a few minutes to see if it works. Visit `www.\u003Cyour_domain>` and see if it redirects you to the root domain.\n\n## That's it! You're done!\n\nWow, that was a lot! I'm glad you made it all the way through. I hope you're proud of what you did here.\n\nThis is our new journey down self-hosting PaaS. The days of paying for a droplet and managed DB are over for me.\n\nYou've learned how to create a remote server with Hetzner, SSH into it, and install Coolify. Then you managed to link your domain to Coolify and deploy your website!\n\nIf you have any questions, feel free to email me or contact me through my social media links.\n\nAnd thank you for reading! Hope you have a great rest of your day wherever you are.","src/content/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide.md",[946,947,948,949,950,951,952,953,954,444,445,955,956,957,958,959,960,961,425,962,963,964,965,966,967,968,969,970,971,972,973,974,975],"./_images/self-hosting/hetzner-location-selection.png","./_images/self-hosting/hetzner-image-selection.png","./_images/self-hosting/hetzner-server-type-selection.png","./_images/self-hosting/hetzner-server-selection.png","./_images/self-hosting/coolify-registration.png","./_images/self-hosting/coolify-welcome.png","./_images/self-hosting/coolify-server-selection.png","./_images/self-hosting/coolify-project-selection.png","./_images/self-hosting/coolify-resource-add.png","./_images/self-hosting/coolify-source-repo.png","./_images/self-hosting/coolify-resource-config.png","./_images/self-hosting/coolify-app-deploy.png","./_images/self-hosting/coolify-app-open.png","./_images/self-hosting/coolify-app-website.png","./_images/self-hosting//cloudflare-ssl.png","./_images/self-hosting/cloudflare-ssl-full-strict.png","./_images/self-hosting/cloudflare-dns-coolify.png","./_images/self-hosting/coolify-settings.png","./_images/self-hosting/coolify-instance-url.png","./_images/self-hosting/coolify-domain.png","./_images/self-hosting/coolify-custom-domain.png","./_images/self-hosting/cloudflare-dns-domain.png","./_images/self-hosting/custom-domain.png","./_images/self-hosting/cloudflare-redirect-ipv4.png","./_images/self-hosting/cloudflare-redirect-ipv6.png","./_images/self-hosting/cloudflare-redirect-rules.png","./_images/self-hosting/cloudflare-redirect-name.png","./_images/self-hosting/cloudflare-redirect-edit-expression.png","./_images/self-hosting/cloudflare-redirect-expression.png","./_images/self-hosting/cloudflare-redirect-dynamic.png","db803a637f711266",{"html":978,"metadata":979},"\u003Cp>If you’re thinking about self-hosting your own apps but don’t know where to start then you’re not alone.\u003C/p>\n\u003Cp>Leaving services like Netlify, Vercel, Render, etc. can be scary. These are professional services that provide high security and convenience.\u003C/p>\n\u003Cp>But it’s not so bad once you self-host with Coolify.\u003C/p>\n\u003Cp>And after a lot of trial and error, I detached my billyle.dev domain from Netlify and have it running on my server.\u003C/p>\n\u003Cp>Down below, I will guide you through the same steps on how to get started with Coolify.\u003C/p>\n\u003Cp>If you prefer video, check out \u003Ca href=\"https://www.youtube.com/watch?v=taJlPG82Ucw\">Self-host 101 - Set up Coolify | Self Hosted PaaS with Zero Config Deployments by CJ from Syntax.fm\u003C/a>\u003C/p>\n\u003Csection>\u003Ch2 id=\"what-youre-going-to-need\">What you’re going to need\u003C/h2>\u003Cp>Here’s what you’re going to need if you’re planning to do this:\u003C/p>\u003Cul>\n\u003Cli>A domain name (My domain is registered with Cloudflare)\u003C/li>\n\u003Cli>A remote server you can SSH into (I used Hetzner and the referral link from Coolify)\u003C/li>\n\u003Cli>A git repository of what you’re going to deploy\u003C/li>\n\u003Cli>SSH public key on your device (optional)\u003C/li>\n\u003C/ul>\u003Cp>\u003Cstrong>Note:\u003C/strong>\u003C/p>\u003Cp>It’s worth noting that I had to fiddle with the DNS around a lot near the end of this tutorial, but I found that having your domain on Cloudflare is a better experience. Initially, I had my domain on NameCheap. While it was working, I was experiencing strange behaviors like slow load times on the desktop versus mobile.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"creating-your-ssh-key\">Creating your SSH key\u003C/h2>\u003Cp>If you want to use your password for SSH’ing remotely onto your server, you will have to perform this step. Otherwise, you can just skip to the next section since Hetzner will email you the root password if you omit it. You can also skip this step if you already have an existing SSH key you want to use.\u003C/p>\u003Cp>In your terminal, follow these commands:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh-keygen\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> rsa\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -b\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4096\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You will see this prompt.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Generating public/private rsa key pair.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Enter file in which to save the key (/Users/billyle/.ssh/id_rsa):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Hit enter and use the default path, and then you will be asked to enter a passphrase twice. Once to enter, and twice to confirm. I suggest you make it a strong password and save it to a secure location like an encrypted note on a password manager.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Enter passphrase (empty for no passphrase):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Enter same passphrase again:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Once you get past that step, you have created your SSH key. You will see something similar below.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Your identification has been saved in /Users/billyle/.ssh/id_rsa\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Your public key has been saved in /Users/billyle/.ssh/id_rsa.pub\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The key fingerprint is:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>SHA256:xcAmxtStfRBiLtm7HIU44NrI0mF9geOYT87SoT9xVmQ billyle@mbp.local\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The key's randomart image is:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>+---[RSA 4096]----+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|    .+oo+...     |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|   oo.+BE=o      |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|  o+oo*=+o+.     |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| +o=+. oo+. .    |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|. =B.. .S  .     |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| .o * o. o       |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|   o +  o        |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|    o            |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|     .           |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>+----[SHA256]-----+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I will show you how to use this key in the next section.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"shopping-on-hetzner\">Shopping on Hetzner\u003C/h2>\u003Cp>Have your domain ready for the next step. You’ll be renting a private server.\u003C/p>\u003Cp>Hetzner is a great choice for me compared to other companies that charge quite a lot for the same offerings. Hetzner is cheap and seems like a popular choice among the Coolify crowd.\u003C/p>\u003Cp>When picking a server, there are some details you want to pay attention to:\u003C/p>\u003Cul>\n\u003Cli>the location where you think most of your traffic will come from (I chose Germany since it’s a nice in-between Continental US and Asia)\u003C/li>\n\u003C/ul>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/hetzner-location-selection.png&#x22;,&#x22;alt&#x22;:&#x22;hHetzner server location options&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cul>\n\u003Cli>the image you want to use on the server (Ubuntu is a great choice)\u003C/li>\n\u003C/ul>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/hetzner-image-selection.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner images options&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cul>\n\u003Cli>whether you will need shared or dedicated vCPU (shared is the best price/performance)\u003C/li>\n\u003C/ul>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/hetzner-server-type-selection.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner CPU options&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cul>\n\u003Cli>the server resources like how many CPUs, RAM, and storage your sites and apps will consume. To run Coolify, these are the \u003Cstrong>minimum requirements\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Cstrong>2 CPUs\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>2 GB memory\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>30+ GB of storage for the docker images\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/hetzner-server-selection.png&#x22;,&#x22;alt&#x22;:&#x22;Hetzner review order&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cul>\n\u003Cli>lastly, your monthly budget\u003C/li>\n\u003C/ul>\u003Csection>\u003Ch3 id=\"add-your-ssh-key\">Add your SSH key\u003C/h3>\u003Cp>After your selection, you may want to include your SSH key. Skip this if you want Hetzner to email the password to you.\u003C/p>\u003Cp>Under the section titled “SSH keys”, click on “Add SSH Key” and a modal will pop up.\u003C/p>\u003Cp>Back to the terminal now, we’re going to copy our SSH key and paste it into the modal.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>cat ~/.ssh/id_rsa.pub\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>The \u003Ccode>.pub\u003C/code> signifies that this is the public key and the output will look something like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDbQj5IxxXslqfOl4Qv5Ux0RNbofCVy5EWbkosc2AnDj6XAFZSdLNwlPG1qnckhuWCeHveWmJAU80G9d4eTvV/W4bKOE8jj0iqVCFHLXdgOlbO+WQgpVDKjhAnRlaJfPNiLvAn0yNr/Sj1ESbMzBwNK4bjTBCMOalvq/NUqz+3bcewdlc3gDunvdmGf4RbfUydZ73rhO0Bg/r+u7NWT1pghcFW/E/E9f6OavBzyHRSSP0MJQYx3bnmgpFcmZlz/3O0gUaxLGXAmFAsaYxAZ7iZXz8AWw2DmcaNlf+lyAYOQ2TGVaZ4VAUwDQE/8u4zFaX+HooUScgTY3oUztIHFDFgyu6Q4N6ILj/aujnSiuv5fW9PiQ70Jce78IMTAlRSqVeBxRgK8Di5eHECFOH+chNp9UhThw+ZO4dHBwxngdZcbd7xmX3hczS1DnYgtOKUIWzx6rUGrN1wsMsdJS4GAWHvhtWMZITqvg4XXEsMdFtKZ8pJj8O8qjNyPEmfYg1upVmoGufcCCbIRY0CKzBeer3hpqD74EcGyB0TJmeHQezCMsmdBW9DJNPDtCfL/zMMXyqtyjsddkl8AbloZmlkgHDLtSscfWeLtMMX1DkT13LoekjL11ZCOMU5vAWvKiJGxU0NRFRStHU/AIpRqDBtD+VFPRWa0javzgXZTr3ALQun5jQ== billyle@mbp.local\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Highlight all the output and then paste it into the modal and then click save.\u003C/p>\u003Cp>After that, you will want to review your Hetzner configuration before you complete the transaction.\u003C/p>\u003Cp>If all looks okay, go ahead and create it. It will take less than a minute to spin up your new server.\u003C/p>\u003Cp>If you mess up, you can always delete the server and start a new one since they charge by the hour.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"installing-coolify\">Installing Coolify\u003C/h2>\u003Cp>Once your server is created, you will see an IP address for your remote server. You will connect to it and configure your server to use Coolify.\u003C/p>\u003Cp>In your terminal, type in these commands:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ssh\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> root@\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">server_ip_addres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">s\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Where \u003Ccode>&#x3C;server_ip_address>\u003C/code> is the one provided to you by Hetzner.\u003C/p>\u003Cp>The next prompt will ask you to add the IP to your known hosts list.\u003C/p>\u003Cp>Type in “yes” here.\u003C/p>\u003Cp>Then you will enter the passphrase that you used to create the SSH key or the password that Hetzner sent to you by email.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>The authenticity of host '162.55.37.168' can't be established.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>ED25519 key fingerprint is SHA256:L1WGqdh9jEOSIrQ/eNcDOtgyYNDWCbTIlEtMcp8rs10.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>This key is not known by any other names.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Are you sure you want to continue connecting (yes/no/[fingerprint])? yes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Warning: Permanently added '162.55.37.168' (ED25519) to the list of known hosts.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Enter passphrase for key '/Users/billyle/.ssh/id_rsa':\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You should now have remote access to your server and execute commands.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-91-generic x86_64)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> * Documentation:  https://help.ubuntu.com\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> * Management:     https://landscape.canonical.com\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> * Support:        https://ubuntu.com/advantage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  System information as of Sun Mar  3 03:54:34 AM UTC 2024\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  System load:  0.0               Processes:             100\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Usage of /:   5.1% of 37.23GB   Users logged in:       0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Memory usage: 5%                IPv4 address for eth0: 162.55.37.168\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Swap usage:   0%                IPv6 address for eth0: 2a01:4f8:c012:7c82::1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Expanded Security Maintenance for Applications is not enabled.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0 updates can be applied immediately.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Enable ESM Apps to receive additional future security updates.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>See https://ubuntu.com/esm or run: sudo pro status\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>The list of available updates is more than a week old.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>To check for new updates run: sudo apt update\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>root@ubuntu-4gb-fsn1-1:~#\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>If you go to \u003Ca href=\"https://coolify.io/docs/installation\">Coolify.io docs\u003C/a> and search for installation, you should see the installation script which looks like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -fsSL\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://cdn.coollabs.io/coolify/install.sh\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> bash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Enter the command and let the installation script do its thing. Once that’s complete, you will see an output with an IP address where you can access the Coolify instance on your server, in my case it was \u003Ccode>http://162.55.37.168:8000\u003C/code>.\u003C/p>\u003Cp>\u003Cimg src=\"/images/coolify-installation.gif\" alt=\"Coolify installing in the terminal gif\">\u003C/p>\u003Cp>Copy the IP address along with the port and enter that in your browser’s URL. You will be directed to the registration screen for Coolify.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"coolify-onboarding-experience\">Coolify Onboarding Experience\u003C/h2>\u003Cp>When you follow the IP address from the Coolify installation, you will be taken to a registration page.\u003C/p>\u003Cp>Sign up to log in to the Coolify instance where we will host it on your domain.\u003C/p>\u003Cp>Be sure to use a strong, unique password since this is how you will interface with Coolify on your custom domain.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-registration.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify onboarding registration form&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You will be prompted with a series of onboarding questions. Just keep clicking next until you see the page, “Server”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-welcome.png&#x22;,&#x22;alt&#x22;:&#x22;Welcome to the Coolify page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You will select “localhost” as that’s where this instance of Coolify is installed.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-server-selection.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify onboarding - server-type options&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then you will create your first project. These projects are a way to organize your resources under one umbrella. Here you will be adding your first project so click on “Let’s create a new one”. This will create a project called, “My first project” for you.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-project-selection.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify onboarding - project selection&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>After that, the next page says something about adding resources. Resources are things that your app or website needs such as databases, servers, etc. Click on the “Let’s do it!” button.\u003C/p>\u003Cp>If you’re deploying a static site, chances are, you only have one resource to deploy. Select the “Public Repository” resource.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-add.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify - create a resource page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>When you click that, you will be asked which server you like to use. There should be only one and that’s “localhost” from before.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-add-server.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify resource select server option&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then it will ask you to select a Destination. Just choose the only option which should be a Standalone Docker instance called “localhost-coolify”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-destination.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify resource select destination option&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>And lastly, it will ask you for the URL for the public repository. Paste the URL of your public repo into the field.\u003C/p>\u003Cp>It will get the metadata from the Git repo and should populate all the necessary details.\u003C/p>\u003Cp>The important part here is the \u003Cstrong>Publish Directory\u003C/strong> where the build output will be.\u003C/p>\u003Cp>Also, toggle the “Is it a static site” toggle if it applies to you.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-source-repo.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify - creating a new application page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You should now see a configuration page for the resource you just created.\u003C/p>\u003Cp>There’s a lot on this screen but we’re going to focus solely on deploying to see if we can get Coolify to build our application.\u003C/p>\u003Cp>On the top right corner, click “Deploy”\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-resource-config.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify&#x27;s application configuration page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You will be taken to the Deployment page and your build logs will start appearing.\u003C/p>\u003Cp>Hopefully, there won’t be any errors and you will see a “New container started” as the last log entry and your deployment says “Finished”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-app-deploy.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify&#x27;s deployment page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>To test to see if Coolify can serve the website, click on the “Open Application” button and select the auto-generated link to view your site.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-app-open.png&#x22;,&#x22;alt&#x22;:&#x22;opening deployment application on Coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You should see your site being served by Coolify.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-app-website.png&#x22;,&#x22;alt&#x22;:&#x22;my website live on URL that Coolify provided&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Keep your Coolify page open for the next part as we still need to tinker with it later.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"proxy-domain-from-cloudflare-to-coolify\">Proxy domain from Cloudflare to Coolify\u003C/h2>\u003Cp>Now all we need to do is some configuration between Cloudflare and Coolify. We need to point our domain in Cloudflare to our Hetzner server and Coolify will serve our applications.\u003C/p>\u003Cp>It took me a long time to figure this out so there might be some trial and error on your part, but I hope this next set of instructions just works for you.\u003C/p>\u003Csection>\u003Ch3 id=\"enforce-strict-ssltsl-mode\">Enforce Strict SSL/TSL Mode\u003C/h3>\u003Cp>This next part is important! Navigate to the SSL/TLS page in Cloudflare.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting//cloudflare-ssl.png&#x22;,&#x22;alt&#x22;:&#x22;navigation menu showing how to get to Cloudflare&#x27;s SSL overview&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>We want to turn on SSL Full (strict) mode to allow Coolify to serve HTTPS for us.\u003C/p>\u003Cp>By default, SSL will be on Flexible mode and if you had this on, both Coolify and Cloudflare will be stuck in a redirect loop causing the page to throw a “Too many redirects” error.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-ssl-full-strict.png&#x22;,&#x22;alt&#x22;:&#x22;selecting the Full Strict option in Cloudflare SSL/TLS page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"access-coolify-from-our-domain\">Access Coolify from our domain\u003C/h3>\u003Cp>In your Cloudflare dashboard, go to the DNS Records Management page for your domain. We want to add a subdomain for our Coolify instance.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-dns-management.png&#x22;,&#x22;alt&#x22;:&#x22;navigation menu showing how to get to Cloudflare&#x27;s DNS records management&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Add a new “\u003Cstrong>A\u003C/strong>” record, with the hostname “\u003Cstrong>coolify**\u003C/strong>”, and the value is the IP address of your remote server, and click save.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-dns-coolify.png&#x22;,&#x22;alt&#x22;:&#x22;creating Coolify instance DNS record&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Go back to Coolify, and go to the Settings page.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-settings.png&#x22;,&#x22;alt&#x22;:&#x22;navigation menu showing how to get to Coolify&#x27;s settings page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>In the “\u003Cstrong>Instance’s Domain\u003C/strong>” field, type out \u003Ccode>https://coolify.&#x3C;your_domain>\u003C/code>.\u003C/p>\u003Cp>Notice that we added HTTPS here. Coolify will automatically generate an SSL cert when it sees this configuration. Be sure to hit save.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-instance-url.png&#x22;,&#x22;alt&#x22;:&#x22;configuring Coolify&#x27;s setting to point to the domain&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Let’s see if we can now access our Coolify instance from our domain instead of the Hetzner server IP address.\u003C/p>\u003Cp>Head over to \u003Ccode>https://coolify.&#x3C;your_domain>\u003C/code> and check out your new Coolify on your domain!\u003C/p>\u003Cp>If it doesn’t load yet, wait a few moments until the DNS propagates.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-domain.png&#x22;,&#x22;alt&#x22;:&#x22;Custom domain website hosting Coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Now login with the credentials you used to register in the initial Coolify setup, and you should now be at the Coolify dashboard.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"link-the-coolify-app-to-your-domain\">Link the Coolify app to your domain\u003C/h3>\u003Cp>From the Coolify dashboard, navigate back to your project configuration dashboard.\u003C/p>\u003Cp>We’re going to change the auto-generated domain that Coolify created to use our domain.\u003C/p>\u003Cp>Type in your domain and then click save. After you save, make sure to click “Redeploy” or else this won’t work.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/coolify-custom-domain.png&#x22;,&#x22;alt&#x22;:&#x22;configuring custom domain in Coolify&#x27;s application configuration page&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Back to Cloudflare, we need to create more DNS records to make sure our domain is pointed to our server.\u003C/p>\u003Cp>So head on back to the Cloudflare DNS Management and enter a new “\u003Cstrong>A\u003C/strong>” record, with the hostname ”\u003Cstrong>@\u003C/strong>”, and the value should be the Hetzner server IP address.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-dns-domain.png&#x22;,&#x22;alt&#x22;:&#x22;entering DNS record for custom domain&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Now give it a couple of minutes and visit your domain. You should see live! How cool is that?\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/custom-domain.png&#x22;,&#x22;alt&#x22;:&#x22;Custom domain running off Cloudflare and Coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"redirect-www-to-non-www\">Redirect www to non-www\u003C/h2>\u003Cp>We’re almost done with the long tutorial. I was excited when I got this far and I hope you are too.\u003C/p>\u003Cp>This last part is the final section and what we’re going to do is redirect our \u003Ccode>www.&#x3C;domain>\u003C/code> to just \u003Ccode>&#x3C;domain>\u003C/code>.\u003C/p>\u003Cp>All of this will happen in Cloudflare so we don’t need to mess around with Coolify.\u003C/p>\u003Cp>In Cloudflare, back in our DNS management, we’re going to add two records.\u003C/p>\u003Cp>The first one is an “\u003Cstrong>A\u003C/strong>” record, with the name of “\u003Cstrong>www\u003C/strong>”, and the value of \u003Ccode>192.0.2.1\u003C/code>.\u003C/p>\u003Cp>This is saying we are creating an ALIAS record that uses the \u003Ccode>www\u003C/code> subdomain, and we are pointing to a dummy IPv4 address.\u003C/p>\u003Cp>The dummy IPv4 address is insignificant since Cloudflare will redirect all traffic before reaching the IP address.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-ipv4.png&#x22;,&#x22;alt&#x22;:&#x22;entering DNS record for ipv4&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Now we’ll create the IPv6 version with another “\u003Cstrong>AAAA\u003C/strong>” with the name same name but this time the IPv6 address is \u003Ccode>100::\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-ipv6.png&#x22;,&#x22;alt&#x22;:&#x22;entering DNS record for ipv6&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>While that’s being propagated, we need to set up the actual redirect rules in Cloudflare.\u003C/p>\u003Cp>Head over to the Rules Redirect page\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-rules.png&#x22;,&#x22;alt&#x22;:&#x22;navigation menu showing how to get to Cloudflare&#x27;s redirect rules&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Once there, click on ”+ Create rule” where you’ll be taken to a form.\u003C/p>\u003Cp>Add the name of your Redirect Rule. I named mine “www to apex”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-name.png&#x22;,&#x22;alt&#x22;:&#x22;enter the redirect rule name&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Then click on “Edit expression” where you’ll type in the rule expression. Replace \u003Ccode>billyle.dev\u003C/code> with your actual domain.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-edit-expression.png&#x22;,&#x22;alt&#x22;:&#x22;arrow showing how to edit expressions&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>(http.request.full_uri contains \"www.billyle.dev\")\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-expression.png&#x22;,&#x22;alt&#x22;:&#x22;condition criteria inside edit expressions&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The last input field is where Cloudflare does something when it matches the condition above.\u003C/p>\u003Cp>We want a “Dynamic”, with a “301” permanent redirect and our expression will be:\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/self-hosting/cloudflare-redirect-dynamic.png&#x22;,&#x22;alt&#x22;:&#x22;dynamic redirect expression with status code 301&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>concat(\"https://\",\"billyle.dev\",http.request.uri.path)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Again, replace \u003Ccode>billyle.dev\u003C/code> with your actual domain and make sure the “Preserve query string” is checked.\u003C/p>\u003Cp>Now test it out after a few minutes to see if it works. Visit \u003Ccode>www.&#x3C;your_domain>\u003C/code> and see if it redirects you to the root domain.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"thats-it-youre-done\">That’s it! You’re done!\u003C/h2>\u003Cp>Wow, that was a lot! I’m glad you made it all the way through. I hope you’re proud of what you did here.\u003C/p>\u003Cp>This is our new journey down self-hosting PaaS. The days of paying for a droplet and managed DB are over for me.\u003C/p>\u003Cp>You’ve learned how to create a remote server with Hetzner, SSH into it, and install Coolify. Then you managed to link your domain to Coolify and deploy your website!\u003C/p>\u003Cp>If you have any questions, feel free to email me or contact me through my social media links.\u003C/p>\u003Cp>And thank you for reading! Hope you have a great rest of your day wherever you are.\u003C/p>\u003C/section>",{"headings":980,"imagePaths":1017,"frontmatter":934},[981,984,987,990,993,996,999,1002,1005,1008,1011,1014],{"depth":230,"slug":982,"text":983},"what-youre-going-to-need","What you’re going to need",{"depth":230,"slug":985,"text":986},"creating-your-ssh-key","Creating your SSH key",{"depth":230,"slug":988,"text":989},"shopping-on-hetzner","Shopping on Hetzner",{"depth":234,"slug":991,"text":992},"add-your-ssh-key","Add your SSH key",{"depth":230,"slug":994,"text":995},"installing-coolify","Installing Coolify",{"depth":230,"slug":997,"text":998},"coolify-onboarding-experience","Coolify Onboarding Experience",{"depth":230,"slug":1000,"text":1001},"proxy-domain-from-cloudflare-to-coolify","Proxy domain from Cloudflare to Coolify",{"depth":234,"slug":1003,"text":1004},"enforce-strict-ssltsl-mode","Enforce Strict SSL/TSL Mode",{"depth":234,"slug":1006,"text":1007},"access-coolify-from-our-domain","Access Coolify from our domain",{"depth":234,"slug":1009,"text":1010},"link-the-coolify-app-to-your-domain","Link the Coolify app to your domain",{"depth":230,"slug":1012,"text":1013},"redirect-www-to-non-www","Redirect www to non-www",{"depth":230,"slug":1015,"text":1016},"thats-it-youre-done","That’s it! You’re done!",[946,947,948,949,950,951,952,953,954,444,445,955,956,957,958,959,960,961,425,962,963,964,965,966,967,968,969,970,971,972,973,974,975],"self-hosting-your-website-with-coolify-v4-a-step-by-step-guide.md","use-husky-and-node-to-unstage-draft-posts-from-git",{"id":1019,"data":1021,"body":1030,"filePath":1031,"assetImports":1032,"digest":1037,"rendered":1038,"legacyId":1079},{"title":1022,"pubDate":1023,"description":1024,"author":1025,"image":1026,"tags":1029,"draft":211,"readingTime":514,"lastDateModified":343},"Use Husky and Node to Unstage Draft Blog Posts From Git",["Date","2024-03-21T00:00:00.000Z"],"I had a problem where my draft blog posts were being committed to my GitHub repository. This might seem like an insignificant issue, but I didn't want a work-in-progress to be publicly viewable. So that's where I came up with a solution to use Husky and a Node script to prevent that.",{"name":203,"email":204},{"url":1027,"alt":1028,"className":208},"https://images.unsplash.com/photo-1503095396549-807759245b35","silhouettes of three people on stage",[307,656,80,582],"Astro allows us to only create static files during the build step for published work by filtering through the collection and filtering out draft posts. But it doesn't prevent Git from knowing the context of your collection.\n\nSo what ends up happening is you might check in your drafts in your Git history. For me, I didn't want my draft blog posts to be viewable until they were ready to be published.\n\nI thought about adding my draft files into another folder and using gitignore, but it wasn't an elegant solution since I have to manually move files from the drafts folder and into the proper folder each time I want to publish a blog.\n\nA solution I came up with was to use Husky to trigger pre-commit scripts and unstaged all my markdown drafts. I'll show you exactly how I did that below.\n\n## What is Husky?\n\nIf you don't know what Husky is, it's a program that will run during different life cycles of your Git workflow. This is particularly useful for doing a bunch of things before and after committing files in your Git history.\n\nUsually, you will see the `pre-commit` hook often used for performing linting, prettifying, or running tests on your project.\n\n### List of Git Hooks Husky supports\n\nHusky supports all client-side Git hooks. There are 13 of them in total.\n\n- applypatch-msg\n- commit-msg\n- post-applypatch\n- post-checkout\n- post-commit\n- post-merge\n- post-rewrite\n- pre-applypatch\n- pre-auto-gc\n- pre-commit\n- pre-push\n- pre-rebase\n- prepare-commit-msg\n\nIf you're interested in what Git hooks are, here is a list of all the different [Git hooks](https://git-scm.com/docs/githooks).\n\n## Install Husky\n\nTo [install Husky](https://typicode.github.io/husky/), you need to have `Node` installed since you will use `npm`.\n\nI use `pnpm`, but you can use any package manager supported in the link above.\n\nRun the command `pnpm add husky -D`. This will install Husky as a devDependency.\n\nThen run `pnpm exec husky init`, so Husky can take care of the setup for you.\n\nIf you look in your project now, you should see a `.husky` folder. If you look inside, you will see a `pre-commit` file with the command `pnpm test` inside.\n\n![husky post setup files](./_images/husky-node-unstage/husky-post-setup.png)\n\nAs a concept, if you tried to run `git add .` and `git commit -m \"my message\"` the pre-commit hook will trigger and run `pnpm test`. If your test happens to fail, then it won't commit anything and your Git history remains untouched otherwise you're golden.\n\n## Retrieving a list of your staged files\n\nNow we need a way to list out all the files that are staged in Git. Luckily for us, we can do that with this command, `git diff --name-status --staged`.\n\nThis command grabs all staged files that were changed and returns the status mode and file names. This is how it would look in your terminal:\n\n![list of files staged](./_images/husky-node-unstage/list-staged-files.png)\n\nPress \u003Ckbd>q\u003C/kbd> to kill the process.\n\n## Preparing the Node script\n\nOur next step requires us to write a Node script. Since my project is written in Typescript and I want to take advantage of the type system, so I am using `ts-node` to run the script.\n\nHowever, if you're just using Node, then you can change the file extension to `.js`, and remove the types, and it should work the same.\n\n### Prerequisites\n\n- Install `front-matter` and `ts-node` packages\n- Ensure you have a Post schema type\n\nWe need a way to read from our front matter in our `.md` files. I found this package, [front-matter](https://www.npmjs.com/package/front-matter), that easily allows us to get key-value pairs of our markdown.\n\n### The meat of the script\n\nI created a file in my root directory called `unstage-drafts.ts`.\n\nWe'll need to change who can access the file with `chmod`, so in your terminal run the command `chmod 777 unstage-drafts.ts` to change the permissions.\n\nThen inside the file, I wrote this script:\n\n```typescript\nimport fs from \"node:fs/promises\";\nimport childProcess from \"node:child_process\";\nimport util from \"node:util\";\nimport fm from \"front-matter\";\nimport type { Post } from \"src/content/config.ts\";\n\nconst execPromise = util.promisify(childProcess.exec);\n\nlet data = \"\";\n\nprocess.stdin.on(\"readable\", () => {\n  let chunk;\n\n  while (null !== (chunk = process.stdin.read())) {\n    data += chunk;\n  }\n});\n\nprocess.stdin.on(\"end\", async () => {\n  // process all markdown files and unstage any draft posts\n  const stagedFiles: string[] = [];\n  const markdownFiles: string[] = [];\n\n  data\n    .split(\"\\n\")\n    .filter((x) => x)\n    .forEach((line) => {\n      if (line.endsWith(\".md\")) {\n        if (!line.startsWith(\"D\")) {\n          const markdownFile = line.split(\"\\t\")[1] as string;\n          markdownFiles.push(markdownFile);\n        }\n      } else {\n        stagedFiles.push(line);\n      }\n    });\n\n  let draftCount = 0;\n\n  for (const file of markdownFiles) {\n    const content = await fs\n      .readFile(file, { encoding: \"utf-8\" })\n      .then((f) => fm\u003CPost>(f));\n\n    if (content.attributes.draft) {\n      draftCount++;\n      await execPromise(`git reset ${file}`);\n    }\n  }\n\n  if (draftCount === markdownFiles.length && !stagedFiles.length) {\n    throw Error(\"only draft posts were staged.\");\n  }\n});\n```\n\n### Script breakdown\n\nLet's do a quick break of what's going on.\n\nThe necessary imports of modules I'm using:\n\n```typescript\nimport fs from \"node:fs/promises\";\nimport childProcess from \"node:child_process\";\nimport util from \"node:util\";\nimport fm from \"front-matter\";\nimport type { Post } from \"src/content/config.ts\";\n```\n\nThe command `git diff --name-status --staged` writes to out `stdout`, so we can read from it in Node by using `process.stdin`.\n\nHere we're listening to the event \"readable\" which is a stream of bytes. Then each chunk is appended in our `data` variable.\n\n```typescript\nlet data = \"\";\n\nprocess.stdin.on(\"readable\", () => {\n  let chunk;\n\n  while (null !== (chunk = process.stdin.read())) {\n    data += chunk;\n  }\n});\n```\n\nWe're going to `promisify()` our `childProcess.exec`, so we can await it later.\n\n```typescript\nconst execPromise = util.promisify(childProcess.exec);\n```\n\nWhen our readable stream ends, we will listen to the event `end` and run an async callback function that uses the `data` variable to process all the staged files.\n\n```typescript\nprocess.stdin.on(\"end\", async () => {});\n```\n\nI have two variables - one that will keep track of non-`.md` files and another to store markdown files, respectfully called `stagedFiles` and `markdownFiles`.\n\nI split the data by new lines and then filtered valid entries. Then for each item in the array, I test some conditions to check whether the file is `.md` or not.\n\nIf it is a markdown file, we want to check if it's not a `D` status. The \"D\" status here means that I've untracked the file that was previously tracked by Git and I don't want to unstage those changes.\n\nIf it is not \"D\" then we push it to the `markdownFiles`.\n\n```typescript\nconst stagedFiles: string[] = [];\nconst markdownFiles: string[] = [];\n\ndata\n  .split(\"\\n\")\n  .filter((x) => x)\n  .forEach((line) => {\n    if (line.endsWith(\".md\")) {\n      if (!line.startsWith(\"D\")) {\n        const markdownFile = line.split(\"\\t\")[1] as string;\n        markdownFiles.push(markdownFile);\n      }\n    } else {\n      stagedFiles.push(line);\n    }\n  });\n```\n\nAfter we have a list of our staged markdown files, we're going to process each file in a for loop and read from the front matter. If the post is a draft, we update a counter and call `await execPromise()` to unstage it.\n\n```typescript\nlet draftCount = 0;\n\nfor (const file of markdownFiles) {\n  const content = await fs\n    .readFile(file, { encoding: \"utf-8\" })\n    .then((f) => fm\u003CPost>(f));\n\n  if (content.attributes.draft) {\n    draftCount++;\n    await execPromise(`git reset ${file}`);\n  }\n}\n```\n\nThis next condition is a guard to check if there are staged files to commit while also checking if all staged markdown files were drafts. If this ends up being true, it must mean we probably did a `git commit` on staged files that were only markdown drafts. I threw an error so that there isn't an empty commit history if this does happen.\n\n```typescript\nif (draftCount === markdownFiles.length && !stagedFiles.length) {\n  throw Error(\"only draft posts were staged.\");\n}\n```\n\nThat's the entirety of the script. As you can see, you can do a lot more in this script if there are extra requirements.\n\n## Piping it all together\n\nBack in our `.husky/pre-commit` file where we had a single line of `pnpm test`, we're going to replace that by combining both the `git diff` and the Node script by using the piping method.\n\nReplace `pnpm test` with `git diff --name-status --staged | node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' unstage-drafts.ts`\n\n![content of the pre-commit to use node script](./_images/husky-node-unstage/pre-commit-piping-script.png)\n\nThe verboseness of the command above is important to Typescript and Node.\n\nIf you're not using Typescript, it will look a lot simpler:\n`git diff --name-status --staged | node unstage-drafts.ts`\n\n## Untracked files committed to history\n\nThere's one other important thing that I want to do -- removing my existing drafts in my Git history, so they are no longer available in my public repo.\n\nTo do that, run the command `git rm --cached \u003Cpath/to/file>`.\n\nI have one file, `learning-golang-for-javascript-developers.md`, that is a draft and is already in my Git history. I want to remove it so I run `git rm --cached src/content/posts/learning-golang-for-javascript-developers.md`.\n\nNow the file is labeled as Untracked by Git.\n\n![showing files that were untracked](./_images/husky-node-unstage/untrack-files.png)\n\n## Seeing the pre-commit hook in action\n\nTime to put it to the test and make sure our drafts are no longer being committed. Running the commands in order to make sure I have everything staged correctly.\n\n1. `git add .`\n2. `git rm --cached src/content/posts/learning-golang-for-javascript-developers.md`\n3. then followed by `git status`.\n\nThis is the output:\n\n```\n➜  billyle.dev git:(ft/husky-precommit) ✗ git status\nOn branch ft/husky-precommit\nChanges to be committed:\n  (use \"git restore --staged \u003Cfile>...\" to unstage)\n        modified:   .astro/types.d.ts\n        new file:   .husky/pre-commit\n        modified:   package.json\n        modified:   pnpm-lock.yaml\n        new file:   public/images/blog/husky-node-unstage/husky-post-setup.png\n        new file:   public/images/blog/husky-node-unstage/list-staged-files.png\n        new file:   public/images/blog/husky-node-unstage/pre-commit-piping-script.png\n        new file:   public/images/blog/husky-node-unstage/untrack-files.png\n        modified:   src/content/config.ts\n        deleted:    src/content/posts/learning-golang-for-javascript-developers.md\n        new file:   src/content/posts/use-husky-and-node-to-unstage-draft-posts-from-git.md\n        modified:   src/layouts/BlogLayout.astro\n        new file:   unstage-drafts.ts\n\nUntracked files:\n  (use \"git add \u003Cfile>...\" to include in what will be committed)\n        src/content/posts/learning-golang-for-javascript-developers.md\n```\n\nNow I will make a `git commit -m \"remove existing drafts from git history and unstage drafts\"` and see that this blog post is removed from the staging area.\n\nChecking `git status` shows me:\n\n```\n➜  billyle.dev git:(ft/husky-precommit) ✗ git status\nOn branch ft/husky-precommit\nUntracked files:\n  (use \"git add \u003Cfile>...\" to include in what will be committed)\n        src/content/posts/learning-golang-for-javascript-developers.md\n        src/content/posts/use-husky-and-node-to-unstage-draft-posts-from-git.md\n```\n\nAwesome! It worked! I can freely work on all my draft blog posts without ever checking them into Git again.\n\n## The takeaway\n\nSo if you're like me and want some bit of automation in your creative process, you can use this solution. I'm pretty sure there are better ones out there but if you like this approach, feel free to take it and use it as your own.\n\nIn summary, we learned how to use Husky, piping the `git diff --name-status --staged` command output into Node, and letting our script unstaged draft blog posts.\n\nI hope you learned something today and if not, that's alright! I'm glad you took the time to read it anyway.\n\nWell, until next time, happy coding!","src/content/posts/use-husky-and-node-to-unstage-draft-posts-from-git.md",[1033,1034,1035,1036],"./_images/husky-node-unstage/husky-post-setup.png","./_images/husky-node-unstage/list-staged-files.png","./_images/husky-node-unstage/pre-commit-piping-script.png","./_images/husky-node-unstage/untrack-files.png","64f5a8caa4f84aa4",{"html":1039,"metadata":1040},"\u003Cp>Astro allows us to only create static files during the build step for published work by filtering through the collection and filtering out draft posts. But it doesn’t prevent Git from knowing the context of your collection.\u003C/p>\n\u003Cp>So what ends up happening is you might check in your drafts in your Git history. For me, I didn’t want my draft blog posts to be viewable until they were ready to be published.\u003C/p>\n\u003Cp>I thought about adding my draft files into another folder and using gitignore, but it wasn’t an elegant solution since I have to manually move files from the drafts folder and into the proper folder each time I want to publish a blog.\u003C/p>\n\u003Cp>A solution I came up with was to use Husky to trigger pre-commit scripts and unstaged all my markdown drafts. I’ll show you exactly how I did that below.\u003C/p>\n\u003Csection>\u003Ch2 id=\"what-is-husky\">What is Husky?\u003C/h2>\u003Cp>If you don’t know what Husky is, it’s a program that will run during different life cycles of your Git workflow. This is particularly useful for doing a bunch of things before and after committing files in your Git history.\u003C/p>\u003Cp>Usually, you will see the \u003Ccode>pre-commit\u003C/code> hook often used for performing linting, prettifying, or running tests on your project.\u003C/p>\u003Csection>\u003Ch3 id=\"list-of-git-hooks-husky-supports\">List of Git Hooks Husky supports\u003C/h3>\u003Cp>Husky supports all client-side Git hooks. There are 13 of them in total.\u003C/p>\u003Cul>\n\u003Cli>applypatch-msg\u003C/li>\n\u003Cli>commit-msg\u003C/li>\n\u003Cli>post-applypatch\u003C/li>\n\u003Cli>post-checkout\u003C/li>\n\u003Cli>post-commit\u003C/li>\n\u003Cli>post-merge\u003C/li>\n\u003Cli>post-rewrite\u003C/li>\n\u003Cli>pre-applypatch\u003C/li>\n\u003Cli>pre-auto-gc\u003C/li>\n\u003Cli>pre-commit\u003C/li>\n\u003Cli>pre-push\u003C/li>\n\u003Cli>pre-rebase\u003C/li>\n\u003Cli>prepare-commit-msg\u003C/li>\n\u003C/ul>\u003Cp>If you’re interested in what Git hooks are, here is a list of all the different \u003Ca href=\"https://git-scm.com/docs/githooks\">Git hooks\u003C/a>.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"install-husky\">Install Husky\u003C/h2>\u003Cp>To \u003Ca href=\"https://typicode.github.io/husky/\">install Husky\u003C/a>, you need to have \u003Ccode>Node\u003C/code> installed since you will use \u003Ccode>npm\u003C/code>.\u003C/p>\u003Cp>I use \u003Ccode>pnpm\u003C/code>, but you can use any package manager supported in the link above.\u003C/p>\u003Cp>Run the command \u003Ccode>pnpm add husky -D\u003C/code>. This will install Husky as a devDependency.\u003C/p>\u003Cp>Then run \u003Ccode>pnpm exec husky init\u003C/code>, so Husky can take care of the setup for you.\u003C/p>\u003Cp>If you look in your project now, you should see a \u003Ccode>.husky\u003C/code> folder. If you look inside, you will see a \u003Ccode>pre-commit\u003C/code> file with the command \u003Ccode>pnpm test\u003C/code> inside.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/husky-node-unstage/husky-post-setup.png&#x22;,&#x22;alt&#x22;:&#x22;husky post setup files&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>As a concept, if you tried to run \u003Ccode>git add .\u003C/code> and \u003Ccode>git commit -m \"my message\"\u003C/code> the pre-commit hook will trigger and run \u003Ccode>pnpm test\u003C/code>. If your test happens to fail, then it won’t commit anything and your Git history remains untouched otherwise you’re golden.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"retrieving-a-list-of-your-staged-files\">Retrieving a list of your staged files\u003C/h2>\u003Cp>Now we need a way to list out all the files that are staged in Git. Luckily for us, we can do that with this command, \u003Ccode>git diff --name-status --staged\u003C/code>.\u003C/p>\u003Cp>This command grabs all staged files that were changed and returns the status mode and file names. This is how it would look in your terminal:\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/husky-node-unstage/list-staged-files.png&#x22;,&#x22;alt&#x22;:&#x22;list of files staged&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Press \u003Ckbd>q\u003C/kbd> to kill the process.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"preparing-the-node-script\">Preparing the Node script\u003C/h2>\u003Cp>Our next step requires us to write a Node script. Since my project is written in Typescript and I want to take advantage of the type system, so I am using \u003Ccode>ts-node\u003C/code> to run the script.\u003C/p>\u003Cp>However, if you’re just using Node, then you can change the file extension to \u003Ccode>.js\u003C/code>, and remove the types, and it should work the same.\u003C/p>\u003Csection>\u003Ch3 id=\"prerequisites\">Prerequisites\u003C/h3>\u003Cul>\n\u003Cli>Install \u003Ccode>front-matter\u003C/code> and \u003Ccode>ts-node\u003C/code> packages\u003C/li>\n\u003Cli>Ensure you have a Post schema type\u003C/li>\n\u003C/ul>\u003Cp>We need a way to read from our front matter in our \u003Ccode>.md\u003C/code> files. I found this package, \u003Ca href=\"https://www.npmjs.com/package/front-matter\">front-matter\u003C/a>, that easily allows us to get key-value pairs of our markdown.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"the-meat-of-the-script\">The meat of the script\u003C/h3>\u003Cp>I created a file in my root directory called \u003Ccode>unstage-drafts.ts\u003C/code>.\u003C/p>\u003Cp>We’ll need to change who can access the file with \u003Ccode>chmod\u003C/code>, so in your terminal run the command \u003Ccode>chmod 777 unstage-drafts.ts\u003C/code> to change the permissions.\u003C/p>\u003Cp>Then inside the file, I wrote this script:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:fs/promises\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> childProcess \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:child_process\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> util \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:util\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fm \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"front-matter\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Post } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"src/content/config.ts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> execPromise\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> util.\u003C/span>\u003Cspan style=\"color:#B392F0\">promisify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(childProcess.exec);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"readable\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> chunk;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#F97583\"> !==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (chunk \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    data \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> chunk;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"end\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // process all markdown files and unstage any draft posts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stagedFiles\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownFiles\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">line\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (line.\u003C/span>\u003Cspan style=\"color:#B392F0\">endsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".md\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">line.\u003C/span>\u003Cspan style=\"color:#B392F0\">startsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"D\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownFile\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\t\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          markdownFiles.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(markdownFile);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        stagedFiles.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> draftCount \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownFiles) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> content\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(file, { encoding: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> fm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(f));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (content.attributes.draft) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      draftCount\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      await\u003C/span>\u003Cspan style=\"color:#B392F0\"> execPromise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`git reset ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (draftCount \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownFiles.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stagedFiles.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"only draft posts were staged.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003Csection>\u003Ch3 id=\"script-breakdown\">Script breakdown\u003C/h3>\u003Cp>Let’s do a quick break of what’s going on.\u003C/p>\u003Cp>The necessary imports of modules I’m using:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:fs/promises\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> childProcess \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:child_process\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> util \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node:util\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fm \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"front-matter\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#F97583\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Post } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"src/content/config.ts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>The command \u003Ccode>git diff --name-status --staged\u003C/code> writes to out \u003Ccode>stdout\u003C/code>, so we can read from it in Node by using \u003Ccode>process.stdin\u003C/code>.\u003C/p>\u003Cp>Here we’re listening to the event “readable” which is a stream of bytes. Then each chunk is appended in our \u003Ccode>data\u003C/code> variable.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"readable\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> chunk;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#F97583\"> !==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (chunk \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    data \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> chunk;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>We’re going to \u003Ccode>promisify()\u003C/code> our \u003Ccode>childProcess.exec\u003C/code>, so we can await it later.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> execPromise\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> util.\u003C/span>\u003Cspan style=\"color:#B392F0\">promisify\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(childProcess.exec);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>When our readable stream ends, we will listen to the event \u003Ccode>end\u003C/code> and run an async callback function that uses the \u003Ccode>data\u003C/code> variable to process all the staged files.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">process.stdin.\u003C/span>\u003Cspan style=\"color:#B392F0\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"end\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I have two variables - one that will keep track of non-\u003Ccode>.md\u003C/code> files and another to store markdown files, respectfully called \u003Ccode>stagedFiles\u003C/code> and \u003Ccode>markdownFiles\u003C/code>.\u003C/p>\u003Cp>I split the data by new lines and then filtered valid entries. Then for each item in the array, I test some conditions to check whether the file is \u003Ccode>.md\u003C/code> or not.\u003C/p>\u003Cp>If it is a markdown file, we want to check if it’s not a \u003Ccode>D\u003C/code> status. The “D” status here means that I’ve untracked the file that was previously tracked by Git and I don’t want to unstage those changes.\u003C/p>\u003Cp>If it is not “D” then we push it to the \u003Ccode>markdownFiles\u003C/code>.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> stagedFiles\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownFiles\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">line\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (line.\u003C/span>\u003Cspan style=\"color:#B392F0\">endsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".md\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">line.\u003C/span>\u003Cspan style=\"color:#B392F0\">startsWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"D\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> markdownFile\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\t\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        markdownFiles.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(markdownFile);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      stagedFiles.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>After we have a list of our staged markdown files, we’re going to process each file in a for loop and read from the front matter. If the post is a draft, we update a counter and call \u003Ccode>await execPromise()\u003C/code> to unstage it.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> draftCount \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownFiles) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> content\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(file, { encoding: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> fm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">Post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(f));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (content.attributes.draft) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    draftCount\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#B392F0\"> execPromise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`git reset ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">file\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>This next condition is a guard to check if there are staged files to commit while also checking if all staged markdown files were drafts. If this ends up being true, it must mean we probably did a \u003Ccode>git commit\u003C/code> on staged files that were only markdown drafts. I threw an error so that there isn’t an empty commit history if this does happen.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (draftCount \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> markdownFiles.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stagedFiles.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  throw\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"only draft posts were staged.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>That’s the entirety of the script. As you can see, you can do a lot more in this script if there are extra requirements.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"piping-it-all-together\">Piping it all together\u003C/h2>\u003Cp>Back in our \u003Ccode>.husky/pre-commit\u003C/code> file where we had a single line of \u003Ccode>pnpm test\u003C/code>, we’re going to replace that by combining both the \u003Ccode>git diff\u003C/code> and the Node script by using the piping method.\u003C/p>\u003Cp>Replace \u003Ccode>pnpm test\u003C/code> with \u003Ccode>git diff --name-status --staged | node --import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));' unstage-drafts.ts\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/husky-node-unstage/pre-commit-piping-script.png&#x22;,&#x22;alt&#x22;:&#x22;content of the pre-commit to use node script&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>The verboseness of the command above is important to Typescript and Node.\u003C/p>\u003Cp>If you’re not using Typescript, it will look a lot simpler:\n\u003Ccode>git diff --name-status --staged | node unstage-drafts.ts\u003C/code>\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"untracked-files-committed-to-history\">Untracked files committed to history\u003C/h2>\u003Cp>There’s one other important thing that I want to do — removing my existing drafts in my Git history, so they are no longer available in my public repo.\u003C/p>\u003Cp>To do that, run the command \u003Ccode>git rm --cached &#x3C;path/to/file>\u003C/code>.\u003C/p>\u003Cp>I have one file, \u003Ccode>learning-golang-for-javascript-developers.md\u003C/code>, that is a draft and is already in my Git history. I want to remove it so I run \u003Ccode>git rm --cached src/content/posts/learning-golang-for-javascript-developers.md\u003C/code>.\u003C/p>\u003Cp>Now the file is labeled as Untracked by Git.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/husky-node-unstage/untrack-files.png&#x22;,&#x22;alt&#x22;:&#x22;showing files that were untracked&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"seeing-the-pre-commit-hook-in-action\">Seeing the pre-commit hook in action\u003C/h2>\u003Cp>Time to put it to the test and make sure our drafts are no longer being committed. Running the commands in order to make sure I have everything staged correctly.\u003C/p>\u003Col>\n\u003Cli>\u003Ccode>git add .\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>git rm --cached src/content/posts/learning-golang-for-javascript-developers.md\u003C/code>\u003C/li>\n\u003Cli>then followed by \u003Ccode>git status\u003C/code>.\u003C/li>\n\u003C/ol>\u003Cp>This is the output:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>➜  billyle.dev git:(ft/husky-precommit) ✗ git status\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>On branch ft/husky-precommit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Changes to be committed:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  (use \"git restore --staged &#x3C;file>...\" to unstage)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        modified:   .astro/types.d.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   .husky/pre-commit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        modified:   package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        modified:   pnpm-lock.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   public/images/blog/husky-node-unstage/husky-post-setup.png\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   public/images/blog/husky-node-unstage/list-staged-files.png\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   public/images/blog/husky-node-unstage/pre-commit-piping-script.png\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   public/images/blog/husky-node-unstage/untrack-files.png\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        modified:   src/content/config.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        deleted:    src/content/posts/learning-golang-for-javascript-developers.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   src/content/posts/use-husky-and-node-to-unstage-draft-posts-from-git.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        modified:   src/layouts/BlogLayout.astro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        new file:   unstage-drafts.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Untracked files:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  (use \"git add &#x3C;file>...\" to include in what will be committed)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        src/content/posts/learning-golang-for-javascript-developers.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Now I will make a \u003Ccode>git commit -m \"remove existing drafts from git history and unstage drafts\"\u003C/code> and see that this blog post is removed from the staging area.\u003C/p>\u003Cp>Checking \u003Ccode>git status\u003C/code> shows me:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>➜  billyle.dev git:(ft/husky-precommit) ✗ git status\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>On branch ft/husky-precommit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Untracked files:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  (use \"git add &#x3C;file>...\" to include in what will be committed)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        src/content/posts/learning-golang-for-javascript-developers.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        src/content/posts/use-husky-and-node-to-unstage-draft-posts-from-git.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Awesome! It worked! I can freely work on all my draft blog posts without ever checking them into Git again.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"the-takeaway\">The takeaway\u003C/h2>\u003Cp>So if you’re like me and want some bit of automation in your creative process, you can use this solution. I’m pretty sure there are better ones out there but if you like this approach, feel free to take it and use it as your own.\u003C/p>\u003Cp>In summary, we learned how to use Husky, piping the \u003Ccode>git diff --name-status --staged\u003C/code> command output into Node, and letting our script unstaged draft blog posts.\u003C/p>\u003Cp>I hope you learned something today and if not, that’s alright! I’m glad you took the time to read it anyway.\u003C/p>\u003Cp>Well, until next time, happy coding!\u003C/p>\u003C/section>",{"headings":1041,"imagePaths":1078,"frontmatter":1021},[1042,1045,1048,1051,1054,1057,1060,1063,1066,1069,1072,1075],{"depth":230,"slug":1043,"text":1044},"what-is-husky","What is Husky?",{"depth":234,"slug":1046,"text":1047},"list-of-git-hooks-husky-supports","List of Git Hooks Husky supports",{"depth":230,"slug":1049,"text":1050},"install-husky","Install Husky",{"depth":230,"slug":1052,"text":1053},"retrieving-a-list-of-your-staged-files","Retrieving a list of your staged files",{"depth":230,"slug":1055,"text":1056},"preparing-the-node-script","Preparing the Node script",{"depth":234,"slug":1058,"text":1059},"prerequisites","Prerequisites",{"depth":234,"slug":1061,"text":1062},"the-meat-of-the-script","The meat of the script",{"depth":234,"slug":1064,"text":1065},"script-breakdown","Script breakdown",{"depth":230,"slug":1067,"text":1068},"piping-it-all-together","Piping it all together",{"depth":230,"slug":1070,"text":1071},"untracked-files-committed-to-history","Untracked files committed to history",{"depth":230,"slug":1073,"text":1074},"seeing-the-pre-commit-hook-in-action","Seeing the pre-commit hook in action",{"depth":230,"slug":1076,"text":1077},"the-takeaway","The takeaway",[1033,1034,1035,1036],"use-husky-and-node-to-unstage-draft-posts-from-git.md","how-docker-breathes-new-life-into-my-workflow",{"id":1080,"data":1082,"body":1092,"filePath":1093,"assetImports":1094,"digest":1097,"rendered":1098,"legacyId":1124},{"title":1083,"pubDate":1084,"description":1085,"author":1086,"image":1087,"tags":1090,"draft":211,"readingTime":888,"lastDateModified":343},"How Docker Breathes New Life into My Workflow",["Date","2024-04-30T00:00:00.000Z"],"If there's one thing I wish I had learned earlier in my career, it would be to use Docker. Docker has been such a blast to work with that I've been using it daily in my work. It's easy to get started with all the available offerings they have, and the learning curve gradually increases, which makes it an exciting challenge to master.",{"name":203,"email":204},{"url":1088,"alt":1089,"className":208},"https://images.unsplash.com/photo-1498084393753-b411b2d26b34","Ottawa road in the evening",[1091,418],"docker","Have you ever come across a tool and were so impressed by it that you tried to integrate it into your daily workflow? First was TailwindCSS and now I can say that about Docker.\n\nAs a frontend developer first, I haven't considered learning Docker at all since there wasn't a reason for me to do so.\n\nThat is until I launched my self-hosted Coolify which uses Docker itself to deploy my applications.\n\nEver since then, I've been practicing and learning Docker on all my new projects.\n\nAnd I wished I started sooner.\n\nUnderstanding how to use Docker benefits me greatly as it is being used everywhere. Especially in the cloud.\n\n## What is Docker 🐳?\n\nFrom what I understand, [Docker](https://www.docker.com) offers containerization products that allow you to package your application as images with all its dependencies and run them as containers.\n\nEach container is an instance of that image and you can run nearly infinite amounts if you had the resources.\n\nThat's why companies choose to build their infrastructure with containers; they scale well and meet the demands of their business.\n\nDocker has many different products from CLI tools to desktop applications that help manage your images and containers.\n\nThere is also a Docker Hub, a cloud repository for images that can be hosted publicly or privately and where you can find official images.\n\n## How do I use Docker?\n\nThere are several ways I'm using Docker at the moment. These include:\n\n1. Using [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n2. Interacting with the [Docker Client CLI](https://docs.docker.com/reference/cli/docker/)\n3. Docker as a Version Manager\n\nOf these three listed, I primarily use #2. Usually, I run `docker compose` commands to build and run my images in one go.\n\nI'll briefly describe how I use them below.\n\n### Docker Desktop - a must\n\nDocker Desktop is super neat. It does all the Docker things in one single beautiful UI.\n\nAnd it's easy to get around and inspect every aspect of it too.\n\nWith Docker Desktop, you can view your images, containers, and volumes. You can also pull in new images or push your own to Docker Hub.\n\n![Docker Desktop](./_images/docker-new-workflow/docker-desktop.png)\n\nOnce you have your containers running, you can inspect the container's contents, the logs, and some analytics like CPU and RAM usage.\n\nYou can launch VS Code from here by accessing the dropdown menu of a container.\n\nI like using Docker Desktop to monitor all my images, containers, volumes, and build history. I also use it to pull one-off images to play with by using the search tools.\n\nYou can easily access this by \u003Ckbd>⌘K\u003C/kbd> if you're coming from a MacOS device.\n\n![Docker Extension via VS Code](./_images/docker-new-workflow/docker-vs-code.png)\nIn VS Code, I can download the [Docker extension](https://code.visualstudio.com/docs/containers/overview) that features running docker commands by the right-click menu and inspect container files.\n\nThis is super helpful when you're troubleshooting why the Docker build is missing some dependencies.\n\nThere's **so much** you can do and I have yet to touch Docker Scout, Docker Swarm, and extensions.\n\n### Dockering through Docker CLI\n\nI like using the CLI since I don't have to leave VS Code to interact with my containers.\n\nNormally, I run `docker compose up --watch` and `docker compose down`.\n\nThe `--watch` flag watches for any changes you've specified in the `docker-compose.yaml` file.\n\n```docker\nservices:\n  app:\n      container_name: my_app\n      build: .\n      develop:\n        watch:\n          - path: .\n            action: sync\n            target: /app\n            ignore:\n              - node_modules/\n          - path: package.json\n            action: rebuild\n```\n\nThis configuration will watch any changes in my project using the watch fields.\n\nThere are three actions, `sync`, `rebuild`, and `restart`.\n\nI'm using `sync` to sync any changes done on the host machine, to also reflect in the container. This makes a seamless experience like you're developing locally.\n\nAnd if I ever need to install new dependencies, the action `rebuild` watches the `package.json` file, rebuilds the image, and launches new containers.\n\nLearning the CLI commands to start, stop, list, and remove images and containers is pretty helpful too.\n\nWhen I start using the CLI more frequently, I find myself not having to access the documentation as much anymore.\n\nLike if I want to run a container with an exposed port, I know that's `-p`.\n\nIf there are environment variables that I want to use, that would be `-e`.\n\nOnce I got the hang of it all, I was spinning up and down containers fairly easily.\n\n### My new version manager\n\nI use Docker as a way to manage different versions of technologies like PostgreSQL, Redis, etc.\n\nThe reason for this is that I don't have to worry about anything breaking if I'm working on an old project.\n\nFor example, there were some breaking changes with Node when I was using the latest version and working on an old project.\n\nI would try to run the server and it would spit out some cryptic error.\n\nA few minutes later, I realized that the project was using an earlier version of Node. 😓\n\nSo I would switch to the correct version of Node to get it working.\n\nWhile I can add some assistance for Node by updating the `package.json` with an `engines` field, it doesn't entirely solve the issue.\n\nI had to **manually** switch my Node version and some time was wasted. I don't like that.\n\nThis is why having Docker as a version manager is advantageous. All I needed to do was build the image and run a container. That's all!\n\nI haven't been using Docker for long so I don't know what all the pros and cons are but I think one downside of this approach is that you're using up more disk space by doing it this way.\n\n## Using Docker in Development\n\nI initially started using `docker init`. It's a command that quickly initializes your project with some Docker files.\n\nHowever, after a while, I stopped using it since I didn't quite fully understand the generated output.\n\nThat's why I find myself writing the `Dockerfile` or `docker-compose.yaml` by hand because it gives me a lot of practice and get a grasp of how Docker works.\n\nI make sure my `Dockerfile` can correctly build an image before I start working inside the compose file.\n\nHere is a simple Dockerfile which uses Node:\n\n```docker\n# Run as a non-privileged user\nFROM node:18-alpine\nRUN useradd -ms /bin/sh -u 1001 app\nUSER app\n\n# Install dependencies\nWORKDIR /app\nCOPY package.json package.lock .\nRUN npm install\n\n# Copy source files into application directory\nCOPY --chown=app:app . /app\n\nCMD [\"node\", \"server.js\"]\n```\n\nIn the `docker-compose.yaml` I list out all my apps and services in my project.\n\nSo if I'm on Redis v6 and PostgreSQL v14, I can list those out and add a volume to each.\n\nThen in my main service app, I add a watch field, which syncs the changes between the host and the container environment.\n\nThis is how it would look like:\n\n```yaml\nservices:\n  redis:\n    image: redis:6-alpine\n    port:\n      - 6379:6379\n    volumes:\n      - node_app:/data\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n    port:\n      - 5432:5432\n    volumes:\n      - node_app:/var/lib/postgresql/data\n\n  app:\n    container_name: node_app\n    build:\n      context: .\n    environment:\n      - POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}\n      - REDIS_URL=redis:6379\n    develop:\n      watch:\n        - action: sync\n          path: .\n          target: /app\n          ignore:\n            - node_modules/\n    ports:\n      - 8000:8000\nvolumes:\n  node_app:\n    external: false\n```\n\nFrom here, I would run the `docker compose --watch` command and start coding on my app.\n\nThe different containers will all be on one network, all talking to each other by the service name reference.\n\nAll the data is stored in a separate volume which I can easily dispose of once I'm finished.\n\nThat's how easy it is once you've grown accustomed to working with Docker.\n\nIf you want to start learning now, you can view the [Develop with Docker](https://docs.docker.com/develop/) documentation which covers some basic information.\n\nBut to get further ahead, you have to play around with it to get the hang of it like I did.\n\n## My plans ahead\n\n> Smooth seas do not make skillful sailors - African Proverb\n\nEven though Docker made it easy to build images and run containers, in no way did that make me a master.\n\nI am still learning and dialing down my workflow.\n\nTo improve my skills, I plan to dive deeper when I start deploying to the cloud, working with a container orchestrator, and more.\n\nOnly then could I call myself an expert.\n\nSo far it's been a pleasing experience working with Docker and all their products.\n\nI hope reading this convinces you to work with Docker if you have yet to do so.\n\nI promise you'll gain so much from it.\n\nWell, that's all I've got! Thank you for reading. As always, have a good one!","src/content/posts/how-docker-breathes-new-life-into-my-workflow.md",[1095,1096],"./_images/docker-new-workflow/docker-desktop.png","./_images/docker-new-workflow/docker-vs-code.png","8b4116b88ac18a4e",{"html":1099,"metadata":1100},"\u003Cp>Have you ever come across a tool and were so impressed by it that you tried to integrate it into your daily workflow? First was TailwindCSS and now I can say that about Docker.\u003C/p>\n\u003Cp>As a frontend developer first, I haven’t considered learning Docker at all since there wasn’t a reason for me to do so.\u003C/p>\n\u003Cp>That is until I launched my self-hosted Coolify which uses Docker itself to deploy my applications.\u003C/p>\n\u003Cp>Ever since then, I’ve been practicing and learning Docker on all my new projects.\u003C/p>\n\u003Cp>And I wished I started sooner.\u003C/p>\n\u003Cp>Understanding how to use Docker benefits me greatly as it is being used everywhere. Especially in the cloud.\u003C/p>\n\u003Csection>\u003Ch2 id=\"what-is-docker\">What is Docker 🐳?\u003C/h2>\u003Cp>From what I understand, \u003Ca href=\"https://www.docker.com\">Docker\u003C/a> offers containerization products that allow you to package your application as images with all its dependencies and run them as containers.\u003C/p>\u003Cp>Each container is an instance of that image and you can run nearly infinite amounts if you had the resources.\u003C/p>\u003Cp>That’s why companies choose to build their infrastructure with containers; they scale well and meet the demands of their business.\u003C/p>\u003Cp>Docker has many different products from CLI tools to desktop applications that help manage your images and containers.\u003C/p>\u003Cp>There is also a Docker Hub, a cloud repository for images that can be hosted publicly or privately and where you can find official images.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"how-do-i-use-docker\">How do I use Docker?\u003C/h2>\u003Cp>There are several ways I’m using Docker at the moment. These include:\u003C/p>\u003Col>\n\u003Cli>Using \u003Ca href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop\u003C/a>\u003C/li>\n\u003Cli>Interacting with the \u003Ca href=\"https://docs.docker.com/reference/cli/docker/\">Docker Client CLI\u003C/a>\u003C/li>\n\u003Cli>Docker as a Version Manager\u003C/li>\n\u003C/ol>\u003Cp>Of these three listed, I primarily use #2. Usually, I run \u003Ccode>docker compose\u003C/code> commands to build and run my images in one go.\u003C/p>\u003Cp>I’ll briefly describe how I use them below.\u003C/p>\u003Csection>\u003Ch3 id=\"docker-desktop---a-must\">Docker Desktop - a must\u003C/h3>\u003Cp>Docker Desktop is super neat. It does all the Docker things in one single beautiful UI.\u003C/p>\u003Cp>And it’s easy to get around and inspect every aspect of it too.\u003C/p>\u003Cp>With Docker Desktop, you can view your images, containers, and volumes. You can also pull in new images or push your own to Docker Hub.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/docker-new-workflow/docker-desktop.png&#x22;,&#x22;alt&#x22;:&#x22;Docker Desktop&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Once you have your containers running, you can inspect the container’s contents, the logs, and some analytics like CPU and RAM usage.\u003C/p>\u003Cp>You can launch VS Code from here by accessing the dropdown menu of a container.\u003C/p>\u003Cp>I like using Docker Desktop to monitor all my images, containers, volumes, and build history. I also use it to pull one-off images to play with by using the search tools.\u003C/p>\u003Cp>You can easily access this by \u003Ckbd>⌘K\u003C/kbd> if you’re coming from a MacOS device.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/docker-new-workflow/docker-vs-code.png&#x22;,&#x22;alt&#x22;:&#x22;Docker Extension via VS Code&#x22;,&#x22;index&#x22;:0}\">\nIn VS Code, I can download the \u003Ca href=\"https://code.visualstudio.com/docs/containers/overview\">Docker extension\u003C/a> that features running docker commands by the right-click menu and inspect container files.\u003C/p>\u003Cp>This is super helpful when you’re troubleshooting why the Docker build is missing some dependencies.\u003C/p>\u003Cp>There’s \u003Cstrong>so much\u003C/strong> you can do and I have yet to touch Docker Scout, Docker Swarm, and extensions.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"dockering-through-docker-cli\">Dockering through Docker CLI\u003C/h3>\u003Cp>I like using the CLI since I don’t have to leave VS Code to interact with my containers.\u003C/p>\u003Cp>Normally, I run \u003Ccode>docker compose up --watch\u003C/code> and \u003Ccode>docker compose down\u003C/code>.\u003C/p>\u003Cp>The \u003Ccode>--watch\u003C/code> flag watches for any changes you’ve specified in the \u003Ccode>docker-compose.yaml\u003C/code> file.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"docker\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">services:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  app:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      container_name: my_app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      build: .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      develop:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        watch:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          - path: .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            action: sync\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            target: /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ignore:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              - node_modules/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          - path: package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            action: rebuild\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>This configuration will watch any changes in my project using the watch fields.\u003C/p>\u003Cp>There are three actions, \u003Ccode>sync\u003C/code>, \u003Ccode>rebuild\u003C/code>, and \u003Ccode>restart\u003C/code>.\u003C/p>\u003Cp>I’m using \u003Ccode>sync\u003C/code> to sync any changes done on the host machine, to also reflect in the container. This makes a seamless experience like you’re developing locally.\u003C/p>\u003Cp>And if I ever need to install new dependencies, the action \u003Ccode>rebuild\u003C/code> watches the \u003Ccode>package.json\u003C/code> file, rebuilds the image, and launches new containers.\u003C/p>\u003Cp>Learning the CLI commands to start, stop, list, and remove images and containers is pretty helpful too.\u003C/p>\u003Cp>When I start using the CLI more frequently, I find myself not having to access the documentation as much anymore.\u003C/p>\u003Cp>Like if I want to run a container with an exposed port, I know that’s \u003Ccode>-p\u003C/code>.\u003C/p>\u003Cp>If there are environment variables that I want to use, that would be \u003Ccode>-e\u003C/code>.\u003C/p>\u003Cp>Once I got the hang of it all, I was spinning up and down containers fairly easily.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"my-new-version-manager\">My new version manager\u003C/h3>\u003Cp>I use Docker as a way to manage different versions of technologies like PostgreSQL, Redis, etc.\u003C/p>\u003Cp>The reason for this is that I don’t have to worry about anything breaking if I’m working on an old project.\u003C/p>\u003Cp>For example, there were some breaking changes with Node when I was using the latest version and working on an old project.\u003C/p>\u003Cp>I would try to run the server and it would spit out some cryptic error.\u003C/p>\u003Cp>A few minutes later, I realized that the project was using an earlier version of Node. 😓\u003C/p>\u003Cp>So I would switch to the correct version of Node to get it working.\u003C/p>\u003Cp>While I can add some assistance for Node by updating the \u003Ccode>package.json\u003C/code> with an \u003Ccode>engines\u003C/code> field, it doesn’t entirely solve the issue.\u003C/p>\u003Cp>I had to \u003Cstrong>manually\u003C/strong> switch my Node version and some time was wasted. I don’t like that.\u003C/p>\u003Cp>This is why having Docker as a version manager is advantageous. All I needed to do was build the image and run a container. That’s all!\u003C/p>\u003Cp>I haven’t been using Docker for long so I don’t know what all the pros and cons are but I think one downside of this approach is that you’re using up more disk space by doing it this way.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"using-docker-in-development\">Using Docker in Development\u003C/h2>\u003Cp>I initially started using \u003Ccode>docker init\u003C/code>. It’s a command that quickly initializes your project with some Docker files.\u003C/p>\u003Cp>However, after a while, I stopped using it since I didn’t quite fully understand the generated output.\u003C/p>\u003Cp>That’s why I find myself writing the \u003Ccode>Dockerfile\u003C/code> or \u003Ccode>docker-compose.yaml\u003C/code> by hand because it gives me a lot of practice and get a grasp of how Docker works.\u003C/p>\u003Cp>I make sure my \u003Ccode>Dockerfile\u003C/code> can correctly build an image before I start working inside the compose file.\u003C/p>\u003Cp>Here is a simple Dockerfile which uses Node:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"docker\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run as a non-privileged user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:18-alpine\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> useradd -ms /bin/sh -u 1001 app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">USER\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> package.json package.lock .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> npm install\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Copy source files into application directory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --chown=app:app . /app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CMD\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"node\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"server.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In the \u003Ccode>docker-compose.yaml\u003C/code> I list out all my apps and services in my project.\u003C/p>\u003Cp>So if I’m on Redis v6 and PostgreSQL v14, I can list those out and add a volume to each.\u003C/p>\u003Cp>Then in my main service app, I add a watch field, which syncs the changes between the host and the container environment.\u003C/p>\u003Cp>This is how it would look like:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">services\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  redis\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">redis:6-alpine\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    port\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">6379:6379\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">node_app:/data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  db\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">postgres:14-alpine\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">POSTGRES_USER=${POSTGRES_USER}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">POSTGRES_DB=${POSTGRES_DB}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    port\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">5432:5432\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">node_app:/var/lib/postgresql/data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  app\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    container_name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">node_app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      context\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">REDIS_URL=redis:6379\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    develop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      watch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        - \u003C/span>\u003Cspan style=\"color:#85E89D\">action\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">sync\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          path\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          target\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">/app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          ignore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">node_modules/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    ports\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">8000:8000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  node_app\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    external\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>From here, I would run the \u003Ccode>docker compose --watch\u003C/code> command and start coding on my app.\u003C/p>\u003Cp>The different containers will all be on one network, all talking to each other by the service name reference.\u003C/p>\u003Cp>All the data is stored in a separate volume which I can easily dispose of once I’m finished.\u003C/p>\u003Cp>That’s how easy it is once you’ve grown accustomed to working with Docker.\u003C/p>\u003Cp>If you want to start learning now, you can view the \u003Ca href=\"https://docs.docker.com/develop/\">Develop with Docker\u003C/a> documentation which covers some basic information.\u003C/p>\u003Cp>But to get further ahead, you have to play around with it to get the hang of it like I did.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"my-plans-ahead\">My plans ahead\u003C/h2>\u003Cblockquote>\n\u003Cp>Smooth seas do not make skillful sailors - African Proverb\u003C/p>\n\u003C/blockquote>\u003Cp>Even though Docker made it easy to build images and run containers, in no way did that make me a master.\u003C/p>\u003Cp>I am still learning and dialing down my workflow.\u003C/p>\u003Cp>To improve my skills, I plan to dive deeper when I start deploying to the cloud, working with a container orchestrator, and more.\u003C/p>\u003Cp>Only then could I call myself an expert.\u003C/p>\u003Cp>So far it’s been a pleasing experience working with Docker and all their products.\u003C/p>\u003Cp>I hope reading this convinces you to work with Docker if you have yet to do so.\u003C/p>\u003Cp>I promise you’ll gain so much from it.\u003C/p>\u003Cp>Well, that’s all I’ve got! Thank you for reading. As always, have a good one!\u003C/p>\u003C/section>",{"headings":1101,"imagePaths":1123,"frontmatter":1082},[1102,1105,1108,1111,1114,1117,1120],{"depth":230,"slug":1103,"text":1104},"what-is-docker","What is Docker 🐳?",{"depth":230,"slug":1106,"text":1107},"how-do-i-use-docker","How do I use Docker?",{"depth":234,"slug":1109,"text":1110},"docker-desktop---a-must","Docker Desktop - a must",{"depth":234,"slug":1112,"text":1113},"dockering-through-docker-cli","Dockering through Docker CLI",{"depth":234,"slug":1115,"text":1116},"my-new-version-manager","My new version manager",{"depth":230,"slug":1118,"text":1119},"using-docker-in-development","Using Docker in Development",{"depth":230,"slug":1121,"text":1122},"my-plans-ahead","My plans ahead",[1095,1096],"how-docker-breathes-new-life-into-my-workflow.md","highlight-table-of-content-items-using-intersection-observer",{"id":1125,"data":1127,"body":1136,"filePath":1137,"digest":1138,"rendered":1139,"legacyId":1162},{"title":1128,"pubDate":1129,"description":1130,"author":1131,"image":1132,"tags":1135,"draft":211,"readingTime":802,"lastDateModified":343},"Highlight Table of Content Items Using Intersection Observer",["Date","2024-04-05T00:00:00.000Z"],"After creating my Table of Contents for my blog, I needed a way to let the readers know which part of it they are viewing. By adding text decorations to the Table of Content links, I'm able to give a visual indicator by using the Web API Intersection Observer.",{"name":203,"email":204},{"url":1133,"alt":1134,"className":208},"https://images.unsplash.com/photo-1580569214296-5cf2bffc5ccd","a set of four highlighters of different colors",[307,581,582],"Giving your readers a way to navigate through the Table of Contents (ToC) is a nice feature but I was _still_ missing a **critical** detail that would make the experience much more pleasant.\n\nThe missing feature was a way to highlight or give some sort of visual indicator of which part of the ToC the reader was viewing.\n\nI've adapted the [work of Reza Zahedi](https://rezahedi.dev/blog/create-table-of-contents-in-astro-and-sectionize-the-markdown-content#separating-markdown-content-into-sections) as I did before in my other blog post so all credit goes to him.\n\nYou'll more or less likely find the same information in his blog and this post and I'm creating this post as an entry for my own record.\n\n## A bit about AstroJS remark support\n\nAstroJS ships with [remark](https://github.com/remarkjs/remark), a markdown processor with many community-built plugins.\n\nYou can add things like linters, MDX support, or compile your markdown to PDFs. [The list goes on and on](https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins).\n\nI am going to use the [remark-sectionize plugin](https://github.com/jake-low/remark-sectionize). This plugin will parse through my markdowns and for every article heading greater than `\u003Ch1>`, it will wrap a surrounding `\u003Csection>` element.\n\nTo see what I mean, here is an example:\n\n**Before**:\n\n```html\n\u003Carticle>\n  \u003Ch1>My Article Title\u003C/h1>\n  \u003Ch2 id=\"heading-1\">This is the first heading\u003C/h2>\n  \u003Cp>This paragraph is about whatever heading-1 is about.\u003C/p>\n  \u003Ch2 id=\"heading-2\">This is the second heading\u003C/h2>\n  \u003Cp>This paragraph is about whatever heading-2 is about.\u003C/p>\n\u003C/article>\n```\n\n**After**:\n\n```html\n\u003Carticle>\n  \u003Ch1>My Article Title\u003C/h1>\n  \u003Csection>\n    \u003Ch2 id=\"heading-1\">This is the first heading\u003C/h2>\n    \u003Cp>This paragraph is about whatever heading-1 is about.\u003C/p>\n  \u003C/section>\n    \u003Ch2 id=\"heading-2\">This is the second heading\u003C/h2>\n    \u003Cp>This paragraph is about whatever heading-2 is about.\u003C/p>\n  \u003C/section>\n\u003C/article>\n```\n\nIt seems simple enough, right?\n\n## Highlight Table of Contents\n\nFor now, I simply want to change the text color in the ToC whenever a reader is viewing that section.\n\nTo do so, I have to use the Intersection Observer API which will allow me to manipulate the DOM elements as they enter or leave the viewport.\n\nHere are the steps I'll need to complete it:\n\n1. Give my ToC a class name, `.toc-links` for selecting the DOM element.\n2. Select all `\u003Csection>` elements within the `\u003Carticle>` tag.\n3. Create an Intersection Observer and write a callback function to process the event and data.\n4. Inside the callback, find the heading element of that section, map it to the ToC, and toggle on/off the class `active` as they enter or leave.\n5. Loop over the `\u003Csection>` tags from Step 1 and use the Intersection Observer we created to observe each section.\n\n### The Intersection Observer API\n\nIf you have never used or heard of [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API), it's a Web API that allows us to listen to events and trigger functions when an element is entering or leaving the viewport.\n\nThis is the perfect use case for using the Intersection Observer API because we want to manipulate DOM elements whenever the events fire.\n\nWe will create an Intersection Observer that will change the class name of the `\u003Ca>` tags inside our Table of Contents whenever we are viewing the corresponding section.\n\n### The implementation code\n\nIn my `BlogLayout.astro` file that is responsible for rendering the very HTML page you're reading, I'm going to write a `\u003Cscript>` tag.\n\nHere is the code:\n\n```tsx\n\u003Cscript>\n  const articleSections = document.querySelectorAll\u003CHTMLDivElement>(\"article section\");\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.map((entry) => {\n      const heading =\n        entry.target.querySelector\u003CHTMLHeadingElement>(\"h2,h3,h4,h5\");\n      if (!heading) return;\n      const id = heading.getAttribute(\"id\");\n      if (!id) return;\n      const link = document.querySelector\u003CHTMLAnchorElement>(\n        `.toc-links a[href=\"#${id}\"]`,\n      );\n      if (!link) return;\n\n      const addRemove = entry.intersectionRatio > 0 ? \"add\" : \"remove\";\n      link.classList[addRemove](\"text-blue-500\", \"dark:text-blue-400\");\n    });\n  });\n\n  for (const section of articleSections) {\n    observer.observe(section);\n  }\n\n  window.document.addEventListener(\"beforeunload\", () => {\n    observer.disconnect();\n  });\n\u003C/script>\n```\n\n### Breaking the code down\n\n```typescript\nconst articleSections =\n  document.querySelectorAll\u003CHTMLDivElement>(\"article section\");\n```\n\nI'm collecting all the article sections using the `document.querySelectAll()` function.\n\n\u003Cbr>\n\n```typescript\nconst observer = new IntersectionObserver((entries) => {});\n```\n\nI'm creating a `new IntersectionObserver()` that takes a callback function whenever it is fired.\n\nThe `entries` parameter is coming from the intersection event triggered and is an array of [IntersectionObserverEntry](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n\n\u003Cbr>\n\n```typescript\nentries.forEach((entry) => {});\n```\n\nUsing the `entries` parameter from the callback, we loop over it in a `.forEach()`.\n\nFrom each entry, there is a target. That target is the HTML element that fired the event. In my case, it will be a `\u003Csection>` tag.\n\nHow does it know that it's a section element? Well, I'll explain later in the code.\n\n\u003Cbr>\n\n```typescript\nconst heading = entry.target.querySelector\u003CHTMLHeadingElement>(\"h2,h3\");\nif (!heading) return;\n```\n\nTo get the heading of the section, we use `entry.target.querySelector\u003CHTMLHeadingElement>(\"h2,h3\")` and store it in a variable called `heading`. There is a guard clause to return if nothing is found.\n\n\u003Cbr>\n\n```typescript\nconst id = heading.getAttribute(\"id\");\nif (!id) return;\n```\n\nNext, I find the id attribute by calling `heading.getAttribute(\"id\")` and store that in another variable called `id`.\n\n\u003Cbr>\n\n```typescript\nconst link = document.querySelector\u003CHTMLAnchorElement>(\n  `.toc-links a[href=\"#${id}\"]`,\n);\nif (!link) return;\n```\n\nNext up, find the associated `\u003Ca>` tag by using string interpolation and storing that into a `link` variable.\n\n\u003Cbr>\n\n```typescript\nconst addRemove = entry.intersectionRatio > 0 ? \"add\" : \"remove\";\nlink.classList[addRemove](\"text-blue-500\", \"dark:text-blue-400\");\n```\n\nUsing the `entry` variable from before, we can detect when a section is entering or leaving by using the `intersectionRatio`. If the `intersectionRatio` is greater than 0, the element is entering, and when it's below 0, it is leaving.\n\nThe `addRemove` variable stores the `key` of the `classList` API so we can easily toggle on and off the class names.\n\nIf the section is being viewed, I changed the ToC item to a blue text and off when the section is no longer in view.\n\n\u003Cbr>\n\n```typescript\nfor (const section of articleSections) {\n  observer.observe(section);\n}\n```\n\nNow that the Intersection Observer is created with a callback function, we can observe elements in our DOM to invoke the callback as they enter or leave.\n\nIn this case, I loop over all the sections from my `articleSections` variable and observe them.\n\n\u003Cbr>\n\n```typescript\nwindow.document.addEventListener(\"beforeunload\", () => {\n  observer.disconnect();\n});\n```\n\nYou may not need this but I added this part anyway. Before a user navigates away from the page, I want to disconnect the observer.\n\n## Summary\n\nAs you can probably see, the text turns blue when you go from one section to the other.\n\nIf there is a child section within a parent section, such as an h3 within an h2 section, it still keeps the parent heading highlighted.\n\nThis is great since most articles have a hierarchy.\n\nCongratulations! You learned to add this simple feature in your blog or anywhere you need to highlight different parts of your site by using the Intersection Observer API.\n\nYou can do some more fancy stuff with the Intersection Observer like this [Progress Navigation by Hakim El Hattab](https://lab.hakim.se/progress-nav/) that I found via [Kevin Drum](https://kld.dev/toc-animation/#lets-start-with-the-markup).\n\nIf you end up implementing this, let me know! I would love to see your work.\n\nUntil next time, have a good one, and happy coding!","src/content/posts/highlight-table-of-content-items-using-intersection-observer.md","a1d0309a19506587",{"html":1140,"metadata":1141},"\u003Cp>Giving your readers a way to navigate through the Table of Contents (ToC) is a nice feature but I was \u003Cem>still\u003C/em> missing a \u003Cstrong>critical\u003C/strong> detail that would make the experience much more pleasant.\u003C/p>\n\u003Cp>The missing feature was a way to highlight or give some sort of visual indicator of which part of the ToC the reader was viewing.\u003C/p>\n\u003Cp>I’ve adapted the \u003Ca href=\"https://rezahedi.dev/blog/create-table-of-contents-in-astro-and-sectionize-the-markdown-content#separating-markdown-content-into-sections\">work of Reza Zahedi\u003C/a> as I did before in my other blog post so all credit goes to him.\u003C/p>\n\u003Cp>You’ll more or less likely find the same information in his blog and this post and I’m creating this post as an entry for my own record.\u003C/p>\n\u003Csection>\u003Ch2 id=\"a-bit-about-astrojs-remark-support\">A bit about AstroJS remark support\u003C/h2>\u003Cp>AstroJS ships with \u003Ca href=\"https://github.com/remarkjs/remark\">remark\u003C/a>, a markdown processor with many community-built plugins.\u003C/p>\u003Cp>You can add things like linters, MDX support, or compile your markdown to PDFs. \u003Ca href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\">The list goes on and on\u003C/a>.\u003C/p>\u003Cp>I am going to use the \u003Ca href=\"https://github.com/jake-low/remark-sectionize\">remark-sectionize plugin\u003C/a>. This plugin will parse through my markdowns and for every article heading greater than \u003Ccode>&#x3C;h1>\u003C/code>, it will wrap a surrounding \u003Ccode>&#x3C;section>\u003C/code> element.\u003C/p>\u003Cp>To see what I mean, here is an example:\u003C/p>\u003Cp>\u003Cstrong>Before\u003C/strong>:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>My Article Title&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"heading-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This is the first heading&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This paragraph is about whatever heading-1 is about.&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"heading-2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This is the second heading&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This paragraph is about whatever heading-2 is about.&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>\u003Cstrong>After\u003C/strong>:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>My Article Title&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"heading-1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This is the first heading&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This paragraph is about whatever heading-1 is about.&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"heading-2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This is the second heading&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This paragraph is about whatever heading-2 is about.&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">article\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>It seems simple enough, right?\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"highlight-table-of-contents\">Highlight Table of Contents\u003C/h2>\u003Cp>For now, I simply want to change the text color in the ToC whenever a reader is viewing that section.\u003C/p>\u003Cp>To do so, I have to use the Intersection Observer API which will allow me to manipulate the DOM elements as they enter or leave the viewport.\u003C/p>\u003Cp>Here are the steps I’ll need to complete it:\u003C/p>\u003Col>\n\u003Cli>Give my ToC a class name, \u003Ccode>.toc-links\u003C/code> for selecting the DOM element.\u003C/li>\n\u003Cli>Select all \u003Ccode>&#x3C;section>\u003C/code> elements within the \u003Ccode>&#x3C;article>\u003C/code> tag.\u003C/li>\n\u003Cli>Create an Intersection Observer and write a callback function to process the event and data.\u003C/li>\n\u003Cli>Inside the callback, find the heading element of that section, map it to the ToC, and toggle on/off the class \u003Ccode>active\u003C/code> as they enter or leave.\u003C/li>\n\u003Cli>Loop over the \u003Ccode>&#x3C;section>\u003C/code> tags from Step 1 and use the Intersection Observer we created to observe each section.\u003C/li>\n\u003C/ol>\u003Csection>\u003Ch3 id=\"the-intersection-observer-api\">The Intersection Observer API\u003C/h3>\u003Cp>If you have never used or heard of \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer\u003C/a>, it’s a Web API that allows us to listen to events and trigger functions when an element is entering or leaving the viewport.\u003C/p>\u003Cp>This is the perfect use case for using the Intersection Observer API because we want to manipulate DOM elements whenever the events fire.\u003C/p>\u003Cp>We will create an Intersection Observer that will change the class name of the \u003Ccode>&#x3C;a>\u003C/code> tags inside our Table of Contents whenever we are viewing the corresponding section.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"the-implementation-code\">The implementation code\u003C/h3>\u003Cp>In my \u003Ccode>BlogLayout.astro\u003C/code> file that is responsible for rendering the very HTML page you’re reading, I’m going to write a \u003Ccode>&#x3C;script>\u003C/code> tag.\u003C/p>\u003Cp>Here is the code:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  const articleSections = document.querySelectorAll&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\"article section\");\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  const observer = new IntersectionObserver((entries) => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    entries.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> heading\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        entry.target.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLHeadingElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h2,h3,h4,h5\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">heading) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> heading.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> link\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLAnchorElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        `.toc-links a[href=\"#${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\"]`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">link) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> addRemove\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.intersectionRatio \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"add\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"remove\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      link.classList[addRemove](\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-blue-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dark:text-blue-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  for (const section of articleSections) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    observer.\u003C/span>\u003Cspan style=\"color:#B392F0\">observe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(section);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  window.document.addEventListener(\"beforeunload\", () => {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    observer.\u003C/span>\u003Cspan style=\"color:#B392F0\">disconnect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/section>\u003Csection>\u003Ch3 id=\"breaking-the-code-down\">Breaking the code down\u003C/h3>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> articleSections\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLDivElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"article section\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I’m collecting all the article sections using the \u003Ccode>document.querySelectAll()\u003C/code> function.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> observer\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> IntersectionObserver\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I’m creating a \u003Ccode>new IntersectionObserver()\u003C/code> that takes a callback function whenever it is fired.\u003C/p>\u003Cp>The \u003Ccode>entries\u003C/code> parameter is coming from the intersection event triggered and is an array of \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry\">IntersectionObserverEntry\u003C/a>.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">entries.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entry\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Using the \u003Ccode>entries\u003C/code> parameter from the callback, we loop over it in a \u003Ccode>.forEach()\u003C/code>.\u003C/p>\u003Cp>From each entry, there is a target. That target is the HTML element that fired the event. In my case, it will be a \u003Ccode>&#x3C;section>\u003C/code> tag.\u003C/p>\u003Cp>How does it know that it’s a section element? Well, I’ll explain later in the code.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> heading\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.target.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLHeadingElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"h2,h3\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">heading) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>To get the heading of the section, we use \u003Ccode>entry.target.querySelector&#x3C;HTMLHeadingElement>(\"h2,h3\")\u003C/code> and store it in a variable called \u003Ccode>heading\u003C/code>. There is a guard clause to return if nothing is found.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> id\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> heading.\u003C/span>\u003Cspan style=\"color:#B392F0\">getAttribute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Next, I find the id attribute by calling \u003Ccode>heading.getAttribute(\"id\")\u003C/code> and store that in another variable called \u003Ccode>id\u003C/code>.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> link\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">HTMLAnchorElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  `.toc-links a[href=\"#${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\"]`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">link) \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Next up, find the associated \u003Ccode>&#x3C;a>\u003C/code> tag by using string interpolation and storing that into a \u003Ccode>link\u003C/code> variable.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> addRemove\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.intersectionRatio \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"add\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"remove\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">link.classList[addRemove](\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text-blue-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"dark:text-blue-400\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Using the \u003Ccode>entry\u003C/code> variable from before, we can detect when a section is entering or leaving by using the \u003Ccode>intersectionRatio\u003C/code>. If the \u003Ccode>intersectionRatio\u003C/code> is greater than 0, the element is entering, and when it’s below 0, it is leaving.\u003C/p>\u003Cp>The \u003Ccode>addRemove\u003C/code> variable stores the \u003Ccode>key\u003C/code> of the \u003Ccode>classList\u003C/code> API so we can easily toggle on and off the class names.\u003C/p>\u003Cp>If the section is being viewed, I changed the ToC item to a blue text and off when the section is no longer in view.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> section\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> articleSections) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  observer.\u003C/span>\u003Cspan style=\"color:#B392F0\">observe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(section);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Now that the Intersection Observer is created with a callback function, we can observe elements in our DOM to invoke the callback as they enter or leave.\u003C/p>\u003Cp>In this case, I loop over all the sections from my \u003Ccode>articleSections\u003C/code> variable and observe them.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">window.document.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"beforeunload\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  observer.\u003C/span>\u003Cspan style=\"color:#B392F0\">disconnect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You may not need this but I added this part anyway. Before a user navigates away from the page, I want to disconnect the observer.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Cp>As you can probably see, the text turns blue when you go from one section to the other.\u003C/p>\u003Cp>If there is a child section within a parent section, such as an h3 within an h2 section, it still keeps the parent heading highlighted.\u003C/p>\u003Cp>This is great since most articles have a hierarchy.\u003C/p>\u003Cp>Congratulations! You learned to add this simple feature in your blog or anywhere you need to highlight different parts of your site by using the Intersection Observer API.\u003C/p>\u003Cp>You can do some more fancy stuff with the Intersection Observer like this \u003Ca href=\"https://lab.hakim.se/progress-nav/\">Progress Navigation by Hakim El Hattab\u003C/a> that I found via \u003Ca href=\"https://kld.dev/toc-animation/#lets-start-with-the-markup\">Kevin Drum\u003C/a>.\u003C/p>\u003Cp>If you end up implementing this, let me know! I would love to see your work.\u003C/p>\u003Cp>Until next time, have a good one, and happy coding!\u003C/p>\u003C/section>",{"headings":1142,"imagePaths":1161,"frontmatter":1127},[1143,1146,1149,1152,1155,1158],{"depth":230,"slug":1144,"text":1145},"a-bit-about-astrojs-remark-support","A bit about AstroJS remark support",{"depth":230,"slug":1147,"text":1148},"highlight-table-of-contents","Highlight Table of Contents",{"depth":234,"slug":1150,"text":1151},"the-intersection-observer-api","The Intersection Observer API",{"depth":234,"slug":1153,"text":1154},"the-implementation-code","The implementation code",{"depth":234,"slug":1156,"text":1157},"breaking-the-code-down","Breaking the code down",{"depth":230,"slug":1159,"text":1160},"summary","Summary",[],"highlight-table-of-content-items-using-intersection-observer.md","fix-missing-404-pages-for-coolify-static-site-deployments",{"id":1163,"data":1165,"body":1173,"filePath":1174,"assetImports":1175,"digest":1179,"rendered":1180,"legacyId":1207},{"title":1166,"pubDate":1167,"description":634,"author":1168,"image":1169,"tags":1172,"draft":211,"readingTime":802,"lastDateModified":343},"Fix Missing 404 Pages for Coolify Static Site Deployments",["Date","2024-04-15T00:00:00.000Z"],{"name":203,"email":204},{"url":1170,"alt":1171,"className":208},"https://images.unsplash.com/photo-1610337673044-720471f83677","a digital screen glitching",[420,417,418],"When I first started using Coolify, I came across a bug where my 404 page was not being served.\n\nIn development, it was all smooth sailing. But in production, going to a non-existent URL would always redirect back to the home page.\n\nThis was a bit frustrating since I didn't know where to start to begin debugging.\n\nAs of Coolify v4.0.0-beta.258, I suspect it was how Nixpacks did not correctly configure the server.\n\nBut luckily, I was able to come up with a solution and am here to share that with you if you're in this situation.\n\n## The solution\n\nInstead of having Nixpacks magically take care of everything, we need to have two things to replace the build pipeline.\n\nThat is:\n\n1. containerizing our site\n2. creating a reverse proxy\n\nThe two technologies I chose are Docker and Nginx for this fix.\n\n## Install Docker Desktop\n\n[Download and install Docker Desktop](https://www.docker.com/products/docker-desktop/), which will contain a graphical user interface for Docker. It comes with all the bells and whistles like the CLI, the background daemon, and Docker Compose.\n\n## Using Docker Init\n\nTo get started, you can use the command `docker init` which will run an interactive terminal where it can detect what you're using for your project.\n\nThis is what you'll see when the command is entered into the terminal:\n\n```\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use?  [Use arrows to move, type to filter]\n> Node - (detected) suitable for a Node server application\n  Go - suitable for a Go server application\n  Python - suitable for a Python server application\n  Rust - suitable for a Rust server application\n  ASP.NET Core - suitable for an ASP.NET Core application\n  PHP with Apache - suitable for a PHP web application\n  Java - suitable for a Java application that uses Maven and packages as an uber jar\n  Other - general purpose starting point for containerizing your application\n  Don't see something you need? Let us know!\n  Quit\n```\n\nFollow the prompts and it will generate a template for you.\n\n## Modifying the Dockerfile\n\nIf you look at the Dockerfile, it has some sensible stages like building the dependencies and building the app.\n\nI'm removing most of the generated comments so it's easier to follow.\n\n```docker\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=21.4.0\nARG PNPM_VERSION=8.12.0\n\nFROM node:${NODE_VERSION}-alpine as base\nWORKDIR /usr/src/app\nRUN --mount=type=cache,target=/root/.npm \\\n    npm install -g pnpm@${PNPM_VERSION}\n\nFROM base as build\nCOPY package.json pnpm-lock.yaml ./\nRUN pnpm install --frozen-lockfile\nCOPY . .\nRUN pnpm run build\n\nFROM nginx:stable-alpine3.17 as final\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY --from=build /usr/src/app/dist /usr/share/nginx/html\nEXPOSE 4321\n```\n\nIn the last step, I am pulling the latest Nginx image from DockerHub with the 'alpine' tag.\n\nThen I'm copying over my `nginx.conf` file, which we'll create later, into the Nginx directory where it will be used as configuration.\n\nFinally, from my build stage, I'm copying over my static files into the `/usr/share/nginx/html` directory.\n\nNginx will serve our static files from this default directory.\n\nAnd finally exposing Port 4321, because that's what the local AstroJS development server is running on.\n\n## Create the nginx.conf file\n\nAt the root of your project directory, create a `nginx.conf` file.\n\nThe contents of this file will be something similar below for a static site.\n\n```nginx\nworker_processes  1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  server {\n    listen 4321;\n    server_name   _;\n\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    include /etc/nginx/mime.types;\n\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n    error_page 404 /404.html;\n    location = /404.html {\n            root /usr/share/nginx/html;\n            internal;\n    }\n\n    location / {\n            try_files $uri $uri/index.html =404;\n    }\n  }\n}\n```\n\nI won't explain all the details of the file but I want to note four parts.\n\nOur `listen 4321;` matches what we exposed in the Dockerfile.\n\n\u003Cbr />\n\n```nginx\nerror_page 404 /404.html;\n```\n\nThis line is going to serve my custom 404 page built by AstroJS.\n\n\u003Cbr />\n\n```nginx\nlocation = /404.html {\n          root /usr/share/nginx/html;\n          internal;\n}\n```\n\nThe location of this 404 page is found in `/usr/share/nginx/html`\n\n\u003Cbr />\n\n```nginx\nlocation / {\n          try_files $uri $uri/index.html =404;\n}\n```\n\nFinally, at the root path, we'll use a special `$uri` variable for a lookup for that specific URL that was entered. The `try_files` will continue to look for the file and if it's not found, we'll respond with a 404.\n\n## Testing locally with Docker\n\nEverything is put in place, now it's time to test if this is going to work when we build an image with Docker.\n\nMake sure that Docker Desktop is opened and in a terminal run the command:\n\n`docker build -t my-static-site .`\n\nWait for the build to complete and if all goes well, you should see your built image with the tag name `my-static-site` in Docker Desktop.\n\n![The completed my-static-site image in Docker Desktop](./_images/fixing-404-page/my-static-site-image.png)\n\nOr if you're a terminal type of person, `docker images -a`\n\n```\nREPOSITORY       TAG       IMAGE ID       CREATED         SIZE\nmy-static-site   latest    fa5fdc1f7169   2 minutes ago   219MB\nserver           latest    18ee5c19b642   14 hours ago    234MB\n```\n\nNow we're going to launch and start up a container by running the command:\n\n`docker run -p 4321:4321 my-static-site`\n\nThe docker container should be running in your terminal now:\n\n```\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\n10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\n10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\n/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\n/docker-entrypoint.sh: Configuration complete; ready for start up\n```\n\nIn a browser window, go to `localhost:4321` and you should see your website. If not, then your nginx might be misconfigured or you are missing something in the Dockerfile.\n\nIf your page loads, try going to a non-existent URL like `localhost:4321/this-is-not-a-real-page` and you should be greeted with your custom 404 page!\n\nIf it's a generic Nginx 404 page, you will have to fix that in your `nginx.conf` file.\n\nCommit your files to Git and then push them to a remote repository like GitHub.\n\n## Deploying on Coolify\n\nAll we need to do now is deploy on Coolify.\n\nI'm assuming you already have a project running on Coolify because you are here.\n\nOn the Configuration page, under \"Build Pack\", select \"Dockerfile\".\n\nThen make sure the \"Dockerfile Location\" is set to `/Dockerfile`\n\n![Coolify's Dockerfile configuration](./_images/fixing-404-page/coolify-dockerfile-setting.png)\n\nUnder the \"Network\" configuration, enter `4321` for \"Ports Exposes\" and click on \"Save\".\n\nWhen you hit save, make sure to look at the Traefik configuration is also pointing to PORT 4321.\n\n![Coolify's network port configuration](./_images/fixing-404-page/coolify-network-setting.png)\n\nWhen that's done, click \"Redeploy\" and Coolify will start building from the Dockerfile we've created.\n\nIf it succeeds, you can go to your live site and start testing.\n\n## Conclusion\n\nHopefully, that fixes your issue! If all this is a little intimidating to you, don't worry, I've been there and you can reach out and get some help.\n\nNow we know that all we need to do to fix the missing 404-page configuration is to write up our own Dockerfile and an Nginx config.\n\nWell, that's all for now. Thanks for reading and have a good one!","src/content/posts/fix-missing-404-pages-for-coolify-static-site-deployments.md",[1176,1177,1178],"./_images/fixing-404-page/my-static-site-image.png","./_images/fixing-404-page/coolify-dockerfile-setting.png","./_images/fixing-404-page/coolify-network-setting.png","bcaaf5f2740f1bcb",{"html":1181,"metadata":1182},"\u003Cp>When I first started using Coolify, I came across a bug where my 404 page was not being served.\u003C/p>\n\u003Cp>In development, it was all smooth sailing. But in production, going to a non-existent URL would always redirect back to the home page.\u003C/p>\n\u003Cp>This was a bit frustrating since I didn’t know where to start to begin debugging.\u003C/p>\n\u003Cp>As of Coolify v4.0.0-beta.258, I suspect it was how Nixpacks did not correctly configure the server.\u003C/p>\n\u003Cp>But luckily, I was able to come up with a solution and am here to share that with you if you’re in this situation.\u003C/p>\n\u003Csection>\u003Ch2 id=\"the-solution\">The solution\u003C/h2>\u003Cp>Instead of having Nixpacks magically take care of everything, we need to have two things to replace the build pipeline.\u003C/p>\u003Cp>That is:\u003C/p>\u003Col>\n\u003Cli>containerizing our site\u003C/li>\n\u003Cli>creating a reverse proxy\u003C/li>\n\u003C/ol>\u003Cp>The two technologies I chose are Docker and Nginx for this fix.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"install-docker-desktop\">Install Docker Desktop\u003C/h2>\u003Cp>\u003Ca href=\"https://www.docker.com/products/docker-desktop/\">Download and install Docker Desktop\u003C/a>, which will contain a graphical user interface for Docker. It comes with all the bells and whistles like the CLI, the background daemon, and Docker Compose.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"using-docker-init\">Using Docker Init\u003C/h2>\u003Cp>To get started, you can use the command \u003Ccode>docker init\u003C/code> which will run an interactive terminal where it can detect what you’re using for your project.\u003C/p>\u003Cp>This is what you’ll see when the command is entered into the terminal:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Welcome to the Docker Init CLI!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>This utility will walk you through creating the following files with sensible defaults for your project:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  - .dockerignore\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  - Dockerfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  - compose.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  - README.Docker.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Let's get started!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>? What application platform does your project use?  [Use arrows to move, type to filter]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>> Node - (detected) suitable for a Node server application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Go - suitable for a Go server application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Python - suitable for a Python server application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Rust - suitable for a Rust server application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  ASP.NET Core - suitable for an ASP.NET Core application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  PHP with Apache - suitable for a PHP web application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Java - suitable for a Java application that uses Maven and packages as an uber jar\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Other - general purpose starting point for containerizing your application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Don't see something you need? Let us know!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  Quit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Follow the prompts and it will generate a template for you.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"modifying-the-dockerfile\">Modifying the Dockerfile\u003C/h2>\u003Cp>If you look at the Dockerfile, it has some sensible stages like building the dependencies and building the app.\u003C/p>\u003Cp>I’m removing most of the generated comments so it’s easier to follow.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"docker\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># syntax=docker/dockerfile:1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> NODE_VERSION=21.4.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PNPM_VERSION=8.12.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:${NODE_VERSION}-alpine \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /usr/src/app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,target=/root/.npm \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    npm install -g pnpm@${PNPM_VERSION}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> package.json pnpm-lock.yaml ./\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pnpm install --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> . .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pnpm run build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nginx:stable-alpine3.17 \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> final\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nginx.conf /etc/nginx/nginx.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=build /usr/src/app/dist /usr/share/nginx/html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">EXPOSE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In the last step, I am pulling the latest Nginx image from DockerHub with the ‘alpine’ tag.\u003C/p>\u003Cp>Then I’m copying over my \u003Ccode>nginx.conf\u003C/code> file, which we’ll create later, into the Nginx directory where it will be used as configuration.\u003C/p>\u003Cp>Finally, from my build stage, I’m copying over my static files into the \u003Ccode>/usr/share/nginx/html\u003C/code> directory.\u003C/p>\u003Cp>Nginx will serve our static files from this default directory.\u003C/p>\u003Cp>And finally exposing Port 4321, because that’s what the local AstroJS development server is running on.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"create-the-nginxconf-file\">Create the nginx.conf file\u003C/h2>\u003Cp>At the root of your project directory, create a \u003Ccode>nginx.conf\u003C/code> file.\u003C/p>\u003Cp>The contents of this file will be something similar below for a static site.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nginx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">worker_processes \u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">events\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  worker_connections \u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">http\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  server\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    listen \u003C/span>\u003Cspan style=\"color:#79B8FF\">4321\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    server_name \u003C/span>\u003Cspan style=\"color:#E1E4E8\">  _;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">  /usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    index \u003C/span>\u003Cspan style=\"color:#E1E4E8\"> index.html index.htm;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    include \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/etc/nginx/mime.types;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip \u003C/span>\u003Cspan style=\"color:#79B8FF\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_min_length \u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_proxied \u003C/span>\u003Cspan style=\"color:#E1E4E8\">expired no-cache no-store private auth;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_types \u003C/span>\u003Cspan style=\"color:#E1E4E8\">text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    error_page \u003C/span>\u003Cspan style=\"color:#79B8FF\">404\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /404.html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#DBEDFF\"> /404.html \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            internal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#B392F0\"> / \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            try_files \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$uri $uri/index.html \u003C/span>\u003Cspan style=\"color:#79B8FF\">=404\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I won’t explain all the details of the file but I want to note four parts.\u003C/p>\u003Cp>Our \u003Ccode>listen 4321;\u003C/code> matches what we exposed in the Dockerfile.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nginx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">error_page \u003C/span>\u003Cspan style=\"color:#79B8FF\">404\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /404.html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>This line is going to serve my custom 404 page built by AstroJS.\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nginx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">location\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#DBEDFF\"> /404.html \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          internal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>The location of this 404 page is found in \u003Ccode>/usr/share/nginx/html\u003C/code>\u003C/p>\u003Cbr>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nginx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">location\u003C/span>\u003Cspan style=\"color:#B392F0\"> / \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          try_files \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$uri $uri/index.html \u003C/span>\u003Cspan style=\"color:#79B8FF\">=404\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Finally, at the root path, we’ll use a special \u003Ccode>$uri\u003C/code> variable for a lookup for that specific URL that was entered. The \u003Ccode>try_files\u003C/code> will continue to look for the file and if it’s not found, we’ll respond with a 404.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"testing-locally-with-docker\">Testing locally with Docker\u003C/h2>\u003Cp>Everything is put in place, now it’s time to test if this is going to work when we build an image with Docker.\u003C/p>\u003Cp>Make sure that Docker Desktop is opened and in a terminal run the command:\u003C/p>\u003Cp>\u003Ccode>docker build -t my-static-site .\u003C/code>\u003C/p>\u003Cp>Wait for the build to complete and if all goes well, you should see your built image with the tag name \u003Ccode>my-static-site\u003C/code> in Docker Desktop.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/fixing-404-page/my-static-site-image.png&#x22;,&#x22;alt&#x22;:&#x22;The completed my-static-site image in Docker Desktop&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Or if you’re a terminal type of person, \u003Ccode>docker images -a\u003C/code>\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>REPOSITORY       TAG       IMAGE ID       CREATED         SIZE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>my-static-site   latest    fa5fdc1f7169   2 minutes ago   219MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>server           latest    18ee5c19b642   14 hours ago    234MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Now we’re going to launch and start up a container by running the command:\u003C/p>\u003Cp>\u003Ccode>docker run -p 4321:4321 my-static-site\u003C/code>\u003C/p>\u003Cp>The docker container should be running in your terminal now:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/docker-entrypoint.sh: Configuration complete; ready for start up\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In a browser window, go to \u003Ccode>localhost:4321\u003C/code> and you should see your website. If not, then your nginx might be misconfigured or you are missing something in the Dockerfile.\u003C/p>\u003Cp>If your page loads, try going to a non-existent URL like \u003Ccode>localhost:4321/this-is-not-a-real-page\u003C/code> and you should be greeted with your custom 404 page!\u003C/p>\u003Cp>If it’s a generic Nginx 404 page, you will have to fix that in your \u003Ccode>nginx.conf\u003C/code> file.\u003C/p>\u003Cp>Commit your files to Git and then push them to a remote repository like GitHub.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"deploying-on-coolify\">Deploying on Coolify\u003C/h2>\u003Cp>All we need to do now is deploy on Coolify.\u003C/p>\u003Cp>I’m assuming you already have a project running on Coolify because you are here.\u003C/p>\u003Cp>On the Configuration page, under “Build Pack”, select “Dockerfile”.\u003C/p>\u003Cp>Then make sure the “Dockerfile Location” is set to \u003Ccode>/Dockerfile\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/fixing-404-page/coolify-dockerfile-setting.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify&#x27;s Dockerfile configuration&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Under the “Network” configuration, enter \u003Ccode>4321\u003C/code> for “Ports Exposes” and click on “Save”.\u003C/p>\u003Cp>When you hit save, make sure to look at the Traefik configuration is also pointing to PORT 4321.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/fixing-404-page/coolify-network-setting.png&#x22;,&#x22;alt&#x22;:&#x22;Coolify&#x27;s network port configuration&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>When that’s done, click “Redeploy” and Coolify will start building from the Dockerfile we’ve created.\u003C/p>\u003Cp>If it succeeds, you can go to your live site and start testing.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\u003Cp>Hopefully, that fixes your issue! If all this is a little intimidating to you, don’t worry, I’ve been there and you can reach out and get some help.\u003C/p>\u003Cp>Now we know that all we need to do to fix the missing 404-page configuration is to write up our own Dockerfile and an Nginx config.\u003C/p>\u003Cp>Well, that’s all for now. Thanks for reading and have a good one!\u003C/p>\u003C/section>",{"headings":1183,"imagePaths":1206,"frontmatter":1165},[1184,1187,1190,1193,1196,1199,1202,1205],{"depth":230,"slug":1185,"text":1186},"the-solution","The solution",{"depth":230,"slug":1188,"text":1189},"install-docker-desktop","Install Docker Desktop",{"depth":230,"slug":1191,"text":1192},"using-docker-init","Using Docker Init",{"depth":230,"slug":1194,"text":1195},"modifying-the-dockerfile","Modifying the Dockerfile",{"depth":230,"slug":1197,"text":1198},"create-the-nginxconf-file","Create the nginx.conf file",{"depth":230,"slug":1200,"text":1201},"testing-locally-with-docker","Testing locally with Docker",{"depth":230,"slug":1203,"text":1204},"deploying-on-coolify","Deploying on Coolify",{"depth":230,"slug":289,"text":290},[1176,1177,1178],"fix-missing-404-pages-for-coolify-static-site-deployments.md","comments-for-all-add-remark42-with-coolify-to-your-website",{"id":1208,"data":1210,"body":1221,"filePath":1222,"assetImports":1223,"digest":1237,"rendered":1238,"legacyId":1299},{"title":1211,"pubDate":1212,"description":1213,"author":1214,"image":1215,"tags":1218,"draft":211,"readingTime":1219,"lastDateModified":1220},"Comments for All: Add Remark42 with Coolify to Your Website",["Date","2024-11-14T00:00:00.000Z"],"Learn how to add Remark42, an open source comment engine with multiple auth providers, to your website without a subdomain. This tutorial will walk you through the steps and dive into the details on how to write the code and set it up on Coolify.",{"name":203,"email":204},{"url":1216,"alt":1217,"className":208},"https://images.unsplash.com/photo-1494583882007-bfd2321fb8e2","a top-down view of a patio with table and chairs",[417,418,419,420],"14 min read","2024-12-05T10:01:01+08:00","If you're looking to engage with your readers through comments on your website, this guide will help you get started.\n\nYou'll also gain other benefits such as:\n\n- Community building. Your readers will know each other and you'll learn more about them.\n- Increased SEO from readers who provide additional content, feedback, questions, and their opinions.\n- Better user experience since readers don't need to leave your site if they want to contact you.\n\nOne downside to all of this? Well, it can be tricky to set up.\n\nThe Remark42 documentation recommends using a subdomain which looks like:\n\n```bash\nwww.remark42.yourwebsite.com\n```\n\nBut I'm going deploy Remark42 as a path on my website like:\n\n```bash\nwww.yourwebsite.com/remark\n```\n\nHere is the [official docs on setting Remark42 up without a subdomain](https://remark42.com/docs/manuals/subdomain/).\n\nThere are pros and cons to each but I won't go into that.\n\nIn this tutorial, I'll walk you through setting it up.\n\n## Comment engines\n\nYou may be shopping around for a comments engine and stumbled upon a few like Disqus and Giscus.\n\nThey both offer exceptional services but one is paid and the other only allows auth via Github.\n\nI wanted something free and have a robust authentication flow.\n\nThe tool of choice?\n\n[Remark42](https://www.remark42.com).\n\n![remark42 demo](./_images/comments-for-all-remark42/remark42-demo.png)\n\nIt's a comment engine that is privacy focused and it supports many common authentication providers.\n\nAnd if you decide you want to ditch OAuth, you can have people login via email or anonymously.\n\nHere's a non-exhaustive list of other cool features Remarks provides out-of-the-box:\n\n- Multi-level nested comments with both tree and plain presentations\n- Import from Disqus and WordPress\n- Markdown support with friendly formatter toolbar\n- Moderators can remove comments and block users\n- Voting, pinning and verification system\n- and much more...\n\nCheck out their website for additional details or visit their [demo](https://remark42.com/demo/) to get a feel for it.\n\n## Hardware requirements\n\nI assume you already have a VPS, Coolify installed, and a domain like `www.yourwebsite.com` already configured.\n\nWell, if don't have none of these? Refer to my guide!\n\n- [Self-hosting Your Website with Coolify v4: A Step-by-Step Guide](/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide)\n\nRemark42 doesn't take much resources. From my estimation, the minimum specs you will need alongside Coolify is:\n\n- 2 CPU cores\n- 4 GB of RAM\n- 1TB+ of Storage\n\nIf you plan to deploy multiple application and services, you're going to want more power.\n\nI'm currently running on a 4 CPU/8GB of RAM with 160GB of storage setup on Hetzner where I have about 10 apps deployed.\n\n## Software Requirements\n\nIn order for this to work with any frontend project, we're going to need Docker.\n\nThe easiest way to install Docker is to download the [Docker Desktop](https://www.docker.com/products/docker-desktop/).\n\nIt comes bundled with everything you need to get going.\n\nThere are 3 files we're going to create that makes this whole thing work:\n\n- Dockerfile\n- docker-compose.yaml\n- nginx.conf\n\nThe `Dockerfile` are instructions to tell Docker how to build our frontend image.\n\nThe `docker-compose.yaml` tells Docker how to find or build images and then run them in containers.\n\nThe `nginx.conf` is a configuration file for our reverse proxy server so it can properly serve the files from our containers.\n\nTying them together is Docker where it will build and deploy a frontend, Remark42, and an nginx server.\n\n## Prepping Remark42\n\n### Choose auth(s)\n\nBefore we configure Remark42, you need to figure out how you want your readers to log in to leave comments.\n\nWhat would you like readers to do?\n\n- Post anonymously?\n- Log in via email and password?\n- Use OAuth providers like Google?\n\nWell, you can actually use a combination of these.\n\nI personally chose a few OAuth providers because it's more secure, prevent spam, and sensitive info is not stored.\n\nIf you want to use OAuth providers, you'll have to set those up beforehand to get the client ids and secrets for later in this tutorial.\n\nI won't be showing you how to do that but I found that the Github is the easiest to get started.\n\nRefer to this [documentation on getting OAuth client ids and secrets](https://remark42.com/docs/configuration/authorization/) for common providers.\n\nFor each OAuth provider you choose, you must provide the correct callback so Remark42 can properly handle request from the providers.\n\nThe callback URL looks like:\n\n```plaintext\nhttps://yourwebsite.com/remark/auth/\u003Cprovider>/callback\n```\n\nFor local development, use:\n\n```text\nhttp://127.0.0.1:\u003Cport>/remark/auth/\u003Cprovider>/callback\n```\n\n** NOTE ** Not all providers will allow localhost development.\n\n### Notifications\n\nRemark42 can enable notifications whenever someone leaves a comment.\n\nThe available options are: Slack, email, and Telegram.\n\nI've chose Telegram because it's incredibly easy to set up.\n\nYou need [a Telegram account](https://telegram.org) to get an API Key.\n\nOnce you do that, you'll have to message `@BotFather` with `/newbot`\n\nFollow the instructions to give a display name and username your bot.\n\nI've chose `billyle.dev comments` as my display name and the username of `billyle_dev_comments_bot`.\n\n![botfather newbot flow](./_images/comments-for-all-remark42/botfather-newbot.png)\n\nYou will receive a API token where the red bar is in the above image.\n\nWe will use this value in our `.env` file.\n\nWe need to create a private channel and invite the bot to our private channel.\n\nAll channels created are private by default.\n\nTo create a channel, follow these [instructions](https://telegram.org/faq_channels#q-what-39s-a-channel) for your device.\n\nNow it's time to get the channel id which is a bit tricky.\n\nI found the easiest way is to login to Telegram from a web browser to retreive it.\n\n![telegram channel id](./_images/comments-for-all-remark42/telegram-channel-id.png)\n\nAfter getting the channel id, you will have to prefix it with `-100`.\n\nIn the example above, our actual channel id is: `-1002460468573`.\n\nNow to invite our bot to our channel, follow these steps:\n\n1. Go to your private channel, find the \"Admins\" button and click on \"Add Admin\".\n2. Click on the channel's avatar icon.\n3. Find the \"Administrators\" button and click that.\n4. Click on \"Add Admin\"\n5. Type in your bot's username and click on it\n6. Set the permissions for your bot to only have \"Post\" privileges.\n7. Click \"Done\"\n\nYou should now see two Administrators for your channel - yourself and your newly created bot.\n\nWith that out of the way, we can now move on to the coding aspect of this tutorial.\n\n## Project setup\n\nOur next step is to navigate to the root of your frontend project.\n\nFor example, this website's file structure looks like this:\n\n```bash\n.\n├── astro.config.ts\n├── dist\n├── docker-compose.yaml\n├── Dockerfile\n├── nginx.conf\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── postcss.config.mjs\n├── public\n├── README.md\n├── remark-plugins\n├── src\n├── tailwind.config.mjs\n├── tsconfig.json\n└── unstage-drafts.ts\n```\n\nIt's a simple project but no matter how complex your frontend is, ideally the core concepts of this should work the same.\n\nLet's move on to the `.env` file.\n\n### .env file\n\nCreate an `.env` file in the root of your frontend project.\n\nIn this file, add all the environment variables for the authentication methods.\n\n```dotenv\nPUBLIC_REMARK_URL=https://yourwebsite.com/remark\nPUBLIC_SITE=my_website\nREMARK_SECRET=superSecret123\nREMARK_ALLOWED_HOSTS=\"'self',https://yourwebsite.com\"\nADMIN_SHARED_ID=\nAUTH_GOOGLE_CID=\nAUTH_GOOGLE_CSEC=\nAUTH_GITHUB_CID=\nAUTH_GITHUB_CSEC=\nTELEGRAM_TOKEN=\nNOTIFY_TELEGRAM_CHAN=\n```\n\nThe `PUBLIC_REMARK_URL` and `REMARK_SECRET` are required by Remark42.\n\nThe public remark url should look like `http://yourwebsite.com/remark`.\n\nThis value will be used for both the frontend and remark service.\n\nThe `PUBLIC_SITE` is a custom name field. By default it is `remark` but I chose a meaningful name like `billyle_dev`\n\nThe `REMARK_ALLOWED_HOSTS` will be the value of `\"self,https://yourwebsite.com\"`.\n\nDoing it this way will give us extra security that only requests from our domain is authorized to make requests.\n\nAdd the rest of the key value for your chosen auth providers and Telegram configuration.\n\nWith that out of the way, let's create our `Dockerfile`.\n\n### Dockerfile\n\nIf you're using Astro, this Dockerfile example will work for you with little adjustments.\n\nBut if you're using another framework like NextJS, Solid, Vue, etc. you'll have to look up how to create a Dockerfile for them.\n\nAt the root, create the file.\n\n```bash\ntouch Dockerfile\n```\n\nAnd then copy this if your using Astro.\n\n```docker\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=lts\nARG PNPM_VERSION=9.12.3\n\nFROM node:${NODE_VERSION}-alpine AS base\nWORKDIR /usr/src/app\nRUN --mount=type=cache,target=/root/.npm \\\n    npm install -g pnpm@${PNPM_VERSION}\nCOPY package.json pnpm-lock.yaml ./\n\nFROM base AS prod-deps\nRUN pnpm install --prod --frozen-lockfile\n\nFROM base AS build-deps\nRUN pnpm install --frozen-lockfile\n\nFROM build-deps AS build\nARG PUBLIC_REMARK_URL\nARG PUBLIC_SITE\nENV PUBLIC_REMARK_URL=${PUBLIC_REMARK_URL}\nENV PUBLIC_SITE=${PUBLIC_SITE}\nCOPY . .\nRUN --mount=type=cache,target=/usr/src/app/node_modules/.astro \\\n    --mount=type=cache,target=/root/.astro/cache,sharing=locked \\\n    mkdir -p node_modules/.astro && \\\n    pnpm run build\n\nFROM base AS runtime\nCOPY --from=prod-deps /usr/src/app/node_modules ./node_modules\nCOPY --from=build /usr/src/app/dist ./dist\n\nFROM nginx:stable-alpine3.17 AS final\nCOPY nginx.conf /etc/nginx/nginx.conf\nCOPY --from=build /usr/src/app/dist /usr/share/nginx/html\nEXPOSE 4321\n```\n\nI won't explain too much but in this `Dockerfile`, we're creating a multi-stage process to take advantage of Docker's caching.\n\nWe want to make our builds fast so we split up different parts of the build process.\n\nFor example, in the first step we copied the `package.json` and `pnpm-lock.yaml` files and it gets cached by Docker.\n\nThen in the next few steps, Docker only run `pnpm install` if the two files has changed, otherwise, we reach for what's been cached.\n\nIf you want to find out more about this, read the docs on [Docker build cache\n](https://docs.docker.com/build/cache/).\n\nAnother important note is how we create environment variables.\n\nThe `ARG` values will be passed into our `Dockerfile` and set our `ENV` variable from Docker Compose.\n\nIn turn, the `ENV` will be used in the build process for the frontend.\n\nOnce that's complete, we'll move on to creating the `docker-compose.yaml`.\n\n### docker-compose.yaml\n\nAt the root, create the file from the terminal.\n\n```bash\ntouch docker-compose.yaml\n```\n\nCopy the code below. Make adjustments to both the `frontend` and `remark` service to your project.\n\n```yaml\nservices:\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        PUBLIC_REMARK_URL: ${PUBLIC_REMARK_URL}\n        PUBLIC_SITE: ${PUBLIC_SITE}\n    container_name: \"frontend\"\n    ports:\n      - \"4321:4321\"\n    expose:\n      - \"4321\"\n    networks:\n      - app\n    environment:\n      - PUBLIC_REMARK_URL=${PUBLIC_REMARK_URL}\n      - PUBLIC_SITE=${PUBLIC_SITE}\n    env_file:\n      - .env\n  remark42:\n    image: umputun/remark42:latest\n    container_name: remark42\n    hostname: remark42\n    restart: always\n    logging:\n      driver: json-file\n      options:\n        max-size: \"10m\"\n        max-file: \"5\"\n    ports:\n      - \"8081:8080\"\n    networks:\n      - app\n    environment:\n      - REMARK_URL=${PUBLIC_REMARK_URL}\n      - SITE=${PUBLIC_SITE}\n      - SECRET=${REMARK_SECRET}\n      - ADMIN_SHARED_ID=${ADMIN_SHARED_ID}\n      - AUTH_GOOGLE_CID=${AUTH_GOOGLE_CID}\n      - AUTH_GOOGLE_CSEC=${AUTH_GOOGLE_CSEC}\n      - AUTH_GITHUB_CID=${AUTH_GITHUB_CID}\n      - AUTH_GITHUB_CSEC=${AUTH_GITHUB_CSEC}\n      - AUTH_TELEGRAM=true\n      - NOTIFY_ADMINS=telegram\n      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}\n      - NOTIFY_TELEGRAM_CHAN=${NOTIFY_TELEGRAM_CHAN}\n      - ALLOWED_HOSTS=${REMARK_ALLOWED_HOSTS}\n    env_file:\n      - .env\n    volumes:\n      - remark42:/srv/var\n\nnetworks:\n  app:\n\nvolumes:\n  remark42:\n```\n\nRefer to the [backend configuration](https://remark42.com/docs/configuration/parameters/) to view all the available options.\n\nThere are quite a few things going on in this file.\n\n1. We created two services, `frontend` and `remark`, each with their own configurations.\n2. We are pulling in environment variables from `.env` with the `env_file`.\n3. We mapped ports of both services to communicate with the host.\n4. We created a network called `app` so these two containers can talk to each other.\n5. Finally, we created a volume for remark to store our comments.\n\nOne thing to note is that our `frontend` service is using a `build: .` while our `remark` service doesn't.\n\n# NGINX config\n\nNow create another file at the root of your project called `nginx.conf`\n\n```bash\ntouch nginx.conf\n```\n\nHere is a template you can use for an Astro project.\n\nFor other frameworks, you'll have to look it up to get it right.\n\n```nginx\nworker_processes  1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  server {\n    listen 4321;\n    server_name _;\n\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    include /etc/nginx/mime.types;\n\n    gzip on;\n    gzip_comp_level 5;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/font-woff application/font-woff2 image/svg+xml;\n\n    client_max_body_size 10M;\n    client_body_timeout 12;\n    client_header_timeout 12;\n    send_timeout 10;\n    keepalive_timeout 65;\n\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options DENY;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    error_page 404 /404.html;\n    location = /404.html {\n      root /usr/share/nginx/html;\n      internal;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n        internal;\n    }\n\n    location / {\n      try_files $uri $uri/index.html =404;\n    }\n\n    location /remark/ {\n      rewrite /remark/(.*) /$1 break;\n      proxy_pass http://remark42:8080/;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-Forwarded-Proto $scheme;\n    }\n  }\n}\n```\n\nIn this configuration, we're setting up our server to listen on port 4321 and respond to each path.\n\nThe `Dockerfile` we created before, will copy this config into the nginx container.\n\nThe important detail lies with the `/remark/` path which will proxy all requests from `https://yourwebsite.com:4321/remark/*` to the Remark42 service on port 8080 that we created in the `docker-compose.yaml` file.\n\nLater on, we'll add some more configuration to disable the demo page.\n\n### Frontend setup\n\nAll we need to do now is tell where Remark42 to render on the frontend.\n\nWe will have to create a global variable called `remark_config` and pass it some configurations and when the page loads, we'll invoke a function to make a request to our `remark42` server.\n\nI created a component for this in Astro and you can do something similar in React or vanilla JS.\n\nCreate a file called `Remark42.astro` if you're using Astro and use the following:\n\n```astro\n\u003Cscript>\n  var remark_config = {\n    host: import.meta.env.PUBLIC_REMARK_URL,\n    site_id: import.meta.env.PUBLIC_SITE,\n    components: [\"embed\"],\n    theme: window.localStorage.getItem(\"theme\") ?? \"dark\",\n    locale: \"en\",\n    show_email_subscription: true,\n    show_rss_subscription: false,\n    no_footer: true,\n    __colors__: {},\n  };\n\n  window.remark_config = remark_config;\n\n  function createRemark42Script(components: string[], doc: Document) {\n    for (let i = 0; i \u003C components.length; i++) {\n      let scriptEl: HTMLScriptElement = doc.createElement(\"script\");\n      let ext = \".js\";\n      let headOrBodyEl = doc.head || doc.body;\n\n      if (\"noModule\" in scriptEl && !scriptEl.noModule) {\n        scriptEl.type = \"module\";\n        ext = \".mjs\";\n      } else {\n        scriptEl.async = true;\n        scriptEl.defer = true;\n      }\n\n      scriptEl.src = `${window.remark_config.host}/web/${components[i]}${ext}`;\n      headOrBodyEl.appendChild(scriptEl);\n    }\n  }\n  if (\"remark_config\" in window) {\n    window.addEventListener(\"DOMContentLoaded\", () => {\n      createRemark42Script(\n        window.remark_config.components || [\"embed\"],\n        document,\n      );\n    });\n  }\n\u003C/script>\n\n\u003Csection id=\"remark42\">\u003C/section>\n\u003Cnoscript\n  >Please enable JavaScript to view the comments powered by Remark42.\u003C/noscript\n>\n```\n\nIn our script tag, the `remark_config` requires the `remark_url` and `site_id`.\n\nThose values will come from our `.env` file that we passed as `ARG` into the `frontend` service in Docker Compose.\n\nThe `remark_config` will be attached to the window as a global variable which will be used by the `createRemark42Script`.\n\nTo look up more configuration options, look at the [frontend guide](https://remark42.com/docs/configuration/frontend/).\n\nLastly, we need an HTML element to render our Remark42 component.\n\nAdd a container with the id of `remark42` and place it where you want it to render.\n\n```html\n\u003Csection id=\"remark42\">\u003C/section>\n```\n\nAdd a `\u003Cnoscript>` tag if you want. It's optional.\n\nThe 3 files - `Dockerfile`, `docker-compose.yaml`, and `nginx.conf` - have been created. Let's try running it now!\n\n### Running the services\n\nOkay now we're finally here!\n\nNow we can test if things are working.\n\nIn the terminal run this command:\n\n```bash\ndocker compose up --build\n```\n\nYou should see the Docker pulling and building images as such:\n\n![docker compose building](./_images/comments-for-all-remark42/docker-compose-building.png)\n\nHopefully everything builds without error and you should now see two servers running - `frontend` and `remark42`.\n\nTo test, goto the frontend by using `127.0.0.1:$PORT/remark/web` where `$PORT` is your port number.\n\n![docker compose building](./_images/comments-for-all-remark42/docker-compose-logs.png)\n\nYou should see the requests being made to your frontend and remark services like the ones above.\n\nIf you have trouble, stop the containers and debug press \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>C\u003C/kbd> followed by:\n\n```bash\ndocker compose down\n```\n\nIf all is well, you should be on the remark demo page hosted on your site!\n\n### Become an admin\n\nDecide an authentication provider to login as admin because you'll be using that user's id.\n\n![remark42 sigin with different auth providers](./_images/comments-for-all-remark42/comments-oauth.png)\n\nIf you setup your OAuth correctly, you should be able to login and return back to your website.\n\nI'm using Github to login as admin and after completing the login, I see my avatar.\n\nClick on your avatar and you should see your id in the sidebar that pops open.\n\n![remark42 sidebar modal](./_images/comments-for-all-remark42/comments-userid.png)\n\nCopy the id and paste it in your `.env` for the `ADMIN_SHARED_ID=` field.\n\nRestart the containers by using \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>C\u003C/kbd> and then run:\n\n```bash\ndocker compose down\n```\n\nRun `docker compose up --build` and revist the page and you should now see a \"Show Settings\" option which signifies you're an admin user.\n\nIf everything is good-to-go, merge it into your main branch and push it to your remote repository.\n\nYour existing frontend shouldn't be affected since we haven't changed the \"Build Pack\" in Coolify and your existing Coolify build should continue running the build command as before.\n\n## Deploy on Coolify\n\n### Project config\n\nGo to your admin instance of Coolify and navigate to where your frontend project is deployed.\n\nChange the \"Build Pack\" option to \"Docker Compose\".\n\nCoolify will load your `docker-compose.yaml` file and now you should see two fields under `Domains` with the names related to our services.\n\nAdd the port number of your frontend application from your `nginx.conf` to your domain.\n\n```plaintext\nhttps://yourwebsite.com:4321\n```\n\n![configuring project for docker compose in coolify](./_images/comments-for-all-remark42/coolify-docker-compose.png)\n\nAnd click on \"Save\" so that the configurations are loaded.\n\nYou should see in the generated Coolify labels the reverse-proxy ports:\n\n![coolify generated labels](./_images/comments-for-all-remark42/coolify-traefik-labels.png)\n\n### Environment Variables\n\nClick on the \"Environment Variables\" tab, click on \"Developer View\", and then enter all the values from your `.env`\n\n![coolify environment variables](./_images/comments-for-all-remark42/coolify-env-var.png)\n\nClick save to persist the values.\n\n### Deployment\n\nLet's deploy our application with our new configuration. Click on \"Redeploy\" and watch the build.\n\nIt may take a while depending the size of your project since this will be the first time Docker Compose is building your images.\n\nOnce it's complete, you should see your services has started and a \"New container started\".\n\n![coolify deployment logs](./_images/comments-for-all-remark42/coolify-deployment-logs.png)\n\nNavigate to your website where the Remark42 will be rendered and try logging in with the same Auth you've used for admin.\n\nHopefully it all works and now you can leave a comment and see a notification from Telegram.\n\n![testing remark42 comments](./_images/comments-for-all-remark42/comments-hello.png)\n\n![telegram notification from comments](./_images/comments-for-all-remark42/telegram-notification.png)\n\n## Summary\n\nCongrats! You've finally go Remark42 deployed on your website without a subdomain.\n\nWe've covered a lot of ground but hopefully it was worth it.\n\nYour readers can now leave comments!\n\nSo, to summarized, we talked about the hardware and software requirements, and setting up our project for success.\n\nAfter we coded up all the necessary bits, we learned how to deploy it on Coolify.\n\nIf you had any trouble with this tutorial, please leave a comment or if you found this helpful leave a thanks!\n\nUntil next time, happy coding!","src/content/posts/comments-for-all-add-remark42-with-coolify-to-your-website.md",[1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236],"./_images/comments-for-all-remark42/remark42-demo.png","./_images/comments-for-all-remark42/botfather-newbot.png","./_images/comments-for-all-remark42/telegram-channel-id.png","./_images/comments-for-all-remark42/docker-compose-building.png","./_images/comments-for-all-remark42/docker-compose-logs.png","./_images/comments-for-all-remark42/comments-oauth.png","./_images/comments-for-all-remark42/comments-userid.png","./_images/comments-for-all-remark42/coolify-docker-compose.png","./_images/comments-for-all-remark42/coolify-traefik-labels.png","./_images/comments-for-all-remark42/coolify-env-var.png","./_images/comments-for-all-remark42/coolify-deployment-logs.png","./_images/comments-for-all-remark42/comments-hello.png","./_images/comments-for-all-remark42/telegram-notification.png","ff8fa2faf3de4ca6",{"html":1239,"metadata":1240},"\u003Cp>If you’re looking to engage with your readers through comments on your website, this guide will help you get started.\u003C/p>\n\u003Cp>You’ll also gain other benefits such as:\u003C/p>\n\u003Cul>\n\u003Cli>Community building. Your readers will know each other and you’ll learn more about them.\u003C/li>\n\u003Cli>Increased SEO from readers who provide additional content, feedback, questions, and their opinions.\u003C/li>\n\u003Cli>Better user experience since readers don’t need to leave your site if they want to contact you.\u003C/li>\n\u003C/ul>\n\u003Cp>One downside to all of this? Well, it can be tricky to set up.\u003C/p>\n\u003Cp>The Remark42 documentation recommends using a subdomain which looks like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">www.remark42.yourwebsite.com\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I’m going deploy Remark42 as a path on my website like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">www.yourwebsite.com/remark\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here is the \u003Ca href=\"https://remark42.com/docs/manuals/subdomain/\">official docs on setting Remark42 up without a subdomain\u003C/a>.\u003C/p>\n\u003Cp>There are pros and cons to each but I won’t go into that.\u003C/p>\n\u003Cp>In this tutorial, I’ll walk you through setting it up.\u003C/p>\n\u003Csection>\u003Ch2 id=\"comment-engines\">Comment engines\u003C/h2>\u003Cp>You may be shopping around for a comments engine and stumbled upon a few like Disqus and Giscus.\u003C/p>\u003Cp>They both offer exceptional services but one is paid and the other only allows auth via Github.\u003C/p>\u003Cp>I wanted something free and have a robust authentication flow.\u003C/p>\u003Cp>The tool of choice?\u003C/p>\u003Cp>\u003Ca href=\"https://www.remark42.com\">Remark42\u003C/a>.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/remark42-demo.png&#x22;,&#x22;alt&#x22;:&#x22;remark42 demo&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>It’s a comment engine that is privacy focused and it supports many common authentication providers.\u003C/p>\u003Cp>And if you decide you want to ditch OAuth, you can have people login via email or anonymously.\u003C/p>\u003Cp>Here’s a non-exhaustive list of other cool features Remarks provides out-of-the-box:\u003C/p>\u003Cul>\n\u003Cli>Multi-level nested comments with both tree and plain presentations\u003C/li>\n\u003Cli>Import from Disqus and WordPress\u003C/li>\n\u003Cli>Markdown support with friendly formatter toolbar\u003C/li>\n\u003Cli>Moderators can remove comments and block users\u003C/li>\n\u003Cli>Voting, pinning and verification system\u003C/li>\n\u003Cli>and much more…\u003C/li>\n\u003C/ul>\u003Cp>Check out their website for additional details or visit their \u003Ca href=\"https://remark42.com/demo/\">demo\u003C/a> to get a feel for it.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"hardware-requirements\">Hardware requirements\u003C/h2>\u003Cp>I assume you already have a VPS, Coolify installed, and a domain like \u003Ccode>www.yourwebsite.com\u003C/code> already configured.\u003C/p>\u003Cp>Well, if don’t have none of these? Refer to my guide!\u003C/p>\u003Cul>\n\u003Cli>\u003Ca href=\"/posts/self-hosting-your-website-with-coolify-v4-a-step-by-step-guide\">Self-hosting Your Website with Coolify v4: A Step-by-Step Guide\u003C/a>\u003C/li>\n\u003C/ul>\u003Cp>Remark42 doesn’t take much resources. From my estimation, the minimum specs you will need alongside Coolify is:\u003C/p>\u003Cul>\n\u003Cli>2 CPU cores\u003C/li>\n\u003Cli>4 GB of RAM\u003C/li>\n\u003Cli>1TB+ of Storage\u003C/li>\n\u003C/ul>\u003Cp>If you plan to deploy multiple application and services, you’re going to want more power.\u003C/p>\u003Cp>I’m currently running on a 4 CPU/8GB of RAM with 160GB of storage setup on Hetzner where I have about 10 apps deployed.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"software-requirements\">Software Requirements\u003C/h2>\u003Cp>In order for this to work with any frontend project, we’re going to need Docker.\u003C/p>\u003Cp>The easiest way to install Docker is to download the \u003Ca href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop\u003C/a>.\u003C/p>\u003Cp>It comes bundled with everything you need to get going.\u003C/p>\u003Cp>There are 3 files we’re going to create that makes this whole thing work:\u003C/p>\u003Cul>\n\u003Cli>Dockerfile\u003C/li>\n\u003Cli>docker-compose.yaml\u003C/li>\n\u003Cli>nginx.conf\u003C/li>\n\u003C/ul>\u003Cp>The \u003Ccode>Dockerfile\u003C/code> are instructions to tell Docker how to build our frontend image.\u003C/p>\u003Cp>The \u003Ccode>docker-compose.yaml\u003C/code> tells Docker how to find or build images and then run them in containers.\u003C/p>\u003Cp>The \u003Ccode>nginx.conf\u003C/code> is a configuration file for our reverse proxy server so it can properly serve the files from our containers.\u003C/p>\u003Cp>Tying them together is Docker where it will build and deploy a frontend, Remark42, and an nginx server.\u003C/p>\u003C/section>\n\u003Csection>\u003Ch2 id=\"prepping-remark42\">Prepping Remark42\u003C/h2>\u003Csection>\u003Ch3 id=\"choose-auths\">Choose auth(s)\u003C/h3>\u003Cp>Before we configure Remark42, you need to figure out how you want your readers to log in to leave comments.\u003C/p>\u003Cp>What would you like readers to do?\u003C/p>\u003Cul>\n\u003Cli>Post anonymously?\u003C/li>\n\u003Cli>Log in via email and password?\u003C/li>\n\u003Cli>Use OAuth providers like Google?\u003C/li>\n\u003C/ul>\u003Cp>Well, you can actually use a combination of these.\u003C/p>\u003Cp>I personally chose a few OAuth providers because it’s more secure, prevent spam, and sensitive info is not stored.\u003C/p>\u003Cp>If you want to use OAuth providers, you’ll have to set those up beforehand to get the client ids and secrets for later in this tutorial.\u003C/p>\u003Cp>I won’t be showing you how to do that but I found that the Github is the easiest to get started.\u003C/p>\u003Cp>Refer to this \u003Ca href=\"https://remark42.com/docs/configuration/authorization/\">documentation on getting OAuth client ids and secrets\u003C/a> for common providers.\u003C/p>\u003Cp>For each OAuth provider you choose, you must provide the correct callback so Remark42 can properly handle request from the providers.\u003C/p>\u003Cp>The callback URL looks like:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>https://yourwebsite.com/remark/auth/&#x3C;provider>/callback\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>For local development, use:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>http://127.0.0.1:&#x3C;port>/remark/auth/&#x3C;provider>/callback\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>** NOTE ** Not all providers will allow localhost development.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"notifications\">Notifications\u003C/h3>\u003Cp>Remark42 can enable notifications whenever someone leaves a comment.\u003C/p>\u003Cp>The available options are: Slack, email, and Telegram.\u003C/p>\u003Cp>I’ve chose Telegram because it’s incredibly easy to set up.\u003C/p>\u003Cp>You need \u003Ca href=\"https://telegram.org\">a Telegram account\u003C/a> to get an API Key.\u003C/p>\u003Cp>Once you do that, you’ll have to message \u003Ccode>@BotFather\u003C/code> with \u003Ccode>/newbot\u003C/code>\u003C/p>\u003Cp>Follow the instructions to give a display name and username your bot.\u003C/p>\u003Cp>I’ve chose \u003Ccode>billyle.dev comments\u003C/code> as my display name and the username of \u003Ccode>billyle_dev_comments_bot\u003C/code>.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/botfather-newbot.png&#x22;,&#x22;alt&#x22;:&#x22;botfather newbot flow&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You will receive a API token where the red bar is in the above image.\u003C/p>\u003Cp>We will use this value in our \u003Ccode>.env\u003C/code> file.\u003C/p>\u003Cp>We need to create a private channel and invite the bot to our private channel.\u003C/p>\u003Cp>All channels created are private by default.\u003C/p>\u003Cp>To create a channel, follow these \u003Ca href=\"https://telegram.org/faq_channels#q-what-39s-a-channel\">instructions\u003C/a> for your device.\u003C/p>\u003Cp>Now it’s time to get the channel id which is a bit tricky.\u003C/p>\u003Cp>I found the easiest way is to login to Telegram from a web browser to retreive it.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/telegram-channel-id.png&#x22;,&#x22;alt&#x22;:&#x22;telegram channel id&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>After getting the channel id, you will have to prefix it with \u003Ccode>-100\u003C/code>.\u003C/p>\u003Cp>In the example above, our actual channel id is: \u003Ccode>-1002460468573\u003C/code>.\u003C/p>\u003Cp>Now to invite our bot to our channel, follow these steps:\u003C/p>\u003Col>\n\u003Cli>Go to your private channel, find the “Admins” button and click on “Add Admin”.\u003C/li>\n\u003Cli>Click on the channel’s avatar icon.\u003C/li>\n\u003Cli>Find the “Administrators” button and click that.\u003C/li>\n\u003Cli>Click on “Add Admin”\u003C/li>\n\u003Cli>Type in your bot’s username and click on it\u003C/li>\n\u003Cli>Set the permissions for your bot to only have “Post” privileges.\u003C/li>\n\u003Cli>Click “Done”\u003C/li>\n\u003C/ol>\u003Cp>You should now see two Administrators for your channel - yourself and your newly created bot.\u003C/p>\u003Cp>With that out of the way, we can now move on to the coding aspect of this tutorial.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch2 id=\"project-setup\">Project setup\u003C/h2>\u003Cp>Our next step is to navigate to the root of your frontend project.\u003C/p>\u003Cp>For example, this website’s file structure looks like this:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> astro.config.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dist\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> docker-compose.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Dockerfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> nginx.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pnpm-lock.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> postcss.config.mjs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> public\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> README.md\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> remark-plugins\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tailwind.config.mjs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">├──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsconfig.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">└──\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> unstage-drafts.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>It’s a simple project but no matter how complex your frontend is, ideally the core concepts of this should work the same.\u003C/p>\u003Cp>Let’s move on to the \u003Ccode>.env\u003C/code> file.\u003C/p>\u003Csection>\u003Ch3 id=\"env-file\">.env file\u003C/h3>\u003Cp>Create an \u003Ccode>.env\u003C/code> file in the root of your frontend project.\u003C/p>\u003Cp>In this file, add all the environment variables for the authentication methods.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"dotenv\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">PUBLIC_REMARK_URL\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">https://yourwebsite.com/remark\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">PUBLIC_SITE\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">my_website\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">REMARK_SECRET\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">superSecret123\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">REMARK_ALLOWED_HOSTS\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"'self',https://yourwebsite.com\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">ADMIN_SHARED_ID\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">AUTH_GOOGLE_CID\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">AUTH_GOOGLE_CSEC\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">AUTH_GITHUB_CID\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">AUTH_GITHUB_CSEC\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">TELEGRAM_TOKEN\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">NOTIFY_TELEGRAM_CHAN\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>The \u003Ccode>PUBLIC_REMARK_URL\u003C/code> and \u003Ccode>REMARK_SECRET\u003C/code> are required by Remark42.\u003C/p>\u003Cp>The public remark url should look like \u003Ccode>http://yourwebsite.com/remark\u003C/code>.\u003C/p>\u003Cp>This value will be used for both the frontend and remark service.\u003C/p>\u003Cp>The \u003Ccode>PUBLIC_SITE\u003C/code> is a custom name field. By default it is \u003Ccode>remark\u003C/code> but I chose a meaningful name like \u003Ccode>billyle_dev\u003C/code>\u003C/p>\u003Cp>The \u003Ccode>REMARK_ALLOWED_HOSTS\u003C/code> will be the value of \u003Ccode>\"self,https://yourwebsite.com\"\u003C/code>.\u003C/p>\u003Cp>Doing it this way will give us extra security that only requests from our domain is authorized to make requests.\u003C/p>\u003Cp>Add the rest of the key value for your chosen auth providers and Telegram configuration.\u003C/p>\u003Cp>With that out of the way, let’s create our \u003Ccode>Dockerfile\u003C/code>.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"dockerfile\">Dockerfile\u003C/h3>\u003Cp>If you’re using Astro, this Dockerfile example will work for you with little adjustments.\u003C/p>\u003Cp>But if you’re using another framework like NextJS, Solid, Vue, etc. you’ll have to look up how to create a Dockerfile for them.\u003C/p>\u003Cp>At the root, create the file.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">touch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Dockerfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>And then copy this if your using Astro.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"docker\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># syntax=docker/dockerfile:1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> NODE_VERSION=lts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PNPM_VERSION=9.12.3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node:${NODE_VERSION}-alpine \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">WORKDIR\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /usr/src/app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,target=/root/.npm \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    npm install -g pnpm@${PNPM_VERSION}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> package.json pnpm-lock.yaml ./\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prod-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pnpm install --prod --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pnpm install --frozen-lockfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build-deps \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PUBLIC_REMARK_URL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ARG\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PUBLIC_SITE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PUBLIC_REMARK_URL=${PUBLIC_REMARK_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ENV\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PUBLIC_SITE=${PUBLIC_SITE}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> . .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">RUN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --mount=type=cache,target=/usr/src/app/node_modules/.astro \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    --mount=type=cache,target=/root/.astro/cache,sharing=locked \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    mkdir -p node_modules/.astro &#x26;&#x26; \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    pnpm run build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> base \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> runtime\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=prod-deps /usr/src/app/node_modules ./node_modules\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=build /usr/src/app/dist ./dist\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nginx:stable-alpine3.17 \u003C/span>\u003Cspan style=\"color:#F97583\">AS\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> final\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nginx.conf /etc/nginx/nginx.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">COPY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> --from=build /usr/src/app/dist /usr/share/nginx/html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">EXPOSE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> 4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>I won’t explain too much but in this \u003Ccode>Dockerfile\u003C/code>, we’re creating a multi-stage process to take advantage of Docker’s caching.\u003C/p>\u003Cp>We want to make our builds fast so we split up different parts of the build process.\u003C/p>\u003Cp>For example, in the first step we copied the \u003Ccode>package.json\u003C/code> and \u003Ccode>pnpm-lock.yaml\u003C/code> files and it gets cached by Docker.\u003C/p>\u003Cp>Then in the next few steps, Docker only run \u003Ccode>pnpm install\u003C/code> if the two files has changed, otherwise, we reach for what’s been cached.\u003C/p>\u003Cp>If you want to find out more about this, read the docs on \u003Ca href=\"https://docs.docker.com/build/cache/\">Docker build cache\n\u003C/a>.\u003C/p>\u003Cp>Another important note is how we create environment variables.\u003C/p>\u003Cp>The \u003Ccode>ARG\u003C/code> values will be passed into our \u003Ccode>Dockerfile\u003C/code> and set our \u003Ccode>ENV\u003C/code> variable from Docker Compose.\u003C/p>\u003Cp>In turn, the \u003Ccode>ENV\u003C/code> will be used in the build process for the frontend.\u003C/p>\u003Cp>Once that’s complete, we’ll move on to creating the \u003Ccode>docker-compose.yaml\u003C/code>.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"docker-composeyaml\">docker-compose.yaml\u003C/h3>\u003Cp>At the root, create the file from the terminal.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">touch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> docker-compose.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Copy the code below. Make adjustments to both the \u003Ccode>frontend\u003C/code> and \u003Ccode>remark\u003C/code> service to your project.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">services\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  frontend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      context\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      dockerfile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Dockerfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      args\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        PUBLIC_REMARK_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">${PUBLIC_REMARK_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        PUBLIC_SITE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">${PUBLIC_SITE}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    container_name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"frontend\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    ports\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"4321:4321\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    expose\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"4321\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    networks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">PUBLIC_REMARK_URL=${PUBLIC_REMARK_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">PUBLIC_SITE=${PUBLIC_SITE}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    env_file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">.env\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  remark42\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">umputun/remark42:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    container_name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">remark42\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    hostname\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">remark42\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    restart\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">always\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    logging\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      driver\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">json-file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      options\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        max-size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"10m\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        max-file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"5\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    ports\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"8081:8080\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    networks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">REMARK_URL=${PUBLIC_REMARK_URL}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">SITE=${PUBLIC_SITE}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">SECRET=${REMARK_SECRET}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ADMIN_SHARED_ID=${ADMIN_SHARED_ID}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">AUTH_GOOGLE_CID=${AUTH_GOOGLE_CID}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">AUTH_GOOGLE_CSEC=${AUTH_GOOGLE_CSEC}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">AUTH_GITHUB_CID=${AUTH_GITHUB_CID}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">AUTH_GITHUB_CSEC=${AUTH_GITHUB_CSEC}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">AUTH_TELEGRAM=true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">NOTIFY_ADMINS=telegram\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">TELEGRAM_TOKEN=${TELEGRAM_TOKEN}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">NOTIFY_TELEGRAM_CHAN=${NOTIFY_TELEGRAM_CHAN}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ALLOWED_HOSTS=${REMARK_ALLOWED_HOSTS}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    env_file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">.env\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">remark42:/srv/var\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">networks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  app\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  remark42\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Refer to the \u003Ca href=\"https://remark42.com/docs/configuration/parameters/\">backend configuration\u003C/a> to view all the available options.\u003C/p>\u003Cp>There are quite a few things going on in this file.\u003C/p>\u003Col>\n\u003Cli>We created two services, \u003Ccode>frontend\u003C/code> and \u003Ccode>remark\u003C/code>, each with their own configurations.\u003C/li>\n\u003Cli>We are pulling in environment variables from \u003Ccode>.env\u003C/code> with the \u003Ccode>env_file\u003C/code>.\u003C/li>\n\u003Cli>We mapped ports of both services to communicate with the host.\u003C/li>\n\u003Cli>We created a network called \u003Ccode>app\u003C/code> so these two containers can talk to each other.\u003C/li>\n\u003Cli>Finally, we created a volume for remark to store our comments.\u003C/li>\n\u003C/ol>\u003Cp>One thing to note is that our \u003Ccode>frontend\u003C/code> service is using a \u003Ccode>build: .\u003C/code> while our \u003Ccode>remark\u003C/code> service doesn’t.\u003C/p>\u003C/section>\u003C/section>\n\u003Csection>\u003Ch1 id=\"nginx-config\">NGINX config\u003C/h1>\u003Cp>Now create another file at the root of your project called \u003Ccode>nginx.conf\u003C/code>\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">touch\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> nginx.conf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Here is a template you can use for an Astro project.\u003C/p>\u003Cp>For other frameworks, you’ll have to look it up to get it right.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nginx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">worker_processes \u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">events\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  worker_connections \u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">http\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  server\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    listen \u003C/span>\u003Cspan style=\"color:#79B8FF\">4321\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    server_name \u003C/span>\u003Cspan style=\"color:#E1E4E8\">_;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">  /usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    index \u003C/span>\u003Cspan style=\"color:#E1E4E8\"> index.html index.htm;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    include \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/etc/nginx/mime.types;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip \u003C/span>\u003Cspan style=\"color:#79B8FF\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_comp_level \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_min_length \u003C/span>\u003Cspan style=\"color:#79B8FF\">1024\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_proxied \u003C/span>\u003Cspan style=\"color:#E1E4E8\">any;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    gzip_types \u003C/span>\u003Cspan style=\"color:#E1E4E8\">text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/font-woff application/font-woff2 image/svg+xml;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    client_max_body_size \u003C/span>\u003Cspan style=\"color:#79B8FF\">10M\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    client_body_timeout \u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    client_header_timeout \u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    send_timeout \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    keepalive_timeout \u003C/span>\u003Cspan style=\"color:#79B8FF\">65\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    add_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-Content-Type-Options nosniff;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    add_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-Frame-Options DENY;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    add_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-XSS-Protection \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1; mode=block\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    error_page \u003C/span>\u003Cspan style=\"color:#79B8FF\">404\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /404.html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#DBEDFF\"> /404.html \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      internal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    error_page \u003C/span>\u003Cspan style=\"color:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 502\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 503\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 504\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /50x.html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#DBEDFF\"> /50x.html \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        root \u003C/span>\u003Cspan style=\"color:#E1E4E8\">/usr/share/nginx/html;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        internal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#B392F0\"> / \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      try_files \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$uri $uri/index.html \u003C/span>\u003Cspan style=\"color:#79B8FF\">=404\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    location\u003C/span>\u003Cspan style=\"color:#B392F0\"> /remark/ \u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      rewrite\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> /remark/(.*) /$1 \u003C/span>\u003Cspan style=\"color:#F97583\">break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      proxy_pass \u003C/span>\u003Cspan style=\"color:#E1E4E8\">http://remark42:8080/;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      proxy_set_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">Host $http_host;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      proxy_set_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-Real-IP $remote_addr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      proxy_set_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-Forwarded-For $proxy_add_x_forwarded_for;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      proxy_set_header \u003C/span>\u003Cspan style=\"color:#E1E4E8\">X-Forwarded-Proto $scheme;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In this configuration, we’re setting up our server to listen on port 4321 and respond to each path.\u003C/p>\u003Cp>The \u003Ccode>Dockerfile\u003C/code> we created before, will copy this config into the nginx container.\u003C/p>\u003Cp>The important detail lies with the \u003Ccode>/remark/\u003C/code> path which will proxy all requests from \u003Ccode>https://yourwebsite.com:4321/remark/*\u003C/code> to the Remark42 service on port 8080 that we created in the \u003Ccode>docker-compose.yaml\u003C/code> file.\u003C/p>\u003Cp>Later on, we’ll add some more configuration to disable the demo page.\u003C/p>\u003Csection>\u003Ch3 id=\"frontend-setup\">Frontend setup\u003C/h3>\u003Cp>All we need to do now is tell where Remark42 to render on the frontend.\u003C/p>\u003Cp>We will have to create a global variable called \u003Ccode>remark_config\u003C/code> and pass it some configurations and when the page loads, we’ll invoke a function to make a request to our \u003Ccode>remark42\u003C/code> server.\u003C/p>\u003Cp>I created a component for this in Astro and you can do something similar in React or vanilla JS.\u003C/p>\u003Cp>Create a file called \u003Ccode>Remark42.astro\u003C/code> if you’re using Astro and use the following:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"astro\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> remark_config \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    host: \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PUBLIC_REMARK_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    site_id: \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">PUBLIC_SITE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    components: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"embed\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    theme: window.localStorage.\u003C/span>\u003Cspan style=\"color:#B392F0\">getItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"theme\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">??\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"dark\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    locale: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    show_email_subscription: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    show_rss_subscription: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    no_footer: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    __colors__: {},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  window.remark_config \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> remark_config;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  function\u003C/span>\u003Cspan style=\"color:#B392F0\"> createRemark42Script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">components\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[], \u003C/span>\u003Cspan style=\"color:#FFAB70\">doc\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Document\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> components.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scriptEl\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> HTMLScriptElement\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> doc.\u003C/span>\u003Cspan style=\"color:#B392F0\">createElement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"script\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ext \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \".js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> headOrBodyEl \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> doc.head \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> doc.body;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"noModule\"\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scriptEl \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> !\u003C/span>\u003Cspan style=\"color:#E1E4E8\">scriptEl.noModule) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        scriptEl.type \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"module\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ext \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \".mjs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        scriptEl.async \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        scriptEl.defer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      scriptEl.src \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">window\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">remark_config\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">host\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}/web/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">components\u003C/span>\u003Cspan style=\"color:#9ECBFF\">[\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i\u003C/span>\u003Cspan style=\"color:#9ECBFF\">]\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">ext\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      headOrBodyEl.\u003C/span>\u003Cspan style=\"color:#B392F0\">appendChild\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(scriptEl);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"remark_config\"\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> window) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    window.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"DOMContentLoaded\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      createRemark42Script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        window.remark_config.components \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"embed\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        document,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">script\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"remark42\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">noscript\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  >Please enable JavaScript to view the comments powered by Remark42.&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">noscript\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>In our script tag, the \u003Ccode>remark_config\u003C/code> requires the \u003Ccode>remark_url\u003C/code> and \u003Ccode>site_id\u003C/code>.\u003C/p>\u003Cp>Those values will come from our \u003Ccode>.env\u003C/code> file that we passed as \u003Ccode>ARG\u003C/code> into the \u003Ccode>frontend\u003C/code> service in Docker Compose.\u003C/p>\u003Cp>The \u003Ccode>remark_config\u003C/code> will be attached to the window as a global variable which will be used by the \u003Ccode>createRemark42Script\u003C/code>.\u003C/p>\u003Cp>To look up more configuration options, look at the \u003Ca href=\"https://remark42.com/docs/configuration/frontend/\">frontend guide\u003C/a>.\u003C/p>\u003Cp>Lastly, we need an HTML element to render our Remark42 component.\u003C/p>\u003Cp>Add a container with the id of \u003Ccode>remark42\u003C/code> and place it where you want it to render.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#B392F0\"> id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"remark42\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">section\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Add a \u003Ccode>&#x3C;noscript>\u003C/code> tag if you want. It’s optional.\u003C/p>\u003Cp>The 3 files - \u003Ccode>Dockerfile\u003C/code>, \u003Ccode>docker-compose.yaml\u003C/code>, and \u003Ccode>nginx.conf\u003C/code> - have been created. Let’s try running it now!\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"running-the-services\">Running the services\u003C/h3>\u003Cp>Okay now we’re finally here!\u003C/p>\u003Cp>Now we can test if things are working.\u003C/p>\u003Cp>In the terminal run this command:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>You should see the Docker pulling and building images as such:\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/docker-compose-building.png&#x22;,&#x22;alt&#x22;:&#x22;docker compose building&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Hopefully everything builds without error and you should now see two servers running - \u003Ccode>frontend\u003C/code> and \u003Ccode>remark42\u003C/code>.\u003C/p>\u003Cp>To test, goto the frontend by using \u003Ccode>127.0.0.1:$PORT/remark/web\u003C/code> where \u003Ccode>$PORT\u003C/code> is your port number.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/docker-compose-logs.png&#x22;,&#x22;alt&#x22;:&#x22;docker compose building&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>You should see the requests being made to your frontend and remark services like the ones above.\u003C/p>\u003Cp>If you have trouble, stop the containers and debug press \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>C\u003C/kbd> followed by:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> down\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>If all is well, you should be on the remark demo page hosted on your site!\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"become-an-admin\">Become an admin\u003C/h3>\u003Cp>Decide an authentication provider to login as admin because you’ll be using that user’s id.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/comments-oauth.png&#x22;,&#x22;alt&#x22;:&#x22;remark42 sigin with different auth providers&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>If you setup your OAuth correctly, you should be able to login and return back to your website.\u003C/p>\u003Cp>I’m using Github to login as admin and after completing the login, I see my avatar.\u003C/p>\u003Cp>Click on your avatar and you should see your id in the sidebar that pops open.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/comments-userid.png&#x22;,&#x22;alt&#x22;:&#x22;remark42 sidebar modal&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Copy the id and paste it in your \u003Ccode>.env\u003C/code> for the \u003Ccode>ADMIN_SHARED_ID=\u003C/code> field.\u003C/p>\u003Cp>Restart the containers by using \u003Ckbd>CTRL\u003C/kbd> + \u003Ckbd>C\u003C/kbd> and then run:\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> down\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003Cp>Run \u003Ccode>docker compose up --build\u003C/code> and revist the page and you should now see a “Show Settings” option which signifies you’re an admin user.\u003C/p>\u003Cp>If everything is good-to-go, merge it into your main branch and push it to your remote repository.\u003C/p>\u003Cp>Your existing frontend shouldn’t be affected since we haven’t changed the “Build Pack” in Coolify and your existing Coolify build should continue running the build command as before.\u003C/p>\u003C/section>\u003Csection>\u003Ch2 id=\"deploy-on-coolify\">Deploy on Coolify\u003C/h2>\u003Csection>\u003Ch3 id=\"project-config\">Project config\u003C/h3>\u003Cp>Go to your admin instance of Coolify and navigate to where your frontend project is deployed.\u003C/p>\u003Cp>Change the “Build Pack” option to “Docker Compose”.\u003C/p>\u003Cp>Coolify will load your \u003Ccode>docker-compose.yaml\u003C/code> file and now you should see two fields under \u003Ccode>Domains\u003C/code> with the names related to our services.\u003C/p>\u003Cp>Add the port number of your frontend application from your \u003Ccode>nginx.conf\u003C/code> to your domain.\u003C/p>\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>https://yourwebsite.com:4321\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/coolify-docker-compose.png&#x22;,&#x22;alt&#x22;:&#x22;configuring project for docker compose in coolify&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>And click on “Save” so that the configurations are loaded.\u003C/p>\u003Cp>You should see in the generated Coolify labels the reverse-proxy ports:\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/coolify-traefik-labels.png&#x22;,&#x22;alt&#x22;:&#x22;coolify generated labels&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"environment-variables\">Environment Variables\u003C/h3>\u003Cp>Click on the “Environment Variables” tab, click on “Developer View”, and then enter all the values from your \u003Ccode>.env\u003C/code>\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/coolify-env-var.png&#x22;,&#x22;alt&#x22;:&#x22;coolify environment variables&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Click save to persist the values.\u003C/p>\u003C/section>\u003Csection>\u003Ch3 id=\"deployment\">Deployment\u003C/h3>\u003Cp>Let’s deploy our application with our new configuration. Click on “Redeploy” and watch the build.\u003C/p>\u003Cp>It may take a while depending the size of your project since this will be the first time Docker Compose is building your images.\u003C/p>\u003Cp>Once it’s complete, you should see your services has started and a “New container started”.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/coolify-deployment-logs.png&#x22;,&#x22;alt&#x22;:&#x22;coolify deployment logs&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>Navigate to your website where the Remark42 will be rendered and try logging in with the same Auth you’ve used for admin.\u003C/p>\u003Cp>Hopefully it all works and now you can leave a comment and see a notification from Telegram.\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/comments-hello.png&#x22;,&#x22;alt&#x22;:&#x22;testing remark42 comments&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./_images/comments-for-all-remark42/telegram-notification.png&#x22;,&#x22;alt&#x22;:&#x22;telegram notification from comments&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\u003C/section>\u003C/section>\u003Csection>\u003Ch2 id=\"summary\">Summary\u003C/h2>\u003Cp>Congrats! You’ve finally go Remark42 deployed on your website without a subdomain.\u003C/p>\u003Cp>We’ve covered a lot of ground but hopefully it was worth it.\u003C/p>\u003Cp>Your readers can now leave comments!\u003C/p>\u003Cp>So, to summarized, we talked about the hardware and software requirements, and setting up our project for success.\u003C/p>\u003Cp>After we coded up all the necessary bits, we learned how to deploy it on Coolify.\u003C/p>\u003Cp>If you had any trouble with this tutorial, please leave a comment or if you found this helpful leave a thanks!\u003C/p>\u003Cp>Until next time, happy coding!\u003C/p>\u003C/section>\u003C/section>",{"headings":1241,"imagePaths":1298,"frontmatter":1210},[1242,1245,1248,1251,1254,1257,1260,1263,1266,1269,1272,1276,1279,1282,1285,1288,1291,1294,1297],{"depth":230,"slug":1243,"text":1244},"comment-engines","Comment engines",{"depth":230,"slug":1246,"text":1247},"hardware-requirements","Hardware requirements",{"depth":230,"slug":1249,"text":1250},"software-requirements","Software Requirements",{"depth":230,"slug":1252,"text":1253},"prepping-remark42","Prepping Remark42",{"depth":234,"slug":1255,"text":1256},"choose-auths","Choose auth(s)",{"depth":234,"slug":1258,"text":1259},"notifications","Notifications",{"depth":230,"slug":1261,"text":1262},"project-setup","Project setup",{"depth":234,"slug":1264,"text":1265},"env-file",".env file",{"depth":234,"slug":1267,"text":1268},"dockerfile","Dockerfile",{"depth":234,"slug":1270,"text":1271},"docker-composeyaml","docker-compose.yaml",{"depth":1273,"slug":1274,"text":1275},1,"nginx-config","NGINX config",{"depth":234,"slug":1277,"text":1278},"frontend-setup","Frontend setup",{"depth":234,"slug":1280,"text":1281},"running-the-services","Running the services",{"depth":234,"slug":1283,"text":1284},"become-an-admin","Become an admin",{"depth":230,"slug":1286,"text":1287},"deploy-on-coolify","Deploy on Coolify",{"depth":234,"slug":1289,"text":1290},"project-config","Project config",{"depth":234,"slug":1292,"text":1293},"environment-variables","Environment Variables",{"depth":234,"slug":1295,"text":1296},"deployment","Deployment",{"depth":230,"slug":1159,"text":1160},[1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236],"comments-for-all-add-remark42-with-coolify-to-your-website.md"]